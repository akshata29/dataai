{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "dataaisynapsewks"
		},
		"dataaicosmosdb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dataaicosmosdb'"
		},
		"dataaidw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dataaidw'"
		},
		"dataaidw_highperf_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dataaidw_highperf'"
		},
		"dataaidw_import01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dataaidw_import01'"
		},
		"dataaifile_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'dataaifile'"
		},
		"dataainsmidw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dataainsmidw'"
		},
		"dataaisynapsewks-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dataaisynapsewks-WorkspaceDefaultSqlServer'"
		},
		"dataaianomalydetector_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "e2171f6d-2650-45e6-af7e-6d6e44ca92b1"
		},
		"dataaicurateddls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dataaicurateddls.dfs.core.windows.net"
		},
		"dataaifile_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "D:\\repos\\nyctaxi\\reference-data"
		},
		"dataaifile_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "northamerica\\astalati"
		},
		"dataaikeyvault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dataaikeyvault.vault.azure.net/"
		},
		"dataaimlwks_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "e2171f6d-2650-45e6-af7e-6d6e44ca92b1"
		},
		"dataaimlwks_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "dataai"
		},
		"dataainychttp_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://d37ci6vzurychx.cloudfront.net/trip-data/"
		},
		"dataairawdls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dataairawdls.dfs.core.windows.net"
		},
		"dataaisynapsewks-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dataaiwksdls.dfs.core.windows.net"
		},
		"dataaitextanalytics_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "e2171f6d-2650-45e6-af7e-6d6e44ca92b1"
		},
		"dataaiwksdls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dataaiwksdls.dfs.core.windows.net"
		},
		"nyc_tlc_yellow_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'nyc_tlc_yellow'"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/0_CopyFileToStaging')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Reference Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*.*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "0_nyctaxireferencesourceds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "0_nyctaxireferencedestds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "NycTaxi/0_SourceToStaging"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-30T11:46:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/0_nyctaxireferencesourceds')]",
				"[concat(variables('workspaceId'), '/datasets/0_nyctaxireferencedestds')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_GreenTaxiCopyToStaging')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "nycgreentaxilookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "0_nycgreentaxidatads",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "foreachdata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "nycgreentaxilookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('nycgreentaxilookup').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "relativeUrl",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "nycTaxiRelativeUrl",
										"value": {
											"value": "@concat('green_tripdata_', item().Year, '-', item().Month, '.parquet')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy from Source",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "relativeUrl",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "0_nyctaxihttpsourceds",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "0_nyctaxirawdestinationds",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"nycTaxiRelativeUrl": {
						"type": "String"
					},
					"nycTaxiType": {
						"type": "String",
						"defaultValue": "green"
					}
				},
				"folder": {
					"name": "NycTaxi/0_SourceToStaging"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-30T11:58:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/0_nycgreentaxidatads')]",
				"[concat(variables('workspaceId'), '/datasets/0_nyctaxihttpsourceds')]",
				"[concat(variables('workspaceId'), '/datasets/0_nyctaxirawdestinationds')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_YellowTaxiCopyToStaging')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "nycyellotaxilookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "0_nycyellowtaxidatads",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "foreachdata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "nycyellotaxilookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('nycyellotaxilookup').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "relativeUrl",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "nycTaxiRelativeUrl",
										"value": {
											"value": "@concat('yellow_tripdata_', item().Year, '-', item().Month, '.parquet')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy from Source",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "relativeUrl",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "0_nyctaxihttpsourceds",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "0_nyctaxirawdestinationds",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"nycTaxiRelativeUrl": {
						"type": "String"
					},
					"nycTaxiType": {
						"type": "String",
						"defaultValue": "yellow"
					}
				},
				"folder": {
					"name": "NycTaxi/0_SourceToStaging"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-30T12:02:30Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/0_nycyellowtaxidatads')]",
				"[concat(variables('workspaceId'), '/datasets/0_nyctaxihttpsourceds')]",
				"[concat(variables('workspaceId'), '/datasets/0_nyctaxirawdestinationds')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_copy december sales')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Sales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "TRUNCATE TABLE wwi_staging.SaleHeap.",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 8,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TransactionId",
											"type": "String"
										},
										"sink": {
											"name": "TransactionId",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "CustomerId",
											"type": "Int32"
										},
										"sink": {
											"name": "CustomerId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProductId",
											"type": "Int16"
										},
										"sink": {
											"name": "ProductId",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "SByte"
										},
										"sink": {
											"name": "Quantity",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "Price",
											"type": "Decimal"
										},
										"sink": {
											"name": "Price",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TotalAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "TotalAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TransactionDate",
											"type": "Int32"
										},
										"sink": {
											"name": "TransactionDate",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProfitAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "ProfitAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "Hour",
											"type": "SByte"
										},
										"sink": {
											"name": "Hour",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "Minute",
											"type": "SByte"
										},
										"sink": {
											"name": "Minute",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "StoreId",
											"type": "Int16"
										},
										"sink": {
											"name": "StoreId",
											"type": "Int16"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "1_asal_december_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "1_asal_saleheap_asa",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "WideWorldImport/01_import sales data"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-30T01:58:53Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/1_asal_december_sales')]",
				"[concat(variables('workspaceId'), '/datasets/1_asal_saleheap_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_data analyst and ceo queries')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CEO",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,20)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 1 for CEO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "0_wwi02_salesmall_workload01",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Analyst",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,20)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 2 for Data Analyst",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "0_wwi02_salesmall_workload02",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "WideWorldImport/3_Monitoring"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_salesmall_workload01')]",
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_salesmall_workload02')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_load dates')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Date",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "dataairawdls",
									"type": "LinkedServiceReference"
								},
								"path": "wwi-02/staging"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "DateId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "Day",
											"type": "Byte"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "Month",
											"type": "Byte"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "Quarter",
											"type": "Byte"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "Year",
											"type": "Int16"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "0_wwi02_date_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "0_wwi02_date_asa",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Years": {
						"type": "array",
						"defaultValue": [
							2014,
							2015,
							2016,
							2017,
							2018,
							2019
						]
					}
				},
				"folder": {
					"name": "WideWorldImport/00_setup"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-30T01:58:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_date_adls')]",
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_date_asa')]",
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_load tpc dataset')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach - Create Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Wait - 5 seconds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter - All Except store_sales').output.value",
								"type": "Expression"
							},
							"batchCount": 23,
							"activities": [
								{
									"name": "Lookup - Load From External Table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": {
												"value": "@concat(json(item()).SqlStatement, ';SELECT 1 as a')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "tpcdssmidw",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": "dataaisynapsewks.sql.azuresynapse.net",
												"DatabaseName": {
													"value": "@pipeline().parameters.DatabaseName",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "Lookup - Create External Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "IF NOT EXISTS (SELECT 1 FROM sys.database_scoped_credentials WHERE [name] = 'AzureStorageCredential_MSI')  CREATE DATABASE SCOPED CREDENTIAL AzureStorageCredential_MSI WITH IDENTITY = 'Managed Identity';EXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'call_center_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.call_center_ext; CREATE EXTERNAL TABLE stagingTPCDS.call_center_ext (cc_call_center_sk INT,cc_call_center_id CHAR(16),cc_rec_start_date DATE,cc_rec_end_date DATE,cc_closed_date_sk INT,cc_open_date_sk INT,cc_name VARCHAR(19),cc_class VARCHAR(6),cc_employees INT,cc_sq_ft INT,cc_hours VARCHAR(8),cc_manager VARCHAR(21),cc_mkt_id INT,cc_mkt_class VARCHAR(50),cc_mkt_desc VARCHAR(100),cc_market_manager VARCHAR(18),cc_division INT,cc_division_name VARCHAR(5),cc_company INT,cc_company_name VARCHAR(5),cc_street_number CHAR(3),cc_street_name VARCHAR(17),cc_street_type VARCHAR(7),cc_suite_number VARCHAR(9),cc_city VARCHAR(13),cc_county VARCHAR(22),cc_state CHAR(2),cc_zip CHAR(5),cc_country CHAR(13),cc_gmt_offset NUMERIC(5,2),cc_tax_percentage NUMERIC(5,2)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/call_center/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'catalog_page_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.catalog_page_ext; CREATE EXTERNAL TABLE stagingTPCDS.catalog_page_ext (cp_catalog_page_sk INT,cp_catalog_page_id CHAR(16),cp_start_date_sk INT,cp_end_date_sk INT,cp_department CHAR(10),cp_catalog_number INT,cp_catalog_page_number INT,cp_description VARCHAR(99),cp_type VARCHAR(9)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/catalog_page/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'catalog_returns_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.catalog_returns_ext; CREATE EXTERNAL TABLE stagingTPCDS.catalog_returns_ext (cr_returned_date_sk INT,cr_returned_time_sk INT,cr_item_sk INT,cr_refunded_customer_sk INT,cr_refunded_cdemo_sk INT,cr_refunded_hdemo_sk INT,cr_refunded_addr_sk INT,cr_returning_customer_sk INT,cr_returning_cdemo_sk INT,cr_returning_hdemo_sk INT,cr_returning_addr_sk INT,cr_call_center_sk INT,cr_catalog_page_sk INT,cr_ship_mode_sk INT,cr_warehouse_sk INT,cr_reason_sk INT,cr_order_number BIGINT,cr_return_quantity INT,cr_return_amount NUMERIC(7,2),cr_return_tax NUMERIC(7,2),cr_return_amt_inc_tax NUMERIC(7,2),cr_fee NUMERIC(7,2),cr_return_ship_cost NUMERIC(7,2),cr_refunded_cash NUMERIC(7,2),cr_reversed_charge NUMERIC(7,2),cr_store_credit NUMERIC(7,2),cr_net_loss NUMERIC(7,2)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/catalog_returns/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'catalog_sales_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.catalog_sales_ext; CREATE EXTERNAL TABLE stagingTPCDS.catalog_sales_ext (cs_sold_date_sk INT,cs_sold_time_sk INT,cs_ship_date_sk INT,cs_bill_customer_sk INT,cs_bill_cdemo_sk INT,cs_bill_hdemo_sk INT,cs_bill_addr_sk INT,cs_ship_customer_sk INT,cs_ship_cdemo_sk INT,cs_ship_hdemo_sk INT,cs_ship_addr_sk INT,cs_call_center_sk INT,cs_catalog_page_sk INT,cs_ship_mode_sk INT,cs_warehouse_sk INT,cs_item_sk INT,cs_promo_sk INT,cs_order_number BIGINT,cs_quantity INT,cs_wholesale_cost NUMERIC(7,2),cs_list_price NUMERIC(7,2),cs_sales_price NUMERIC(7,2),cs_ext_discount_amt NUMERIC(7,2),cs_ext_sales_price NUMERIC(7,2),cs_ext_wholesale_cost NUMERIC(7,2),cs_ext_list_price NUMERIC(7,2),cs_ext_tax NUMERIC(7,2),cs_coupon_amt NUMERIC(7,2),cs_ext_ship_cost NUMERIC(7,2),cs_net_paid NUMERIC(7,2),cs_net_paid_inc_tax NUMERIC(7,2),cs_net_paid_inc_ship NUMERIC(7,2),cs_net_paid_inc_ship_tax NUMERIC(7,2),cs_net_profit NUMERIC(7,2)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/catalog_sales/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'customer_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.customer_ext; CREATE EXTERNAL TABLE stagingTPCDS.customer_ext (c_customer_sk INT,c_customer_id CHAR(16),c_current_cdemo_sk INT,c_current_hdemo_sk INT,c_current_addr_sk INT,c_first_shipto_date_sk INT,c_first_sales_date_sk INT,c_salutation VARCHAR(4),c_first_name VARCHAR(11),c_last_name VARCHAR(13),c_preferred_cust_flag CHAR(1),c_birth_day INT,c_birth_month INT,c_birth_year INT,c_birth_country VARCHAR(20),c_login CHAR(1),c_email_address VARCHAR(49),c_last_review_date CHAR(7)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/customer/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'customer_address_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.customer_address_ext; CREATE EXTERNAL TABLE stagingTPCDS.customer_address_ext (ca_address_sk INT,ca_address_id CHAR(16),ca_street_number VARCHAR(4),ca_street_name VARCHAR(21),ca_street_type VARCHAR(9),ca_suite_number VARCHAR(9),ca_city VARCHAR(20),ca_county VARCHAR(28),ca_state CHAR(2),ca_zip CHAR(5),ca_country CHAR(13),ca_gmt_offset NUMERIC(5,2),ca_location_type VARCHAR(13)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/customer_address/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'customer_demographics_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.customer_demographics_ext; CREATE EXTERNAL TABLE stagingTPCDS.customer_demographics_ext (cd_demo_sk INT,cd_gender CHAR(1),cd_marital_status CHAR(1),cd_education_status VARCHAR(15),cd_purchase_estimate INT,cd_credit_rating VARCHAR(9),cd_dep_count INT,cd_dep_employed_count INT,cd_dep_college_count INT) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/customer_demographics/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'date_dim_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.date_dim_ext; CREATE EXTERNAL TABLE stagingTPCDS.date_dim_ext (d_date_sk INT,d_date_id CHAR(16),d_date DATE,d_month_seq INT,d_week_seq INT,d_quarter_seq INT,d_year INT,d_dow INT,d_moy INT,d_dom INT,d_qoy INT,d_fy_year INT,d_fy_quarter_seq INT,d_fy_week_seq INT,d_day_name VARCHAR(9),d_quarter_name CHAR(6),d_holiday CHAR(1),d_weekend CHAR(1),d_following_holiday CHAR(1),d_first_dom INT,d_last_dom INT,d_same_day_ly INT,d_same_day_lq INT,d_current_day CHAR(1),d_current_week CHAR(1),d_current_month CHAR(1),d_current_quarter CHAR(1),d_current_year CHAR(1)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/date_dim/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'household_demographics_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.household_demographics_ext; CREATE EXTERNAL TABLE stagingTPCDS.household_demographics_ext (hd_demo_sk INT,hd_income_band_sk INT,hd_buy_potential VARCHAR(10),hd_dep_count INT,hd_vehicle_count INT) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/household_demographics/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'income_band_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.income_band_ext; CREATE EXTERNAL TABLE stagingTPCDS.income_band_ext (ib_income_band_sk INT,ib_lower_bound INT,ib_upper_bound INT) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/income_band/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'inventory_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.inventory_ext; CREATE EXTERNAL TABLE stagingTPCDS.inventory_ext (inv_date_sk INT,inv_item_sk INT,inv_warehouse_sk INT,inv_quantity_on_hand INT) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/inventory/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'item_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.item_ext; CREATE EXTERNAL TABLE stagingTPCDS.item_ext (i_item_sk INT,i_item_id CHAR(16),i_rec_start_date DATE,i_rec_end_date DATE,i_item_desc VARCHAR(200),i_current_price NUMERIC(7,2),i_wholesale_cost NUMERIC(7,2),i_brand_id INT,i_brand VARCHAR(22),i_class_id INT,i_class VARCHAR(15),i_category_id INT,i_category VARCHAR(11),i_manufact_id INT,i_manufact VARCHAR(15),i_size VARCHAR(11),i_formulation CHAR(20),i_color VARCHAR(10),i_units VARCHAR(7),i_container CHAR(7),i_manager_id INT,i_product_name VARCHAR(30)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/item/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'promotion_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.promotion_ext; CREATE EXTERNAL TABLE stagingTPCDS.promotion_ext (p_promo_sk INT,p_promo_id CHAR(16),p_start_date_sk INT,p_end_date_sk INT,p_item_sk INT,p_cost NUMERIC(15,2),p_response_target INT,p_promo_name VARCHAR(5),p_channel_dmail CHAR(1),p_channel_email CHAR(1),p_channel_catalog CHAR(1),p_channel_tv CHAR(1),p_channel_radio CHAR(1),p_channel_press CHAR(1),p_channel_event CHAR(1),p_channel_demo CHAR(1),p_channel_details VARCHAR(60),p_purpose CHAR(7),p_discount_active CHAR(1)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/promotion/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'reason_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.reason_ext; CREATE EXTERNAL TABLE stagingTPCDS.reason_ext (r_reason_sk INT,r_reason_id CHAR(16),r_reason_desc VARCHAR(43)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/reason/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'ship_mode_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.ship_mode_ext; CREATE EXTERNAL TABLE stagingTPCDS.ship_mode_ext (sm_ship_mode_sk INT,sm_ship_mode_id CHAR(16),sm_type VARCHAR(9),sm_code VARCHAR(7),sm_carrier VARCHAR(14),sm_contract VARCHAR(19)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/ship_mode/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'store_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.store_ext; CREATE EXTERNAL TABLE stagingTPCDS.store_ext (s_store_sk INT,s_store_id CHAR(16),s_rec_start_date DATE,s_rec_end_date DATE,s_closed_date_sk INT,s_store_name VARCHAR(5),s_number_employees INT,s_floor_space INT,s_hours VARCHAR(8),s_manager VARCHAR(19),s_market_id INT,s_geography_class CHAR(7),s_market_desc VARCHAR(100),s_market_manager VARCHAR(21),s_division_id INT,s_division_name CHAR(7),s_company_id INT,s_company_name CHAR(7),s_street_number VARCHAR(3),s_street_name VARCHAR(20),s_street_type VARCHAR(9),s_suite_number VARCHAR(9),s_city VARCHAR(15),s_county VARCHAR(22),s_state CHAR(2),s_zip CHAR(5),s_country CHAR(13),s_gmt_offset NUMERIC(5,2),s_tax_precentage NUMERIC(5,2)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/store/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'store_returns_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.store_returns_ext; CREATE EXTERNAL TABLE stagingTPCDS.store_returns_ext (sr_returned_date_sk INT,sr_return_time_sk INT,sr_item_sk INT,sr_customer_sk INT,sr_cdemo_sk INT,sr_hdemo_sk INT,sr_addr_sk INT,sr_store_sk INT,sr_reason_sk INT,sr_ticket_number BIGINT,sr_return_quantity INT,sr_return_amt NUMERIC(7,2),sr_return_tax NUMERIC(7,2),sr_return_amt_inc_tax NUMERIC(7,2),sr_fee NUMERIC(7,2),sr_return_ship_cost NUMERIC(7,2),sr_refunded_cash NUMERIC(7,2),sr_reversed_charge NUMERIC(7,2),sr_store_credit NUMERIC(7,2),sr_net_loss NUMERIC(7,2)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/store_returns/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'store_sales_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.store_sales_ext; CREATE EXTERNAL TABLE stagingTPCDS.store_sales_ext (ss_sold_date_sk INT,ss_sold_time_sk INT,ss_item_sk INT,ss_customer_sk INT,ss_cdemo_sk INT,ss_hdemo_sk INT,ss_addr_sk INT,ss_store_sk INT,ss_promo_sk INT,ss_ticket_number BIGINT,ss_quantity INT,ss_wholesale_cost NUMERIC(7,2),ss_list_price NUMERIC(7,2),ss_sales_price NUMERIC(7,2),ss_ext_discount_amt NUMERIC(7,2),ss_ext_sales_price NUMERIC(7,2),ss_ext_wholesale_cost NUMERIC(7,2),ss_ext_list_price NUMERIC(7,2),ss_ext_tax NUMERIC(7,2),ss_coupon_amt NUMERIC(7,2),ss_net_paid NUMERIC(7,2),ss_net_paid_inc_tax NUMERIC(7,2),ss_net_profit NUMERIC(7,2)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/store_sales/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'time_dim_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.time_dim_ext; CREATE EXTERNAL TABLE stagingTPCDS.time_dim_ext (t_time_sk INT,t_time_id CHAR(16),t_time INT,t_hour INT,t_minute INT,t_second INT,t_am_pm CHAR(2),t_shift VARCHAR(6),t_sub_shift VARCHAR(9),t_meal_time VARCHAR(9)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/time_dim/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'warehouse_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.warehouse_ext; CREATE EXTERNAL TABLE stagingTPCDS.warehouse_ext (w_warehouse_sk INT,w_warehouse_id CHAR(16),w_warehouse_name VARCHAR(20),w_warehouse_sq_ft INT,w_street_number VARCHAR(3),w_street_name VARCHAR(16),w_street_type VARCHAR(9),w_suite_number VARCHAR(9),w_city VARCHAR(15),w_county VARCHAR(22),w_state CHAR(2),w_zip CHAR(5),w_country CHAR(13),w_gmt_offset NUMERIC(5,2)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/warehouse/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'web_page_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.web_page_ext; CREATE EXTERNAL TABLE stagingTPCDS.web_page_ext (wp_web_page_sk INT,wp_web_page_id CHAR(16),wp_rec_start_date DATE,wp_rec_end_date DATE,wp_creation_date_sk INT,wp_access_date_sk INT,wp_autogen_flag CHAR(1),wp_customer_sk INT,wp_url CHAR(18),wp_type VARCHAR(9),wp_char_count INT,wp_link_count INT,wp_image_count INT,wp_max_ad_count INT) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/web_page/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'web_returns_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.web_returns_ext; CREATE EXTERNAL TABLE stagingTPCDS.web_returns_ext (wr_returned_date_sk INT,wr_returned_time_sk INT,wr_item_sk INT,wr_refunded_customer_sk INT,wr_refunded_cdemo_sk INT,wr_refunded_hdemo_sk INT,wr_refunded_addr_sk INT,wr_returning_customer_sk INT,wr_returning_cdemo_sk INT,wr_returning_hdemo_sk INT,wr_returning_addr_sk INT,wr_web_page_sk INT,wr_reason_sk INT,wr_order_number BIGINT,wr_return_quantity INT,wr_return_amt NUMERIC(7,2),wr_return_tax NUMERIC(7,2),wr_return_amt_inc_tax NUMERIC(7,2),wr_fee NUMERIC(7,2),wr_return_ship_cost NUMERIC(7,2),wr_refunded_cash NUMERIC(7,2),wr_reversed_charge NUMERIC(7,2),wr_account_credit NUMERIC(7,2),wr_net_loss NUMERIC(7,2)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/web_returns/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'web_sales_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.web_sales_ext; CREATE EXTERNAL TABLE stagingTPCDS.web_sales_ext (ws_sold_date_sk INT,ws_sold_time_sk INT,ws_ship_date_sk INT,ws_item_sk INT,ws_bill_customer_sk INT,ws_bill_cdemo_sk INT,ws_bill_hdemo_sk INT,ws_bill_addr_sk INT,ws_ship_customer_sk INT,ws_ship_cdemo_sk INT,ws_ship_hdemo_sk INT,ws_ship_addr_sk INT,ws_web_page_sk INT,ws_web_site_sk INT,ws_ship_mode_sk INT,ws_warehouse_sk INT,ws_promo_sk INT,ws_order_number BIGINT,ws_quantity INT,ws_wholesale_cost NUMERIC(7,2),ws_list_price NUMERIC(7,2),ws_sales_price NUMERIC(7,2),ws_ext_discount_amt NUMERIC(7,2),ws_ext_sales_price NUMERIC(7,2),ws_ext_wholesale_cost NUMERIC(7,2),ws_ext_list_price NUMERIC(7,2),ws_ext_tax NUMERIC(7,2),ws_coupon_amt NUMERIC(7,2),ws_ext_ship_cost NUMERIC(7,2),ws_net_paid NUMERIC(7,2),ws_net_paid_inc_tax NUMERIC(7,2),ws_net_paid_inc_ship NUMERIC(7,2),ws_net_paid_inc_ship_tax NUMERIC(7,2),ws_net_profit NUMERIC(7,2)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/web_sales/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nEXECUTE AS user = 'Userstaticrc10'; IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE [name] = 'SynapseParquetFormat') CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET);IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE [name] = 'ds_tpcdsacct_rawdata') CREATE EXTERNAL DATA SOURCE [ds_tpcdsacct_rawdata] WITH (LOCATION   = 'abfss://tpcds@dataairawdls.dfs.core.windows.net',CREDENTIAL = AzureStorageCredential_MSI,TYPE = HADOOP);IF NOT EXISTS(SELECT 1 FROM sys.schemas WHERE [name] = 'stagingTPCDS') EXEC('CREATE SCHEMA stagingTPCDS'); IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'stagingTPCDS' AND [name] = 'web_site_ext' AND is_external = 1) DROP EXTERNAL TABLE stagingTPCDS.web_site_ext; CREATE EXTERNAL TABLE stagingTPCDS.web_site_ext (web_site_sk INT,web_site_id CHAR(16),web_rec_start_date DATE,web_rec_end_date DATE,web_name CHAR(6),web_open_date_sk INT,web_close_date_sk INT,web_class CHAR(7),web_manager VARCHAR(20),web_mkt_id INT,web_mkt_class VARCHAR(50),web_mkt_desc VARCHAR(96),web_market_manager VARCHAR(18),web_company_id INT,web_company_name VARCHAR(5),web_street_number VARCHAR(3),web_street_name VARCHAR(17),web_street_type VARCHAR(9),web_suite_number VARCHAR(9),web_city VARCHAR(15),web_county VARCHAR(22),web_state CHAR(2),web_zip CHAR(5),web_country CHAR(13),web_gmt_offset NUMERIC(5,2),web_tax_percentage NUMERIC(5,2)) WITH ( LOCATION = '/raw/tpc-ds/source_files_001GB_parquet/web_site/', DATA_SOURCE = [ds_tpcdsacct_rawdata], FILE_FORMAT = [SynapseParquetFormat]);\nSELECT 1 AS a",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "tpcdssmidw",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": "dataaisynapsewks.sql.azuresynapse.net",
									"DatabaseName": {
										"value": "@pipeline().parameters.DatabaseName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Build Replicated Tables",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach - Create Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "SELECT *\nFROM\n(\n\tSELECT\t\tCASE WHEN tp.[distribution_policy_desc] = 'REPLICATE' THEN CONCAT('EXECUTE AS USER = ''Userstaticrc10''; SELECT TOP 1 * FROM [', s.name, '].[', t.name, ']; SELECT 1 AS a') ELSE NULL END AS SqlQuery\n\tFROM\t\tsys.schemas s\n\tJOIN\t\tsys.tables t\n\tON\t\t\ts.[schema_id] = t.[schema_id]\n\tJOIN\t\tsys.indexes i\n\tON\t\t\tt.[object_id] = i.[object_id]\n\tAND\t\t\ti.[index_id] <= 1\n\tJOIN\t\tsys.pdw_table_distribution_properties tp\n\tON\t\t\tt.[object_id] = tp.[object_id]\n) AS a\nWHERE SqlQuery IS NOT NULL\n;",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "tpcdssmidw",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": "dataaisynapsewks.sql.azuresynapse.net",
									"DatabaseName": {
										"value": "@pipeline().parameters.DatabaseName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach - Table To Build",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Build Replicated Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Build Replicated Tables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": {
												"value": "@item().SqlQuery",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "tpcdssmidw",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": "dataaisynapsewks.sql.azuresynapse.net",
												"DatabaseName": {
													"value": "@pipeline().parameters.DatabaseName",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "ForEach - Create Tables - Store Sales",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter - store_sales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter - store_sales').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "Lookup - Load From External Table_Store Sales",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": {
												"value": "@concat(json(item()).SqlStatement, ';SELECT 1 as a')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "tpcdssmidw",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": "dataaisynapsewks.sql.azuresynapse.net",
												"DatabaseName": {
													"value": "@pipeline().parameters.DatabaseName",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "Wait - 5 seconds",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Filter - All Except store_sales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "Filter - store_sales",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup - Create External Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@split(variables('JsonStringTables'), '||')",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(json(item()).TableName, 'store_sales')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter - All Except store_sales",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup - Create External Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@split(variables('JsonStringTables'), '||')",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(json(item()).TableName, 'store_sales'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DatabaseName": {
						"type": "string",
						"defaultValue": "dataaitpcdw"
					}
				},
				"variables": {
					"JsonStringTables": {
						"type": "String",
						"defaultValue": "{\"TableName\":\"call_center\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'call_center' AND is_external = 0) DROP TABLE [TPCDS].[call_center]; CREATE TABLE [TPCDS].[call_center] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (cc_call_center_sk)) AS SELECT * FROM [stagingTPCDS].[call_center_ext];\"}   ||{\"TableName\":\"catalog_page\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'catalog_page' AND is_external = 0) DROP TABLE [TPCDS].[catalog_page]; CREATE TABLE [TPCDS].[catalog_page] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (cp_catalog_page_sk)) AS SELECT * FROM [stagingTPCDS].[catalog_page_ext];\"}   ||{\"TableName\":\"catalog_returns\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'catalog_returns' AND is_external = 0) DROP TABLE [TPCDS].[catalog_returns]; CREATE TABLE [TPCDS].[catalog_returns] WITH ( DISTRIBUTION  = HASH(cr_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[catalog_returns_ext];\"}   ||{\"TableName\":\"catalog_sales\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'catalog_sales' AND is_external = 0) DROP TABLE [TPCDS].[catalog_sales]; CREATE TABLE [TPCDS].[catalog_sales] WITH ( DISTRIBUTION  = HASH(cs_item_sk), CLUSTERED COLUMNSTORE INDEX ORDER (cs_sold_date_sk)) AS SELECT * FROM [stagingTPCDS].[catalog_sales_ext];\"}   ||{\"TableName\":\"customer\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'customer' AND is_external = 0) DROP TABLE [TPCDS].[customer]; CREATE TABLE [TPCDS].[customer] WITH ( DISTRIBUTION  = ROUND_ROBIN, CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[customer_ext];\"}   ||{\"TableName\":\"customer_address\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'customer_address' AND is_external = 0) DROP TABLE [TPCDS].[customer_address]; CREATE TABLE [TPCDS].[customer_address] WITH ( DISTRIBUTION  = ROUND_ROBIN, CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[customer_address_ext];\"}   ||{\"TableName\":\"customer_demographics\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'customer_demographics' AND is_external = 0) DROP TABLE [TPCDS].[customer_demographics]; CREATE TABLE [TPCDS].[customer_demographics] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[customer_demographics_ext];\"}   ||{\"TableName\":\"date_dim\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'date_dim' AND is_external = 0) DROP TABLE [TPCDS].[date_dim]; CREATE TABLE [TPCDS].[date_dim] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[date_dim_ext];\"}   ||{\"TableName\":\"household_demographics\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'household_demographics' AND is_external = 0) DROP TABLE [TPCDS].[household_demographics]; CREATE TABLE [TPCDS].[household_demographics] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[household_demographics_ext];\"}   ||{\"TableName\":\"income_band\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'income_band' AND is_external = 0) DROP TABLE [TPCDS].[income_band]; CREATE TABLE [TPCDS].[income_band] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (ib_income_band_sk)) AS SELECT * FROM [stagingTPCDS].[income_band_ext];\"}   ||{\"TableName\":\"inventory\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'inventory' AND is_external = 0) DROP TABLE [TPCDS].[inventory]; CREATE TABLE [TPCDS].[inventory] WITH ( DISTRIBUTION  = HASH(inv_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[inventory_ext];\"}   ||{\"TableName\":\"item\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'item' AND is_external = 0) DROP TABLE [TPCDS].[item]; CREATE TABLE [TPCDS].[item] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[item_ext];\"}   ||{\"TableName\":\"promotion\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'promotion' AND is_external = 0) DROP TABLE [TPCDS].[promotion]; CREATE TABLE [TPCDS].[promotion] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[promotion_ext];\"}   ||{\"TableName\":\"reason\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'reason' AND is_external = 0) DROP TABLE [TPCDS].[reason]; CREATE TABLE [TPCDS].[reason] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (r_reason_sk)) AS SELECT * FROM [stagingTPCDS].[reason_ext];\"}   ||{\"TableName\":\"ship_mode\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'ship_mode' AND is_external = 0) DROP TABLE [TPCDS].[ship_mode]; CREATE TABLE [TPCDS].[ship_mode] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (sm_ship_mode_sk)) AS SELECT * FROM [stagingTPCDS].[ship_mode_ext];\"}   ||{\"TableName\":\"store\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'store' AND is_external = 0) DROP TABLE [TPCDS].[store]; CREATE TABLE [TPCDS].[store] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (s_store_sk)) AS SELECT * FROM [stagingTPCDS].[store_ext];\"}   ||{\"TableName\":\"store_returns\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'store_returns' AND is_external = 0) DROP TABLE [TPCDS].[store_returns]; CREATE TABLE [TPCDS].[store_returns] WITH ( DISTRIBUTION  = HASH(sr_item_sk), CLUSTERED COLUMNSTORE INDEX ORDER (sr_returned_date_sk)) AS SELECT * FROM [stagingTPCDS].[store_returns_ext];\"}   ||{\"TableName\":\"store_sales\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc50';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'store_sales' AND is_external = 0) DROP TABLE [TPCDS].[store_sales]; CREATE TABLE [TPCDS].[store_sales] WITH ( DISTRIBUTION  = HASH(ss_item_sk), CLUSTERED COLUMNSTORE INDEX ORDER (ss_sold_date_sk)) AS SELECT * FROM [stagingTPCDS].[store_sales_ext];\"}   ||{\"TableName\":\"time_dim\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'time_dim' AND is_external = 0) DROP TABLE [TPCDS].[time_dim]; CREATE TABLE [TPCDS].[time_dim] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[time_dim_ext];\"}   ||{\"TableName\":\"warehouse\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'warehouse' AND is_external = 0) DROP TABLE [TPCDS].[warehouse]; CREATE TABLE [TPCDS].[warehouse] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (w_warehouse_sk)) AS SELECT * FROM [stagingTPCDS].[warehouse_ext];\"}   ||{\"TableName\":\"web_page\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_page' AND is_external = 0) DROP TABLE [TPCDS].[web_page]; CREATE TABLE [TPCDS].[web_page] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[web_page_ext];\"}   ||{\"TableName\":\"web_returns\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_returns' AND is_external = 0) DROP TABLE [TPCDS].[web_returns]; CREATE TABLE [TPCDS].[web_returns] WITH ( DISTRIBUTION  = HASH(wr_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[web_returns_ext];\"}   ||{\"TableName\":\"web_sales\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_sales' AND is_external = 0) DROP TABLE [TPCDS].[web_sales]; CREATE TABLE [TPCDS].[web_sales] WITH ( DISTRIBUTION  = HASH(ws_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[web_sales_ext];\"}   ||{\"TableName\":\"web_site\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_site' AND is_external = 0) DROP TABLE [TPCDS].[web_site]; CREATE TABLE [TPCDS].[web_site] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (web_site_sk)) AS SELECT * FROM [stagingTPCDS].[web_site_ext];\"}"
					},
					"JsonStringTablesNEW": {
						"type": "String",
						"defaultValue": "{\"TableName\":\"call_center\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'call_center' AND is_external = 0) DROP TABLE [TPCDS].[call_center]; CREATE TABLE [TPCDS].[call_center] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (cc_call_center_sk)) AS SELECT * FROM [stagingTPCDS].[call_center_ext];\"}   ||{\"TableName\":\"catalog_page\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'catalog_page' AND is_external = 0) DROP TABLE [TPCDS].[catalog_page]; CREATE TABLE [TPCDS].[catalog_page] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (cp_catalog_page_sk)) AS SELECT * FROM [stagingTPCDS].[catalog_page_ext];\"}   ||{\"TableName\":\"catalog_returns\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'catalog_returns' AND is_external = 0) DROP TABLE [TPCDS].[catalog_returns]; CREATE TABLE [TPCDS].[catalog_returns] WITH ( DISTRIBUTION  = HASH(cr_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[catalog_returns_ext];\"}   ||{\"TableName\":\"catalog_sales\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'catalog_sales' AND is_external = 0) DROP TABLE [TPCDS].[catalog_sales]; CREATE TABLE [TPCDS].[catalog_sales] WITH ( DISTRIBUTION  = HASH(cs_item_sk), CLUSTERED COLUMNSTORE INDEX ORDER (cs_sold_date_sk)) AS SELECT * FROM [stagingTPCDS].[catalog_sales_ext];\"}   ||{\"TableName\":\"customer\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'customer' AND is_external = 0) DROP TABLE [TPCDS].[customer]; CREATE TABLE [TPCDS].[customer] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (c_customer_sk)) AS SELECT * FROM [stagingTPCDS].[customer_ext];\"}   ||{\"TableName\":\"customer_address\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'customer_address' AND is_external = 0) DROP TABLE [TPCDS].[customer_address]; CREATE TABLE [TPCDS].[customer_address] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (ca_address_sk)) AS SELECT * FROM [stagingTPCDS].[customer_address_ext];\"}   ||{\"TableName\":\"customer_demographics\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'customer_demographics' AND is_external = 0) DROP TABLE [TPCDS].[customer_demographics]; CREATE TABLE [TPCDS].[customer_demographics] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (cd_demo_sk)) AS SELECT * FROM [stagingTPCDS].[customer_demographics_ext];\"}   ||{\"TableName\":\"date_dim\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'date_dim' AND is_external = 0) DROP TABLE [TPCDS].[date_dim]; CREATE TABLE [TPCDS].[date_dim] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (d_date_sk)) AS SELECT * FROM [stagingTPCDS].[date_dim_ext];\"}   ||{\"TableName\":\"household_demographics\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'household_demographics' AND is_external = 0) DROP TABLE [TPCDS].[household_demographics]; CREATE TABLE [TPCDS].[household_demographics] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (hd_demo_sk)) AS SELECT * FROM [stagingTPCDS].[household_demographics_ext];\"}   ||{\"TableName\":\"income_band\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'income_band' AND is_external = 0) DROP TABLE [TPCDS].[income_band]; CREATE TABLE [TPCDS].[income_band] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (ib_income_band_sk)) AS SELECT * FROM [stagingTPCDS].[income_band_ext];\"}   ||{\"TableName\":\"inventory\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'inventory' AND is_external = 0) DROP TABLE [TPCDS].[inventory]; CREATE TABLE [TPCDS].[inventory] WITH ( DISTRIBUTION  = HASH(inv_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[inventory_ext];\"}   ||{\"TableName\":\"item\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'item' AND is_external = 0) DROP TABLE [TPCDS].[item]; CREATE TABLE [TPCDS].[item] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (i_item_sk)) AS SELECT * FROM [stagingTPCDS].[item_ext];\"}   ||{\"TableName\":\"promotion\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'promotion' AND is_external = 0) DROP TABLE [TPCDS].[promotion]; CREATE TABLE [TPCDS].[promotion] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (p_promo_sk)) AS SELECT * FROM [stagingTPCDS].[promotion_ext];\"}   ||{\"TableName\":\"reason\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'reason' AND is_external = 0) DROP TABLE [TPCDS].[reason]; CREATE TABLE [TPCDS].[reason] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (r_reason_sk)) AS SELECT * FROM [stagingTPCDS].[reason_ext];\"}   ||{\"TableName\":\"ship_mode\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'ship_mode' AND is_external = 0) DROP TABLE [TPCDS].[ship_mode]; CREATE TABLE [TPCDS].[ship_mode] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (sm_ship_mode_sk)) AS SELECT * FROM [stagingTPCDS].[ship_mode_ext];\"}   ||{\"TableName\":\"store\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'store' AND is_external = 0) DROP TABLE [TPCDS].[store]; CREATE TABLE [TPCDS].[store] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (s_store_sk)) AS SELECT * FROM [stagingTPCDS].[store_ext];\"}   ||{\"TableName\":\"store_returns\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'store_returns' AND is_external = 0) DROP TABLE [TPCDS].[store_returns]; CREATE TABLE [TPCDS].[store_returns] WITH ( DISTRIBUTION  = HASH(sr_item_sk), CLUSTERED COLUMNSTORE INDEX ORDER (sr_returned_date_sk)) AS SELECT * FROM [stagingTPCDS].[store_returns_ext];\"}   ||{\"TableName\":\"store_sales\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc50';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'store_sales' AND is_external = 0) DROP TABLE [TPCDS].[store_sales]; CREATE TABLE [TPCDS].[store_sales] WITH ( DISTRIBUTION  = HASH(ss_item_sk), CLUSTERED COLUMNSTORE INDEX ORDER (ss_sold_date_sk)) AS SELECT * FROM [stagingTPCDS].[store_sales_ext];\"}   ||{\"TableName\":\"time_dim\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'time_dim' AND is_external = 0) DROP TABLE [TPCDS].[time_dim]; CREATE TABLE [TPCDS].[time_dim] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (t_time_sk)) AS SELECT * FROM [stagingTPCDS].[time_dim_ext];\"}   ||{\"TableName\":\"warehouse\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'warehouse' AND is_external = 0) DROP TABLE [TPCDS].[warehouse]; CREATE TABLE [TPCDS].[warehouse] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (w_warehouse_sk)) AS SELECT * FROM [stagingTPCDS].[warehouse_ext];\"}   ||{\"TableName\":\"web_page\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_page' AND is_external = 0) DROP TABLE [TPCDS].[web_page]; CREATE TABLE [TPCDS].[web_page] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (wp_web_page_sk)) AS SELECT * FROM [stagingTPCDS].[web_page_ext];\"}   ||{\"TableName\":\"web_returns\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_returns' AND is_external = 0) DROP TABLE [TPCDS].[web_returns]; CREATE TABLE [TPCDS].[web_returns] WITH ( DISTRIBUTION  = HASH(wr_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[web_returns_ext];\"}   ||{\"TableName\":\"web_sales\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_sales' AND is_external = 0) DROP TABLE [TPCDS].[web_sales]; CREATE TABLE [TPCDS].[web_sales] WITH ( DISTRIBUTION  = HASH(ws_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[web_sales_ext];\"}   ||{\"TableName\":\"web_site\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_site' AND is_external = 0) DROP TABLE [TPCDS].[web_site]; CREATE TABLE [TPCDS].[web_site] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (web_site_sk)) AS SELECT * FROM [stagingTPCDS].[web_site_ext];\"}"
					},
					"JsonStringTablesNEWAGAIN": {
						"type": "String",
						"defaultValue": "{\"TableName\":\"call_center\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'call_center' AND is_external = 0) DROP TABLE [TPCDS].[call_center]; CREATE TABLE [TPCDS].[call_center] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[call_center_ext];\"}    ||{\"TableName\":\"catalog_page\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'catalog_page' AND is_external = 0) DROP TABLE [TPCDS].[catalog_page]; CREATE TABLE [TPCDS].[catalog_page] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (cp_catalog_page_sk)) AS SELECT * FROM [stagingTPCDS].[catalog_page_ext];\"}    ||{\"TableName\":\"catalog_returns\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'catalog_returns' AND is_external = 0) DROP TABLE [TPCDS].[catalog_returns]; CREATE TABLE [TPCDS].[catalog_returns] WITH ( DISTRIBUTION  = HASH(cr_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[catalog_returns_ext];\"}    ||{\"TableName\":\"catalog_sales\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'catalog_sales' AND is_external = 0) DROP TABLE [TPCDS].[catalog_sales]; CREATE TABLE [TPCDS].[catalog_sales] WITH ( DISTRIBUTION  = HASH(cs_item_sk), CLUSTERED COLUMNSTORE INDEX ORDER (cs_sold_date_sk)) AS SELECT * FROM [stagingTPCDS].[catalog_sales_ext];\"}    ||{\"TableName\":\"customer\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'customer' AND is_external = 0) DROP TABLE [TPCDS].[customer]; CREATE TABLE [TPCDS].[customer] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[customer_ext];\"}    ||{\"TableName\":\"customer_address\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'customer_address' AND is_external = 0) DROP TABLE [TPCDS].[customer_address]; CREATE TABLE [TPCDS].[customer_address] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[customer_address_ext];\"}    ||{\"TableName\":\"customer_demographics\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'customer_demographics' AND is_external = 0) DROP TABLE [TPCDS].[customer_demographics]; CREATE TABLE [TPCDS].[customer_demographics] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (cd_demo_sk)) AS SELECT * FROM [stagingTPCDS].[customer_demographics_ext];\"}    ||{\"TableName\":\"date_dim\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'date_dim' AND is_external = 0) DROP TABLE [TPCDS].[date_dim]; CREATE TABLE [TPCDS].[date_dim] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (d_date_sk)) AS SELECT * FROM [stagingTPCDS].[date_dim_ext];\"}    ||{\"TableName\":\"household_demographics\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'household_demographics' AND is_external = 0) DROP TABLE [TPCDS].[household_demographics]; CREATE TABLE [TPCDS].[household_demographics] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[household_demographics_ext];\"}    ||{\"TableName\":\"income_band\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'income_band' AND is_external = 0) DROP TABLE [TPCDS].[income_band]; CREATE TABLE [TPCDS].[income_band] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[income_band_ext];\"}    ||{\"TableName\":\"inventory\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'inventory' AND is_external = 0) DROP TABLE [TPCDS].[inventory]; CREATE TABLE [TPCDS].[inventory] WITH ( DISTRIBUTION  = HASH(inv_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[inventory_ext];\"}    ||{\"TableName\":\"item\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'item' AND is_external = 0) DROP TABLE [TPCDS].[item]; CREATE TABLE [TPCDS].[item] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (i_item_sk)) AS SELECT * FROM [stagingTPCDS].[item_ext];\"}    ||{\"TableName\":\"promotion\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'promotion' AND is_external = 0) DROP TABLE [TPCDS].[promotion]; CREATE TABLE [TPCDS].[promotion] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[promotion_ext];\"}    ||{\"TableName\":\"reason\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'reason' AND is_external = 0) DROP TABLE [TPCDS].[reason]; CREATE TABLE [TPCDS].[reason] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[reason_ext];\"}    ||{\"TableName\":\"ship_mode\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'ship_mode' AND is_external = 0) DROP TABLE [TPCDS].[ship_mode]; CREATE TABLE [TPCDS].[ship_mode] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[ship_mode_ext];\"}    ||{\"TableName\":\"store\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'store' AND is_external = 0) DROP TABLE [TPCDS].[store]; CREATE TABLE [TPCDS].[store] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[store_ext];\"}    ||{\"TableName\":\"store_returns\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'store_returns' AND is_external = 0) DROP TABLE [TPCDS].[store_returns]; CREATE TABLE [TPCDS].[store_returns] WITH ( DISTRIBUTION  = HASH(sr_item_sk), CLUSTERED COLUMNSTORE INDEX ORDER (sr_returned_date_sk)) AS SELECT * FROM [stagingTPCDS].[store_returns_ext];\"}    ||{\"TableName\":\"store_sales\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc50';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'store_sales' AND is_external = 0) DROP TABLE [TPCDS].[store_sales]; CREATE TABLE [TPCDS].[store_sales] WITH ( DISTRIBUTION  = HASH(ss_item_sk), CLUSTERED COLUMNSTORE INDEX ORDER (ss_sold_date_sk)) AS SELECT * FROM [stagingTPCDS].[store_sales_ext];\"}    ||{\"TableName\":\"time_dim\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'time_dim' AND is_external = 0) DROP TABLE [TPCDS].[time_dim]; CREATE TABLE [TPCDS].[time_dim] WITH ( DISTRIBUTION  = REPLICATE, CLUSTERED INDEX (t_time_sk)) AS SELECT * FROM [stagingTPCDS].[time_dim_ext];\"}    ||{\"TableName\":\"warehouse\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'warehouse' AND is_external = 0) DROP TABLE [TPCDS].[warehouse]; CREATE TABLE [TPCDS].[warehouse] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[warehouse_ext];\"}    ||{\"TableName\":\"web_page\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_page' AND is_external = 0) DROP TABLE [TPCDS].[web_page]; CREATE TABLE [TPCDS].[web_page] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[web_page_ext];\"}    ||{\"TableName\":\"web_returns\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_returns' AND is_external = 0) DROP TABLE [TPCDS].[web_returns]; CREATE TABLE [TPCDS].[web_returns] WITH ( DISTRIBUTION  = HASH(wr_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[web_returns_ext];\"}    ||{\"TableName\":\"web_sales\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc40';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_sales' AND is_external = 0) DROP TABLE [TPCDS].[web_sales]; CREATE TABLE [TPCDS].[web_sales] WITH ( DISTRIBUTION  = HASH(ws_item_sk), CLUSTERED COLUMNSTORE INDEX) AS SELECT * FROM [stagingTPCDS].[web_sales_ext];\"}    ||{\"TableName\":\"web_site\", \"SqlStatement\":\"EXECUTE AS USER = 'Userstaticrc10';IF EXISTS(SELECT 1 FROM sys.tables WHERE SCHEMA_NAME(schema_id) = 'TPCDS' AND [name] = 'web_site' AND is_external = 0) DROP TABLE [TPCDS].[web_site]; CREATE TABLE [TPCDS].[web_site] WITH ( DISTRIBUTION  = REPLICATE, HEAP) AS SELECT * FROM [stagingTPCDS].[web_site_ext];\"}"
					}
				},
				"folder": {
					"name": "TpcBenchmark"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-11T21:33:45Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/tpcdssmidw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_write campaign analytics to asa')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Make sure to execute 2_otherdata scripts",
				"activities": [
					{
						"name": "campaign_analytics_data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "2_asa_writecampaignanalyticstoasa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CampaignAnalytics": {},
									"CampaignAnalyticsASA": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "dataaiir",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "WideWorldImport/02_other data"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-30T02:00:49Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/2_asa_writecampaignanalyticstoasa')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_GreenTaxiStagingToRaw')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Cleanup Directories",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "LoadGreenTaxiFromStagingToRaw",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cleanup Directories",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "1_nycstagingtorawgreentaxidf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingGreenTaxi2014Non01041112": {},
									"StagingGreenTaxi2015Non11": {},
									"StagingGreenTaxi201511": {},
									"StagingGreenTaxi201601": {},
									"StagingGreenTaxi201602To11": {},
									"StagingGreenTaxi201612": {},
									"StagingGreenTaxi2018201401And04": {},
									"StagingGreenTaxi2017010207080911": {},
									"StagingGreenTaxi2017030405061012": {},
									"StagingGreenTaxi201802030506": {},
									"StagingGreenTaxi2018Q3": {},
									"StagingGreenTaxi2018Q4": {},
									"StagingGreenTaxi201901To08": {},
									"StagingGreenTaxi2019Q4AndOnwards": {},
									"PersistGreenTaxi2014Non01041112": {},
									"PersistGreenTaxi2015Non11": {},
									"PersistGreenTaxi201511": {},
									"PersistGreenTaxi201601": {},
									"PersistGreenTaxi201602To11": {},
									"PersistGreenTaxi201612": {},
									"PersistGreenTaxi2018201401And04": {},
									"PersistGreenTaxi2017010207080911": {},
									"PersistGreenTaxi2017030405061012": {},
									"PersistGreenTaxi201802030506": {},
									"PersistGreenTaxi2018Q3": {},
									"PersistGreenTaxi2018Q4": {},
									"PersistGreenTaxi201901To08": {},
									"PersistGreenTaxi2019Q4AndOnwards": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete success files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "LoadGreenTaxiFromStagingToRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_SUCCESS*",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete started Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete success files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_started*",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete committed Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete started Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_committed*",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-24T15:07:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxirawgreends')]",
				"[concat(variables('workspaceId'), '/dataflows/1_nycstagingtorawgreentaxidf')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_ReferenceStagingToRaw')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Load Reference Data to Raw",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cleanup Directories",
								"dependencyConditions": [
									"Failed",
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "1_nycstagingtorawreferencedf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingPaymentType": {},
									"StagingTaxiZone": {},
									"StagingTripMonth": {},
									"StagingTripType": {},
									"StagingVendor": {},
									"StagingRateCode": {},
									"RawPaymentType": {},
									"RawRateCode": {},
									"RawTaxiZone": {},
									"RawTripMonth": {},
									"RawTripType": {},
									"RawVendor": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cleanup Directories",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nycrawreference",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Delete committed Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Load Reference Data to Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nycrawreference",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_committed*"
							}
						}
					},
					{
						"name": "Delete started Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete committed Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nycrawreference",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_started*"
							}
						}
					},
					{
						"name": "Delete success files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete started Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nycrawreference",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_SUCCESS*"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-24T01:53:57Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/1_nycstagingtorawreferencedf')]",
				"[concat(variables('workspaceId'), '/datasets/1_nycrawreference')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_YellowTaxiStagingToRaw')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Cleanup Directories",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "LoadYellowTaxiFromStagingToRaw",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cleanup Directories",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "1_nycstagingtorawyellotaxidf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingYellowTaxi2009": {},
									"StagingYellowTaxi2010Non0203": {},
									"StagingYellowTaxi20100203": {},
									"StagingYellowTaxi20110103": {},
									"StagingYellowTaxi2011Non0103": {},
									"StagingYellowTaxi2012Non12": {},
									"StagingYellowTaxi201212": {},
									"StagingYellowTaxi2013Non05": {},
									"StagingYellowTaxi201305": {},
									"StagingYellowTaxi201401": {},
									"StagingYellowTaxi2014Non0108": {},
									"StagingYellowTaxi201408": {},
									"StagingYellowTaxi2015": {},
									"StagingYellowTaxi2016": {},
									"StagingYellowTaxi2017": {},
									"StagingYellowTaxi201801": {},
									"StagingYellowTaxi201802To05": {},
									"StagingYellowTaxi201806": {},
									"StagingYellowTaxi201807081012": {},
									"StagingYellowTaxi20180911": {},
									"StagingYellowTaxi2019": {},
									"StagingYellowTaxi202001To07And10": {},
									"StagingYellowTaxi202008091112": {},
									"StagingYellowTaxi2021And2022": {},
									"PersistYellowTaxi2009": {},
									"PersistYellowTaxi2010Non0203": {},
									"PersistYellowTaxi20100203": {},
									"PersistYellowTaxi20110103": {},
									"PersistYellowTaxi2011Non0103": {},
									"PersistYellowTaxi2012Non12": {},
									"PersistYellowTaxi201212": {},
									"PersistYellowTaxi2013Non05": {},
									"PersistYellowTaxi201305": {},
									"PersistYellowTaxi201401": {},
									"PersistYellowTaxi2014Non0108": {},
									"PersistYellowTaxi201408": {},
									"PersistYellowTaxi2015": {},
									"PersistYellowTaxi2016": {},
									"PersistYellowTaxi2017": {},
									"PersistYellowTaxi201801": {},
									"PersistYellowTaxi201802To06": {},
									"PersistYellowTaxi201807081012": {},
									"PersistYellowTaxi20180911": {},
									"PersistYellowTaxi2019": {},
									"PersistYellowTaxi202001To07And10": {},
									"PersistYellowTaxi202008091112": {},
									"PersistYellowTaxi2021And2022": {},
									"PersistYellowTaxi201806": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete success files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "LoadYellowTaxiFromStagingToRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_SUCCESS*",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete started Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete success files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_started*",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete committed Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete started Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_committed*",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-24T18:32:40Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxirawyellowds')]",
				"[concat(variables('workspaceId'), '/dataflows/1_nycstagingtorawyellotaxidf')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_business analyst queries')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Analyst",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,10)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 2 for Data Analyst",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "0_wwi02_salesmall_workload02",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "WideWorldImport/3_Monitoring"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_salesmall_workload02')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_load sqlpool')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Process years",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Years",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Sale Small Year",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@concat('sale-small/Year=',item(), '/*')",
													"type": "Expression"
												},
												"wildcardFileName": "*.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"allowPolyBase": true,
											"polyBaseSettings": {
												"rejectValue": 0,
												"rejectType": "value",
												"useTypeDefault": true
											},
											"disableMetricsCollection": false
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "dataairawdls",
												"type": "LinkedServiceReference"
											},
											"path": "wwi-02/staging"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "TransactionId",
														"type": "String"
													},
													"sink": {
														"name": "TransactionId",
														"type": "Guid"
													}
												},
												{
													"source": {
														"name": "CustomerId",
														"type": "Int32"
													},
													"sink": {
														"name": "CustomerId",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "ProductId",
														"type": "Int16"
													},
													"sink": {
														"name": "ProductId",
														"type": "Int16"
													}
												},
												{
													"source": {
														"name": "Quantity",
														"type": "SByte"
													},
													"sink": {
														"name": "Quantity",
														"type": "Byte"
													}
												},
												{
													"source": {
														"name": "Price",
														"type": "Decimal"
													},
													"sink": {
														"name": "Price",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "TotalAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "TotalAmount",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "TransactionDate",
														"type": "Int32"
													},
													"sink": {
														"name": "TransactionDateId",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "ProfitAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "ProfitAmount",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "Hour",
														"type": "SByte"
													},
													"sink": {
														"name": "Hour",
														"type": "Byte"
													}
												},
												{
													"source": {
														"name": "Minute",
														"type": "SByte"
													},
													"sink": {
														"name": "Minute",
														"type": "Byte"
													}
												},
												{
													"source": {
														"name": "StoreId",
														"type": "Int16"
													},
													"sink": {
														"name": "StoreId",
														"type": "Int16"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "0_wwi02_sale_small_adls",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "0_wwi02_sale_small_asa",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Copy Product",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "truncate table wwi.Product",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "dataairawdls",
									"type": "LinkedServiceReference"
								},
								"path": "wwi-02/staging"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "ProductId",
											"type": "Int16"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "Seasonality",
											"type": "Byte"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "Price",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "Profit",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "0_wwi02_product_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "0_wwi02_product_asa",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Date",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "truncate table wwi.Date",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "dataairawdls",
									"type": "LinkedServiceReference"
								},
								"path": "wwi-02/staging"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "DateId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "Day",
											"type": "Byte"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "Month",
											"type": "Byte"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "Quarter",
											"type": "Byte"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "Year",
											"type": "Int16"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "0_wwi02_date_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "0_wwi02_date_asa",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Years": {
						"type": "array",
						"defaultValue": [
							2014,
							2015,
							2016,
							2017,
							2018,
							2019
						]
					}
				},
				"folder": {
					"name": "WideWorldImport/00_setup"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-30T01:58:47Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_product_adls')]",
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_product_asa')]",
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_date_adls')]",
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_date_asa')]",
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]",
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_sale_small_adls')]",
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_sale_small_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_userprofile data to asa')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Make sure to execute 2_otherdata scripts",
				"activities": [
					{
						"name": "user_profile_data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "2_asal_writeuserprofiledatatoasa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EcommerceUserProfiles": {},
									"UserProfiles": {},
									"UserTopProductPurchasesASA": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "dataairawdls",
									"type": "LinkedServiceReference"
								},
								"folderPath": "wwi-02/staginguserprofiles"
							},
							"integrationRuntime": {
								"referenceName": "dataaiir",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "WideWorldImport/02_other data"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-30T02:00:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/2_asal_writeuserprofiledatatoasa')]",
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_GreenTaxiRawToCurated')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "2_GreenTaxiRawToCurated",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cleanup Directories",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "2_nycrawtocuratedgreentaxidf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawGreenTaxi": {},
									"RawPaymentType": {},
									"RawRateCode": {},
									"RawTaxiZone": {},
									"RawVendor": {},
									"RawTripType": {},
									"RawTripMonth": {},
									"SinkToCuratedZone": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cleanup Directories",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "2_nyccuratedgreentaxi",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Delete committed Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete success files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "2_nyccuratedgreentaxi",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_committed*"
							}
						}
					},
					{
						"name": "Delete started Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "2_GreenTaxiRawToCurated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "2_nyccuratedgreentaxi",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_started*"
							}
						}
					},
					{
						"name": "Delete success files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete started Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "2_nyccuratedgreentaxi",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_SUCCESS*"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-25T18:39:43Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/2_nycrawtocuratedgreentaxidf')]",
				"[concat(variables('workspaceId'), '/datasets/2_nyccuratedgreentaxi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_YellowTaxiRawToCurated')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "2_YellowTaxiRawToCurated",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cleanup Directories",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "2_nycrawtocuratedyellowtaxidf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawYellowTaxi": {},
									"RawPaymentType": {},
									"RawRateCode": {},
									"RawTaxiZone": {},
									"RawVendor": {},
									"RawTripType": {},
									"RawTripMonth": {},
									"SinkToCuratedZone": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cleanup Directories",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "2_nyccuratedyellowtaxi",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Delete committed Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete success files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "2_nyccuratedyellowtaxi",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_committed*"
							}
						}
					},
					{
						"name": "Delete started Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "2_YellowTaxiRawToCurated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "2_nyccuratedyellowtaxi",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_started*"
							}
						}
					},
					{
						"name": "Delete success files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete started Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "2_nyccuratedyellowtaxi",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_SUCCESS*"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-28T02:18:07Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/2_nycrawtocuratedyellowtaxidf')]",
				"[concat(variables('workspaceId'), '/datasets/2_nyccuratedyellowtaxi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_load customerprofile')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Customer Profile Data to Cosmos DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "online-user-profiles-01",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "CosmosDbSqlApiSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "0_wwi02_online_user_profiles_01_adal",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "0_customer_profile_cosmosdb",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "WideWorldImport/00_setup"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-30T01:58:50Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/0_wwi02_online_user_profiles_01_adal')]",
				"[concat(variables('workspaceId'), '/datasets/0_customer_profile_cosmosdb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_CuratedToConsumption')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "3_CuratedToConsumptiondf",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cleanup Directories",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "3_nyccuratedtoconsumptiondf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"YellowTaxi": {},
									"GreenTaxi": {},
									"SinkToConsumption": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cleanup Directories",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "3_nycconsumption",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Delete committed Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete success files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "3_nycconsumption",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_committed*"
							}
						}
					},
					{
						"name": "Delete started Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "3_CuratedToConsumptiondf",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "3_nycconsumption",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_started*"
							}
						}
					},
					{
						"name": "Delete success files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete started Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "3_nycconsumption",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "_SUCCESS*"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "NycTaxi/3_CuratedToConsumption"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-28T15:28:51Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/3_nyccuratedtoconsumptiondf')]",
				"[concat(variables('workspaceId'), '/datasets/3_nycconsumption')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_customer_profile_cosmosdb')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaicosmosdb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/0_loading"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "OnlineUserProfile01"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaicosmosdb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_nycgreentaxidatads')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/0_SourceToStaging"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "greentaxi_lookup.csv",
						"folderPath": "nyctaxi-staging/reference-data",
						"fileSystem": "nyctaxi"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_nyctaxihttpsourceds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataainychttp",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/0_SourceToStaging"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@{variables('nycTaxiRelativeUrl')}",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataainychttp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_nyctaxirawdestinationds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/0_SourceToStaging"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{variables('nycTaxiRelativeUrl')}",
							"type": "Expression"
						},
						"folderPath": {
							"value": "nyctaxi-staging/transactional-data/type=@{variables('nycTaxiType')}/year=@{item().Year}/month=@{item().Month}/",
							"type": "Expression"
						},
						"fileSystem": "nyctaxi"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_nyctaxireferencedestds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/0_SourceToStaging"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/referencedata",
						"fileSystem": "nyctaxi"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_nyctaxireferencesourceds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaifile",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/0_SourceToStaging"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaifile')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_nycyellowtaxidatads')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/0_SourceToStaging"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "yellowtaxi_lookup.csv",
						"folderPath": "nyctaxi-staging/reference-data",
						"fileSystem": "nyctaxi"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_wwi02_date_adls')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/0_loading"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "generator-date.csv",
						"folderPath": "data-generators",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_wwi02_date_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaidw",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/0_loading"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "DateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Day",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Month",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Quarter",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Year",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "Date"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaidw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_wwi02_online_user_profiles_01_adal')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/0_loading"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "*.json",
						"folderPath": "online-user-profiles-01",
						"fileSystem": "wwi-02"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"userId": {
							"type": "integer"
						},
						"cartId": {
							"type": "string"
						},
						"preferredProducts": {
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						"productReviews": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"productId": {
										"type": "integer"
									},
									"reviewText": {
										"type": "string"
									},
									"reviewDate": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_wwi02_product_adls')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/0_loading"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "generator-product.csv",
						"folderPath": "data-generators/generator-product",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_wwi02_product_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaidw",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/0_loading"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Seasonality",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 6,
						"scale": 2
					},
					{
						"name": "Profit",
						"type": "decimal",
						"precision": 6,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaidw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_wwi02_sale_small_adls')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/0_loading"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sale-small",
						"fileSystem": "wwi-02"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "UTF8"
					},
					{
						"name": "CustomerId",
						"type": "INT32"
					},
					{
						"name": "ProductId",
						"type": "INT_16"
					},
					{
						"name": "Quantity",
						"type": "INT_8"
					},
					{
						"name": "Price",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TransactionDate",
						"type": "INT32"
					},
					{
						"name": "ProfitAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Hour",
						"type": "INT_8"
					},
					{
						"name": "Minute",
						"type": "INT_8"
					},
					{
						"name": "StoreId",
						"type": "INT_16"
					},
					{
						"name": "Year",
						"type": "UTF8"
					},
					{
						"name": "Quarter",
						"type": "UTF8"
					},
					{
						"name": "Month",
						"type": "UTF8"
					},
					{
						"name": "Day",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_wwi02_sale_small_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaidw_highperf",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/0_loading"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaidw_highperf')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_wwi02_salesmall_workload01')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaidw",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/03_monitoring"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaidw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_wwi02_salesmall_workload02')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaidw",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/03_monitoring"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaidw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_asal_december_sales')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/1_import sales data"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sale-20161230-snappy.parquet",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "UTF8"
					},
					{
						"name": "CustomerId",
						"type": "INT32"
					},
					{
						"name": "ProductId",
						"type": "INT_16"
					},
					{
						"name": "Quantity",
						"type": "INT_16"
					},
					{
						"name": "Price",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TransactionDate",
						"type": "INT32"
					},
					{
						"name": "ProfitAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Hour",
						"type": "INT_8"
					},
					{
						"name": "Minute",
						"type": "INT_8"
					},
					{
						"name": "StoreId",
						"type": "INT_16"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_asal_saleheap_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaidw_import01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/1_import sales data"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi_staging",
					"table": "SaleHeap"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaidw_import01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nycrawreference')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Raw/Reference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-raw-df/reference",
						"fileSystem": "nyctaxi"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nycstagingpaymenttype')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/Reference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "payment_type_lookup.csv",
						"folderPath": "nyctaxi-staging/reference-data",
						"fileSystem": "nyctaxi"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "payment_type",
						"type": "String"
					},
					{
						"name": "abbreviation",
						"type": "String"
					},
					{
						"name": "description",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nycstagingratecode')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/Reference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "rate_code_lookup.csv",
						"folderPath": "nyctaxi-staging/reference-data",
						"fileSystem": "nyctaxi"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "rate_code_id|description",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nycstagingtaxizone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/Reference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "taxi_zone_lookup.csv",
						"folderPath": "nyctaxi-staging/reference-data",
						"fileSystem": "nyctaxi"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "LocationID",
						"type": "String"
					},
					{
						"name": "Borough",
						"type": "String"
					},
					{
						"name": "Zone",
						"type": "String"
					},
					{
						"name": "service_zone",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nycstagingtripmonth')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/Reference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip_month_lookup.csv",
						"folderPath": "nyctaxi-staging/reference-data",
						"fileSystem": "nyctaxi"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Trip_Month",
						"type": "String"
					},
					{
						"name": "Month_Name_Short",
						"type": "String"
					},
					{
						"name": "Month_Name_Full",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nycstagingtriptype')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/Reference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip_type_lookup.csv",
						"folderPath": "nyctaxi-staging/reference-data",
						"fileSystem": "nyctaxi"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "trip_type",
						"type": "String"
					},
					{
						"name": "description",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nycstagingvendor')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/Reference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "vendor_lookup.csv",
						"folderPath": "nyctaxi-staging/reference-data",
						"fileSystem": "nyctaxi"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "abbreviation",
						"type": "String"
					},
					{
						"name": "description",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxirawgreends')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Raw/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-raw-df/transactions/green-taxi",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxirawyellowds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Raw/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-raw-df/transactions/yellow-taxi",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends2014non01041112')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2014/month=02",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "INT32"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends201511')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2015/month=11",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "INT64"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends2015Non11')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2015",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends201601')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2016",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends201602to11')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2016/month=02",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends201612')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2016/month=12",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "INT64"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends2017010207080911')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2017",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "INT64"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends2017030405061012')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2017/month=03",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends201802030506')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2018/month=02",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "INT64"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends2018201401and04')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2018/month=01",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends2018Q3')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2018/month=07",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "DOUBLE"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends2018Q4')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2018/month=10",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "DOUBLE"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends201901To08')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2019",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "DOUBLE"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistagegreends2019Q4andonwards')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=green/year=2020",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "DOUBLE"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2009')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2009",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "vendor_name",
						"type": "UTF8"
					},
					{
						"name": "Trip_Pickup_DateTime",
						"type": "UTF8"
					},
					{
						"name": "Trip_Dropoff_DateTime",
						"type": "UTF8"
					},
					{
						"name": "Passenger_Count",
						"type": "INT64"
					},
					{
						"name": "Trip_Distance",
						"type": "DOUBLE"
					},
					{
						"name": "Start_Lon",
						"type": "DOUBLE"
					},
					{
						"name": "Start_Lat",
						"type": "DOUBLE"
					},
					{
						"name": "Rate_Code",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_forward",
						"type": "DOUBLE"
					},
					{
						"name": "End_Lon",
						"type": "DOUBLE"
					},
					{
						"name": "End_Lat",
						"type": "DOUBLE"
					},
					{
						"name": "Payment_Type",
						"type": "UTF8"
					},
					{
						"name": "Fare_Amt",
						"type": "DOUBLE"
					},
					{
						"name": "surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "Tip_Amt",
						"type": "DOUBLE"
					},
					{
						"name": "Tolls_Amt",
						"type": "DOUBLE"
					},
					{
						"name": "Total_Amt",
						"type": "DOUBLE"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds20100203')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2010/month=02",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "vendor_id",
						"type": "UTF8"
					},
					{
						"name": "pickup_datetime",
						"type": "UTF8"
					},
					{
						"name": "dropoff_datetime",
						"type": "UTF8"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "pickup_longitude",
						"type": "DOUBLE"
					},
					{
						"name": "pickup_latitude",
						"type": "DOUBLE"
					},
					{
						"name": "rate_code",
						"type": "UTF8"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "dropoff_longitude",
						"type": "DOUBLE"
					},
					{
						"name": "dropoff_latitude",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "UTF8"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2010non0203')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2010/month=01",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "vendor_id",
						"type": "UTF8"
					},
					{
						"name": "pickup_datetime",
						"type": "UTF8"
					},
					{
						"name": "dropoff_datetime",
						"type": "UTF8"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "pickup_longitude",
						"type": "DOUBLE"
					},
					{
						"name": "pickup_latitude",
						"type": "DOUBLE"
					},
					{
						"name": "rate_code",
						"type": "UTF8"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "dropoff_longitude",
						"type": "DOUBLE"
					},
					{
						"name": "dropoff_latitude",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "UTF8"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds20110103')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2011/month=01",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2011Non0103')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2011/month=02",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds201212')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2012/month=12",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2012non12')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2012",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds201305')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2013/month=05",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2013non05')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2013",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds201401')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2014",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds201408')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2014/month=08",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "INT32"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2014non0108')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2014/month=02",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2015')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2015",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2016')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2016",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2017')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2017",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds201801')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2018",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "DOUBLE"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds201802to05')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2018/month=02",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds201806')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2018/month=06",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "INT64"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds201807081012')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2018/month=07",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds20180911')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2018/month=09",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2019')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2019",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds202001to07and10')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2020",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds202008091112')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2020/month=08",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nyctaxistageyellowds2021and2022')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/1_StagingToRaw/Staging/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-staging/transactional-data/type=yellow/year=2022",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "DOUBLE"
					},
					{
						"name": "month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_asa_campaign_analytics_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/2_other data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "campaignanalytics.csv",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_asa_ecommerce_userprofiles_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/2_other data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online-user-profiles-02",
						"fileSystem": "wwi-02"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"visitorId": {
							"type": "integer"
						},
						"topProductPurchases": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"productId": {
										"type": "integer"
									},
									"itemsPurchasedLast12Months": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_asa_wwi_campaign_analytics_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaidw",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/2_other data"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "CampaignName",
						"type": "nvarchar"
					},
					{
						"name": "Revenue",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "RevenueTarget",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "CampaignAnalytics"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaidw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_asa_wwi_usertopproductpurchases_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaidw",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/2_other data"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ItemsPurchasedLast12Months",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsTopProduct",
						"type": "bit"
					},
					{
						"name": "IsPreferredProduct",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "UserTopProductPurchases"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaidw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_customer_profile_cosmosdb')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaicosmosdb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "WideWorldImport/2_other data"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "OnlineUserProfile01"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaicosmosdb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nyccuratedgreentaxi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaicurateddls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated/Curated/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-curated-df/transactions/green-taxi",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaicurateddls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nyccuratedyellowtaxi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaicurateddls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated/Curated/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-curated-df/transactions/yellow-taxi",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaicurateddls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nycrawgreentaxi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated/Raw/GreenTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "vendor_id",
						"type": "INT64"
					},
					{
						"name": "pickup_datetime",
						"type": "INT96"
					},
					{
						"name": "dropoff_datetime",
						"type": "INT96"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "rate_code_id",
						"type": "DOUBLE"
					},
					{
						"name": "pickup_location_id",
						"type": "INT64"
					},
					{
						"name": "dropoff_location_id",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "INT64"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "INT32"
					},
					{
						"name": "taxi_type",
						"type": "UTF8"
					},
					{
						"name": "trip_year",
						"type": "UTF8"
					},
					{
						"name": "trip_month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nycrawpaymenttype')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated/Raw/Reference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-raw-df/reference/payment-type",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "payment_type",
						"type": "INT32"
					},
					{
						"name": "abbreviation",
						"type": "UTF8"
					},
					{
						"name": "description",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nycrawratecode')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated/Raw/Reference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-raw-df/reference/rate-code",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nycrawtaxizone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated/Raw/Reference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-raw-df/reference/taxi-zone",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "location_id",
						"type": "UTF8"
					},
					{
						"name": "borough",
						"type": "UTF8"
					},
					{
						"name": "zone",
						"type": "UTF8"
					},
					{
						"name": "service_zone",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nycrawtripmonth')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated/Raw/Reference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-raw-df/reference/trip-month",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "trip_month",
						"type": "UTF8"
					},
					{
						"name": "month_name_short",
						"type": "UTF8"
					},
					{
						"name": "month_name_full",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nycrawtriptype')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated/Raw/Reference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-raw-df/reference/trip-type",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "trip_type",
						"type": "INT32"
					},
					{
						"name": "description",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nycrawvendor')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated/Raw/Reference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-raw-df/reference/vendor",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "vendor_id",
						"type": "INT32"
					},
					{
						"name": "abbreviation",
						"type": "UTF8"
					},
					{
						"name": "description",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nycrawyellowtaxi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataairawdls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/2_RawToCurated/Raw/YellowTaxi"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-raw-df/transactions/yellow-taxi",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "vendor_id",
						"type": "UTF8"
					},
					{
						"name": "pickup_datetime",
						"type": "INT96"
					},
					{
						"name": "dropoff_datetime",
						"type": "INT96"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "rate_code_id",
						"type": "DOUBLE"
					},
					{
						"name": "pickup_location_id",
						"type": "INT64"
					},
					{
						"name": "dropoff_location_id",
						"type": "INT64"
					},
					{
						"name": "pickup_longitude",
						"type": "DOUBLE"
					},
					{
						"name": "pickup_latitude",
						"type": "DOUBLE"
					},
					{
						"name": "dropoff_longitude",
						"type": "DOUBLE"
					},
					{
						"name": "dropoff_latitude",
						"type": "DOUBLE"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "UTF8"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "DOUBLE"
					},
					{
						"name": "taxi_type",
						"type": "UTF8"
					},
					{
						"name": "trip_year",
						"type": "UTF8"
					},
					{
						"name": "trip_month",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataairawdls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_nycconsumption')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataaicurateddls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NycTaxi/3_CuratedToConsumption"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxi-consumption-df/transactions/materialized-view",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaicurateddls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tpcdssmidw')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataainsmidw",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "dataaisynapsewks.sql.azuresynapse.net",
						"DatabaseName": "dataaitpcdw"
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "dataaisynapsewks.sql.azuresynapse.net"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "dataaitpcdw"
					}
				},
				"folder": {
					"name": "TpcBenchmark"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": " ",
					"table": "azureadmin"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataainsmidw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaianomalydetector')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CognitiveService",
				"typeProperties": {
					"subscriptionId": "[parameters('dataaianomalydetector_properties_typeProperties_subscriptionId')]",
					"resourceGroup": "dataai",
					"csName": "dataaianomalydetector",
					"csKind": "AnomalyDetector",
					"csLocation": "southcentralus",
					"endPoint": "https://dataaianomalydetector.cognitiveservices.azure.com/",
					"csKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "dataaikeyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "dataaianomalydetector-Key"
					}
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]",
				"[concat(variables('workspaceId'), '/linkedServices/dataaikeyvault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaicosmosdb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('dataaicosmosdb_connectionString')]"
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaicurateddls')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dataaicurateddls_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaidw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dataaidw_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "dataaikeyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "SqlPassword"
					}
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]",
				"[concat(variables('workspaceId'), '/linkedServices/dataaikeyvault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaidw_highperf')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dataaidw_highperf_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "dataaikeyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "SqlPassword"
					}
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]",
				"[concat(variables('workspaceId'), '/linkedServices/dataaikeyvault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaidw_import01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dataaidw_import01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "dataaikeyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "SqlPassword"
					}
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]",
				"[concat(variables('workspaceId'), '/linkedServices/dataaikeyvault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaifile')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('dataaifile_properties_typeProperties_host')]",
					"userId": "[parameters('dataaifile_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('dataaifile_password')]"
					}
				},
				"connectVia": {
					"referenceName": "dataaishir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaishir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaikeyvault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('dataaikeyvault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaimlwks')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('dataaimlwks_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('dataaimlwks_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "dataaimlwks",
					"authentication": "MSI"
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataainsmidw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "dataaisynapsewks.sql.azuresynapse.net"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "dataaitpcdw"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dataainsmidw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataainychttp')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('dataainychttp_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataairawdls')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dataairawdls_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaisynapsewks-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dataaisynapsewks-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaisynapsewks-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dataaisynapsewks-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaitextanalytics')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CognitiveService",
				"typeProperties": {
					"subscriptionId": "[parameters('dataaitextanalytics_properties_typeProperties_subscriptionId')]",
					"resourceGroup": "dataai",
					"csName": "dataaitextanalytics",
					"csKind": "TextAnalytics",
					"csLocation": "southcentralus",
					"endPoint": "https://dataaitextanalytics.cognitiveservices.azure.com/",
					"csKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "dataaikeyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "dataaitextanalytics-Key"
					}
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]",
				"[concat(variables('workspaceId'), '/linkedServices/dataaikeyvault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaiwksdls')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dataaiwksdls_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "dataaiir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/dataaiir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_tlc_yellow')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('nyc_tlc_yellow_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaiir')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaishir')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nycstagingtorawgreentaxidf')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NycTaxi/1_StagingToRaw"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends2014non01041112",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi2014Non01041112"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends2015Non11",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi2015Non11"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends201511",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi201511"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends201601",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi201601"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends201602to11",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi201602To11"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends201612",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi201612"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends2018201401and04",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi2018201401And04"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends2017010207080911",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi2017010207080911"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends2017030405061012",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi2017030405061012"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends201802030506",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi201802030506"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends2018Q3",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi2018Q3"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends2018Q4",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi2018Q4"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends201901To08",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi201901To08"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistagegreends2019Q4andonwards",
								"type": "DatasetReference"
							},
							"name": "StagingGreenTaxi2019Q4AndOnwards"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi2014Non01041112"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi2015Non11"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi201511"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi201601"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi201602To11"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi201612"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi2018201401And04"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi2017010207080911"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi2017030405061012"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi201802030506"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi2018Q3"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi2018Q4"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi201901To08"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawgreends",
								"type": "DatasetReference"
							},
							"name": "PersistGreenTaxi2019Q4AndOnwards"
						}
					],
					"transformations": [
						{
							"name": "DerivedGreenTaxi2019Q4AndOnwards"
						},
						{
							"name": "DriftGreenTaxi2014Non01041112"
						},
						{
							"name": "DriftGreenTaxi2015Non11"
						},
						{
							"name": "DerivedGreenTaxi2014Non01041112"
						},
						{
							"name": "DerivedGreenTaxi2015Non11"
						},
						{
							"name": "SelectGreenTaxi2014Non01041112"
						},
						{
							"name": "SelectGreenTaxi2015Non11"
						},
						{
							"name": "DriftGreenTaxi201511"
						},
						{
							"name": "DriftGreenTaxi201601"
						},
						{
							"name": "DerivedGreenTaxi201511"
						},
						{
							"name": "DerivedGreenTaxi201601"
						},
						{
							"name": "SelectGreenTaxi201511"
						},
						{
							"name": "SelectGreenTaxi201601"
						},
						{
							"name": "DriftGreenTaxi201602To11"
						},
						{
							"name": "DerivedGreenTaxi201602To11"
						},
						{
							"name": "SelectGreenTaxi201602To11"
						},
						{
							"name": "DriftGreenTaxi201612"
						},
						{
							"name": "DerivedGreenTaxi201612"
						},
						{
							"name": "SelectGreenTaxi201612"
						},
						{
							"name": "DriftGreenTaxi2018201401And04"
						},
						{
							"name": "DerivedGreenTaxi2018201401And04"
						},
						{
							"name": "SelectGreenTaxi2018201401And04"
						},
						{
							"name": "DriftGreenTaxi2017010207080911"
						},
						{
							"name": "DerivedGreenTaxi2017010207080911"
						},
						{
							"name": "SelectGreenTaxi2017010207080911"
						},
						{
							"name": "DriftGreenTaxi2017030405061012"
						},
						{
							"name": "DerivedGreenTaxi2017030405061012"
						},
						{
							"name": "SelectGreenTaxi2017030405061012"
						},
						{
							"name": "DriftGreenTaxi201802030506"
						},
						{
							"name": "DerivedGreenTaxi201802030506"
						},
						{
							"name": "SelectGreenTaxi201802030506"
						},
						{
							"name": "DriftGreenTaxi2018Q3"
						},
						{
							"name": "DriftGreenTaxi2018Q4"
						},
						{
							"name": "DerivedGreenTaxi2018Q3"
						},
						{
							"name": "DerivedGreenTaxi2018Q4"
						},
						{
							"name": "SelectGreenTaxi2018Q3"
						},
						{
							"name": "SelectGreenTaxi2018Q4"
						},
						{
							"name": "DriftGreenTaxi201901To08"
						},
						{
							"name": "DerivedGreenTaxi201901To08"
						},
						{
							"name": "SelectGreenTaxi201901To08"
						},
						{
							"name": "SelectGreenTaxi2019Q4AndOnwards"
						}
					],
					"scriptLines": [
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as long,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as integer,",
						"          total_amount as double,",
						"          payment_type as long,",
						"          trip_type as double,",
						"          congestion_surcharge as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2014/month=02','nyctaxi-staging/transactional-data/type=green/year=2014/month=03','nyctaxi-staging/transactional-data/type=green/year=2014/month=05','nyctaxi-staging/transactional-data/type=green/year=2014/month=06','nyctaxi-staging/transactional-data/type=green/year=2014/month=07','nyctaxi-staging/transactional-data/type=green/year=2014/month=08','nyctaxi-staging/transactional-data/type=green/year=2014/month=09','nyctaxi-staging/transactional-data/type=green/year=2014/month=10']) ~> StagingGreenTaxi2014Non01041112",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as long,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as long,",
						"          trip_type as double,",
						"          congestion_surcharge as integer,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2015/month=0*','nyctaxi-staging/transactional-data/type=green/year=2015/month=10','nyctaxi-staging/transactional-data/type=green/year=2015/month=12']) ~> StagingGreenTaxi2015Non11",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as long,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as long,",
						"          trip_type as long,",
						"          congestion_surcharge as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2015/month=11']) ~> StagingGreenTaxi201511",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as long,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as long,",
						"          trip_type as double,",
						"          congestion_surcharge as double,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2016/month=01']) ~> StagingGreenTaxi201601",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as long,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as long,",
						"          trip_type as double,",
						"          congestion_surcharge as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2016/month=02','nyctaxi-staging/transactional-data/type=green/year=2016/month=03','nyctaxi-staging/transactional-data/type=green/year=2016/month=04','nyctaxi-staging/transactional-data/type=green/year=2016/month=05','nyctaxi-staging/transactional-data/type=green/year=2016/month=06','nyctaxi-staging/transactional-data/type=green/year=2016/month=07','nyctaxi-staging/transactional-data/type=green/year=2016/month=08','nyctaxi-staging/transactional-data/type=green/year=2016/month=09','nyctaxi-staging/transactional-data/type=green/year=2016/month=10','nyctaxi-staging/transactional-data/type=green/year=2016/month=11']) ~> StagingGreenTaxi201602To11",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as long,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as long,",
						"          trip_type as long,",
						"          congestion_surcharge as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2016/month=12']) ~> StagingGreenTaxi201612",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as long,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as long,",
						"          trip_type as double,",
						"          congestion_surcharge as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2018/month=01','nyctaxi-staging/transactional-data/type=green/year=2018/month=04','nyctaxi-staging/transactional-data/type=green/year=2014/month=01','nyctaxi-staging/transactional-data/type=green/year=2014/month=04','nyctaxi-staging/transactional-data/type=green/year=2014/month=11','nyctaxi-staging/transactional-data/type=green/year=2014/month=12']) ~> StagingGreenTaxi2018201401And04",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as long,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as long,",
						"          trip_type as long,",
						"          congestion_surcharge as integer,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2017/month=01','nyctaxi-staging/transactional-data/type=green/year=2017/month=02','nyctaxi-staging/transactional-data/type=green/year=2017/month=07','nyctaxi-staging/transactional-data/type=green/year=2017/month=08','nyctaxi-staging/transactional-data/type=green/year=2017/month=09','nyctaxi-staging/transactional-data/type=green/year=2017/month=11']) ~> StagingGreenTaxi2017010207080911",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as long,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as long,",
						"          trip_type as double,",
						"          congestion_surcharge as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2017/month=03','nyctaxi-staging/transactional-data/type=green/year=2017/month=04','nyctaxi-staging/transactional-data/type=green/year=2017/month=05','nyctaxi-staging/transactional-data/type=green/year=2017/month=06','nyctaxi-staging/transactional-data/type=green/year=2017/month=10','nyctaxi-staging/transactional-data/type=green/year=2017/month=12']) ~> StagingGreenTaxi2017030405061012",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as long,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as long,",
						"          trip_type as long,",
						"          congestion_surcharge as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2018/month=02','nyctaxi-staging/transactional-data/type=green/year=2018/month=03','nyctaxi-staging/transactional-data/type=green/year=2018/month=05','nyctaxi-staging/transactional-data/type=green/year=2018/month=06']) ~> StagingGreenTaxi201802030506",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2018/month=07','nyctaxi-staging/transactional-data/type=green/year=2018/month=08','nyctaxi-staging/transactional-data/type=green/year=2018/month=09']) ~> StagingGreenTaxi2018Q3",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2018/month=1*']) ~> StagingGreenTaxi2018Q4",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2019/month=01','nyctaxi-staging/transactional-data/type=green/year=2019/month=02','nyctaxi-staging/transactional-data/type=green/year=2019/month=03','nyctaxi-staging/transactional-data/type=green/year=2019/month=04','nyctaxi-staging/transactional-data/type=green/year=2019/month=05','nyctaxi-staging/transactional-data/type=green/year=2019/month=06','nyctaxi-staging/transactional-data/type=green/year=2019/month=07','nyctaxi-staging/transactional-data/type=green/year=2019/month=08']) ~> StagingGreenTaxi201901To08",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2022/month=*','nyctaxi-staging/transactional-data/type=green/year=2021/month=*','nyctaxi-staging/transactional-data/type=green/year=2020/month=*','nyctaxi-staging/transactional-data/type=green/year=2019/month=09','nyctaxi-staging/transactional-data/type=green/year=2019/month=10','nyctaxi-staging/transactional-data/type=green/year=2019/month=11','nyctaxi-staging/transactional-data/type=green/year=2019/month=12']) ~> StagingGreenTaxi2019Q4AndOnwards",
						"StagingGreenTaxi2019Q4AndOnwards derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi2019Q4AndOnwards",
						"StagingGreenTaxi2014Non01041112 derive(RatecodeID = toDouble(byName('RatecodeID')),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          improvement_surcharge = toDouble(byName('improvement_surcharge')),",
						"          payment_type = toDouble(byName('payment_type')),",
						"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2014Non01041112",
						"StagingGreenTaxi2015Non11 derive(RatecodeID = toDouble(byName('RatecodeID')),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          payment_type = toDouble(byName('payment_type')),",
						"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2015Non11",
						"DriftGreenTaxi2014Non01041112 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi2014Non01041112",
						"DriftGreenTaxi2015Non11 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi2015Non11",
						"DerivedGreenTaxi2014Non01041112 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2014Non01041112",
						"DerivedGreenTaxi2015Non11 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2015Non11",
						"StagingGreenTaxi201511 derive(RatecodeID = toDouble(byName('RatecodeID')),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          payment_type = toDouble(byName('payment_type')),",
						"          congestion_surcharge = toDouble(byName('congestion_surcharge')),",
						"          trip_type = toDouble(byName('trip_type'))) ~> DriftGreenTaxi201511",
						"StagingGreenTaxi201601 derive(RatecodeID = toDouble(byName('RatecodeID')),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          payment_type = toDouble(byName('payment_type'))) ~> DriftGreenTaxi201601",
						"DriftGreenTaxi201511 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi201511",
						"DriftGreenTaxi201601 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi201601",
						"DerivedGreenTaxi201511 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201511",
						"DerivedGreenTaxi201601 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201601",
						"StagingGreenTaxi201602To11 derive(RatecodeID = toDouble(byName('RatecodeID')),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          payment_type = toDouble(byName('payment_type')),",
						"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi201602To11",
						"DriftGreenTaxi201602To11 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi201602To11",
						"DerivedGreenTaxi201602To11 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201602To11",
						"StagingGreenTaxi201612 derive(RatecodeID = toDouble(byName('RatecodeID')),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          payment_type = toDouble(byName('payment_type')),",
						"          trip_type = toDouble(byName('trip_type')),",
						"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi201612",
						"DriftGreenTaxi201612 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi201612",
						"DerivedGreenTaxi201612 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201612",
						"StagingGreenTaxi2018201401And04 derive(RatecodeID = toDouble(byName('RatecodeID')),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          payment_type = toDouble(byName('payment_type')),",
						"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2018201401And04",
						"DriftGreenTaxi2018201401And04 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi2018201401And04",
						"DerivedGreenTaxi2018201401And04 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2018201401And04",
						"StagingGreenTaxi2017010207080911 derive(RatecodeID = toDouble(byName('RatecodeID')),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          payment_type = toDouble(byName('payment_type')),",
						"          trip_type = toDouble(byName('trip_type')),",
						"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2017010207080911",
						"DriftGreenTaxi2017010207080911 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi2017010207080911",
						"DerivedGreenTaxi2017010207080911 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2017010207080911",
						"StagingGreenTaxi2017030405061012 derive(RatecodeID = toDouble(byName('RatecodeID')),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          payment_type = toDouble(byName('payment_type')),",
						"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2017030405061012",
						"DriftGreenTaxi2017030405061012 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi2017030405061012",
						"DerivedGreenTaxi2017030405061012 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2017030405061012",
						"StagingGreenTaxi201802030506 derive(RatecodeID = toDouble(byName('RatecodeID')),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          payment_type = toDouble(byName('payment_type')),",
						"          trip_type = toDouble(byName('trip_type')),",
						"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi201802030506",
						"DriftGreenTaxi201802030506 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi201802030506",
						"DerivedGreenTaxi201802030506 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201802030506",
						"StagingGreenTaxi2018Q3 derive(congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2018Q3",
						"StagingGreenTaxi2018Q4 derive(ehail_fee = toInteger(byName('ehail_fee')),",
						"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2018Q4",
						"DriftGreenTaxi2018Q3 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi2018Q3",
						"DriftGreenTaxi2018Q4 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi2018Q4",
						"DerivedGreenTaxi2018Q3 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2018Q3",
						"DerivedGreenTaxi2018Q4 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2018Q4",
						"StagingGreenTaxi201901To08 derive(ehail_fee = toInteger(byName('ehail_fee'))) ~> DriftGreenTaxi201901To08",
						"DriftGreenTaxi201901To08 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'green') ~> DerivedGreenTaxi201901To08",
						"DerivedGreenTaxi201901To08 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201901To08",
						"DerivedGreenTaxi2019Q4AndOnwards select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = lpep_pickup_datetime,",
						"          dropoff_datetime = lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = RatecodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2019Q4AndOnwards",
						"SelectGreenTaxi2014Non01041112 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi2014Non01041112",
						"SelectGreenTaxi2015Non11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi2015Non11",
						"SelectGreenTaxi201511 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi201511",
						"SelectGreenTaxi201601 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi201601",
						"SelectGreenTaxi201602To11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi201602To11",
						"SelectGreenTaxi201612 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi201612",
						"SelectGreenTaxi2018201401And04 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi2018201401And04",
						"SelectGreenTaxi2017010207080911 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi2017010207080911",
						"SelectGreenTaxi2017030405061012 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi2017030405061012",
						"SelectGreenTaxi201802030506 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi201802030506",
						"SelectGreenTaxi2018Q3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi2018Q3",
						"SelectGreenTaxi2018Q4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi2018Q4",
						"SelectGreenTaxi201901To08 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi201901To08",
						"SelectGreenTaxi2019Q4AndOnwards sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistGreenTaxi2019Q4AndOnwards"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends2014non01041112')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends2015Non11')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends201511')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends201601')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends201602to11')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends201612')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends2018201401and04')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends2017010207080911')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends2017030405061012')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends201802030506')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends2018Q3')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends2018Q4')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends201901To08')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistagegreends2019Q4andonwards')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxirawgreends')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nycstagingtorawreferencedf')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NycTaxi/1_StagingToRaw"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "1_nycstagingpaymenttype",
								"type": "DatasetReference"
							},
							"name": "StagingPaymentType",
							"description": "Import data from staging in CSV format"
						},
						{
							"dataset": {
								"referenceName": "1_nycstagingtaxizone",
								"type": "DatasetReference"
							},
							"name": "StagingTaxiZone",
							"description": "Import data from staging in CSV format"
						},
						{
							"dataset": {
								"referenceName": "1_nycstagingtripmonth",
								"type": "DatasetReference"
							},
							"name": "StagingTripMonth"
						},
						{
							"dataset": {
								"referenceName": "1_nycstagingtriptype",
								"type": "DatasetReference"
							},
							"name": "StagingTripType",
							"description": "Import data from staging in CSV format"
						},
						{
							"dataset": {
								"referenceName": "1_nycstagingvendor",
								"type": "DatasetReference"
							},
							"name": "StagingVendor",
							"description": "Import data from staging in CSV format"
						},
						{
							"dataset": {
								"referenceName": "1_nycstagingratecode",
								"type": "DatasetReference"
							},
							"name": "StagingRateCode"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "2_nycrawpaymenttype",
								"type": "DatasetReference"
							},
							"name": "RawPaymentType",
							"description": "Export csv to parquet as single file (small data)"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawratecode",
								"type": "DatasetReference"
							},
							"name": "RawRateCode"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawtaxizone",
								"type": "DatasetReference"
							},
							"name": "RawTaxiZone",
							"description": "Export csv to parquet as single file (small data)"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawtripmonth",
								"type": "DatasetReference"
							},
							"name": "RawTripMonth",
							"description": "Export csv to parquet as single file (small data)"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawtriptype",
								"type": "DatasetReference"
							},
							"name": "RawTripType",
							"description": "Export csv to parquet as single file (small data)"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawvendor",
								"type": "DatasetReference"
							},
							"name": "RawVendor",
							"description": "Export csv to parquet as single file (small data)"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tpayment_type as short,\n\t\tabbreviation as string,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> StagingPaymentType\nsource(output(\n\t\tLocationID as short,\n\t\tBorough as string,\n\t\tZone as string,\n\t\tservice_zone as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> StagingTaxiZone\nsource(output(\n\t\tTrip_Month as string,\n\t\tMonth_Name_Short as string,\n\t\tMonth_Name_Full as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> StagingTripMonth\nsource(output(\n\t\ttrip_type as string,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> StagingTripType\nsource(output(\n\t\tvendor_id as short,\n\t\tabbreviation as string,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> StagingVendor\nsource(output(\n\t\trate_code_id as short,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> StagingRateCode\nStagingPaymentType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tpayment_type as integer,\n\t\tabbreviation as string,\n\t\tdescription as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: []) ~> RawPaymentType\nStagingRateCode sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: []) ~> RawRateCode\nStagingTaxiZone sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tlocation_id as string,\n\t\tborough as string,\n\t\tzone as string,\n\t\tservice_zone as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: []) ~> RawTaxiZone\nStagingTripMonth sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\ttrip_month as string,\n\t\tmonth_name_short as string,\n\t\tmonth_name_full as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: []) ~> RawTripMonth\nStagingTripType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\ttrip_type as integer,\n\t\tdescription as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: []) ~> RawTripType\nStagingVendor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tvendor_id as integer,\n\t\tabbreviation as string,\n\t\tdescription as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: []) ~> RawVendor"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/1_nycstagingpaymenttype')]",
				"[concat(variables('workspaceId'), '/datasets/1_nycstagingtaxizone')]",
				"[concat(variables('workspaceId'), '/datasets/1_nycstagingtripmonth')]",
				"[concat(variables('workspaceId'), '/datasets/1_nycstagingtriptype')]",
				"[concat(variables('workspaceId'), '/datasets/1_nycstagingvendor')]",
				"[concat(variables('workspaceId'), '/datasets/1_nycstagingratecode')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawpaymenttype')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawratecode')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawtaxizone')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawtripmonth')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawtriptype')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawvendor')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_nycstagingtorawyellotaxidf')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NycTaxi/1_StagingToRaw"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2009",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2009"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2010non0203",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2010Non0203"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds20100203",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi20100203"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds20110103",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi20110103"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2011Non0103",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2011Non0103"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2012non12",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2012Non12"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds201212",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi201212"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2013non05",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2013Non05"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds201305",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi201305"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds201401",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi201401"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2014non0108",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2014Non0108"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds201408",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi201408"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2015",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2015"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2016",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2016"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2017",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2017"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds201801",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi201801"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds201802to05",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi201802To05"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds201806",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi201806"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds201807081012",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi201807081012"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds20180911",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi20180911"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2019",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2019"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds202001to07and10",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi202001To07And10"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds202008091112",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi202008091112"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxistageyellowds2021and2022",
								"type": "DatasetReference"
							},
							"name": "StagingYellowTaxi2021And2022"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2009"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2010Non0203"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi20100203"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi20110103"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2011Non0103"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2012Non12"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi201212"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2013Non05"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi201305"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi201401"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2014Non0108"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi201408"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2015"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2016"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2017"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi201801"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi201802To06"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi201807081012"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi20180911"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2019"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi202001To07And10"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi202008091112"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi2021And2022"
						},
						{
							"dataset": {
								"referenceName": "1_nyctaxirawyellowds",
								"type": "DatasetReference"
							},
							"name": "PersistYellowTaxi201806"
						}
					],
					"transformations": [
						{
							"name": "DriftYellowTaxi2010Non0203"
						},
						{
							"name": "DerivedYellowTaxi2010Non0203"
						},
						{
							"name": "SelectYellowTaxi2010Non0203"
						},
						{
							"name": "DriftYellowTaxi2009"
						},
						{
							"name": "DerivedYellowTaxi2009"
						},
						{
							"name": "SelectYellowTaxi2009"
						},
						{
							"name": "DriftYellowTaxi20100203"
						},
						{
							"name": "DerivedYellowTaxi20100203"
						},
						{
							"name": "SelectYellowTaxi20100203"
						},
						{
							"name": "DriftYellowTaxi20110103"
						},
						{
							"name": "DerivedYellowTaxi20110103"
						},
						{
							"name": "SelectYellowTaxi20110103"
						},
						{
							"name": "DriftYellowTaxi2011Non0103"
						},
						{
							"name": "DerivedYellowTaxi2011Non0103"
						},
						{
							"name": "SelectYellowTaxi2011Non0103"
						},
						{
							"name": "DriftYellowTaxi2012Non12"
						},
						{
							"name": "DriftYellowTaxi201212"
						},
						{
							"name": "DerivedYellowTaxi2012Non12"
						},
						{
							"name": "DerivedYellowTaxi201212"
						},
						{
							"name": "SelectYellowTaxi2012Non12"
						},
						{
							"name": "SelectYellowTaxi201212"
						},
						{
							"name": "DriftYellowTaxi2013Non05"
						},
						{
							"name": "DriftYellowTaxi201305"
						},
						{
							"name": "DerivedYellowTaxi2013Non05"
						},
						{
							"name": "DerivedYellowTaxi201305"
						},
						{
							"name": "SelectYellowTaxi2013Non05"
						},
						{
							"name": "SelectYellowTaxi201305"
						},
						{
							"name": "DriftYellowTaxi201401"
						},
						{
							"name": "DriftYellowTaxi2014Non0108"
						},
						{
							"name": "DriftYellowTaxi201408"
						},
						{
							"name": "DriftYellowTaxi2015"
						},
						{
							"name": "DerivedYellowTaxi201401"
						},
						{
							"name": "DerivedYellowTaxi2014Non0108"
						},
						{
							"name": "DerivedYellowTaxi201408"
						},
						{
							"name": "DerivedYellowTaxi2015"
						},
						{
							"name": "SelectYellowTaxi201401"
						},
						{
							"name": "SelectYellowTaxi2014Non0108"
						},
						{
							"name": "SelectYellowTaxi201408"
						},
						{
							"name": "SelectYellowTaxi2015"
						},
						{
							"name": "DriftYellowTaxi2016"
						},
						{
							"name": "DriftYellowTaxi2017"
						},
						{
							"name": "DriftYellowTaxi201801"
						},
						{
							"name": "DriftYellowTaxi201802To06"
						},
						{
							"name": "DerivedYellowTaxi2016"
						},
						{
							"name": "DerivedYellowTaxi2017"
						},
						{
							"name": "DerivedYellowTaxi201801"
						},
						{
							"name": "DerivedYellowTaxi201802To06"
						},
						{
							"name": "SelectYellowTaxi2016"
						},
						{
							"name": "SelectYellowTaxi2017"
						},
						{
							"name": "SelectYellowTaxi201801"
						},
						{
							"name": "SelectYellowTaxi201802To06"
						},
						{
							"name": "DriftYellowTaxi201807081012"
						},
						{
							"name": "DriftYellowTaxi20180911"
						},
						{
							"name": "DriftYellowTaxi2019"
						},
						{
							"name": "DriftYellowTaxi202001To07And10"
						},
						{
							"name": "DerivedYellowTaxi201807081012"
						},
						{
							"name": "DerivedYellowTaxi20180911"
						},
						{
							"name": "DerivedYellowTaxi2019"
						},
						{
							"name": "DerivedYellowTaxi202001To07And10"
						},
						{
							"name": "SelectYellowTaxi201807081012"
						},
						{
							"name": "SelectYellowTaxi20180911"
						},
						{
							"name": "SelectYellowTaxi2019"
						},
						{
							"name": "SelectYellowTaxi202001To07And10"
						},
						{
							"name": "DriftYellowTaxi202008091112"
						},
						{
							"name": "DriftYellowTaxi2021And2022"
						},
						{
							"name": "DerivedYellowTaxi202008091112"
						},
						{
							"name": "DerivedYellowTaxi2021And2022"
						},
						{
							"name": "SelectYellowTaxi202008091112"
						},
						{
							"name": "SelectYellowTaxi2021And2022"
						},
						{
							"name": "DriftYellowTaxi201806"
						},
						{
							"name": "DerivedYellowTaxi201806"
						},
						{
							"name": "SelectYellowTaxi201806"
						}
					],
					"scriptLines": [
						"source(output(",
						"          vendor_name as string,",
						"          Trip_Pickup_DateTime as string,",
						"          Trip_Dropoff_DateTime as string,",
						"          Passenger_Count as long,",
						"          Trip_Distance as double,",
						"          Start_Lon as double,",
						"          Start_Lat as double,",
						"          Rate_Code as double,",
						"          store_and_forward as double,",
						"          End_Lon as double,",
						"          End_Lat as double,",
						"          Payment_Type as string,",
						"          Fare_Amt as double,",
						"          surcharge as double,",
						"          mta_tax as double,",
						"          Tip_Amt as double,",
						"          Tolls_Amt as double,",
						"          Total_Amt as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2009/month=*']) ~> StagingYellowTaxi2009",
						"source(output(",
						"          vendor_id as string,",
						"          pickup_datetime as string,",
						"          dropoff_datetime as string,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          pickup_longitude as double,",
						"          pickup_latitude as double,",
						"          rate_code as string,",
						"          store_and_fwd_flag as string,",
						"          dropoff_longitude as double,",
						"          dropoff_latitude as double,",
						"          payment_type as string,",
						"          fare_amount as double,",
						"          surcharge as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          total_amount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2010/month=01','nyctaxi-staging/transactional-data/type=yellow/year=2010/month=04','nyctaxi-staging/transactional-data/type=yellow/year=2010/month=05','nyctaxi-staging/transactional-data/type=yellow/year=2010/month=06','nyctaxi-staging/transactional-data/type=yellow/year=2010/month=07','nyctaxi-staging/transactional-data/type=yellow/year=2010/month=08','nyctaxi-staging/transactional-data/type=yellow/year=2010/month=09','nyctaxi-staging/transactional-data/type=yellow/year=2010/month=10','nyctaxi-staging/transactional-data/type=yellow/year=2010/month=11','nyctaxi-staging/transactional-data/type=yellow/year=2010/month=12']) ~> StagingYellowTaxi2010Non0203",
						"source(output(",
						"          vendor_id as string,",
						"          pickup_datetime as string,",
						"          dropoff_datetime as string,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          pickup_longitude as double,",
						"          pickup_latitude as double,",
						"          rate_code as string,",
						"          store_and_fwd_flag as string,",
						"          dropoff_longitude as double,",
						"          dropoff_latitude as double,",
						"          payment_type as string,",
						"          fare_amount as double,",
						"          surcharge as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          total_amount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2010/month=02','nyctaxi-staging/transactional-data/type=yellow/year=2010/month=03']) ~> StagingYellowTaxi20100203",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionRootPath: 'nyctaxi-staging/transactional-data/type=yellow/year=2011/month=03',",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2011/month=01']) ~> StagingYellowTaxi20110103",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as integer,",
						"          airport_fee as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2011/month=02','nyctaxi-staging/transactional-data/type=yellow/year=2011/month=04','nyctaxi-staging/transactional-data/type=yellow/year=2011/month=05','nyctaxi-staging/transactional-data/type=yellow/year=2011/month=06','nyctaxi-staging/transactional-data/type=yellow/year=2011/month=07','nyctaxi-staging/transactional-data/type=yellow/year=2011/month=08','nyctaxi-staging/transactional-data/type=yellow/year=2011/month=09','nyctaxi-staging/transactional-data/type=yellow/year=2011/month=1*']) ~> StagingYellowTaxi2011Non0103",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as integer,",
						"          airport_fee as integer,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2012/month=01','nyctaxi-staging/transactional-data/type=yellow/year=2012/month=02','nyctaxi-staging/transactional-data/type=yellow/year=2012/month=03','nyctaxi-staging/transactional-data/type=yellow/year=2012/month=04','nyctaxi-staging/transactional-data/type=yellow/year=2012/month=05','nyctaxi-staging/transactional-data/type=yellow/year=2012/month=06','nyctaxi-staging/transactional-data/type=yellow/year=2012/month=07','nyctaxi-staging/transactional-data/type=yellow/year=2012/month=08','nyctaxi-staging/transactional-data/type=yellow/year=2012/month=09','nyctaxi-staging/transactional-data/type=yellow/year=2012/month=10','nyctaxi-staging/transactional-data/type=yellow/year=2012/month=11']) ~> StagingYellowTaxi2012Non12",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2012/month=12']) ~> StagingYellowTaxi201212",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as integer,",
						"          airport_fee as integer,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2013/month=01','nyctaxi-staging/transactional-data/type=yellow/year=2013/month=02','nyctaxi-staging/transactional-data/type=yellow/year=2013/month=03','nyctaxi-staging/transactional-data/type=yellow/year=2013/month=04','nyctaxi-staging/transactional-data/type=yellow/year=2013/month=06','nyctaxi-staging/transactional-data/type=yellow/year=2013/month=07','nyctaxi-staging/transactional-data/type=yellow/year=2013/month=08','nyctaxi-staging/transactional-data/type=yellow/year=2013/month=09','nyctaxi-staging/transactional-data/type=yellow/year=2013/month=10','nyctaxi-staging/transactional-data/type=yellow/year=2013/month=11','nyctaxi-staging/transactional-data/type=yellow/year=2013/month=12']) ~> StagingYellowTaxi2013Non05",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2013/month=05']) ~> StagingYellowTaxi201305",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as integer,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2014/month=01']) ~> StagingYellowTaxi201401",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as integer,",
						"          airport_fee as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2014/month=02','nyctaxi-staging/transactional-data/type=yellow/year=2014/month=03','nyctaxi-staging/transactional-data/type=yellow/year=2014/month=04','nyctaxi-staging/transactional-data/type=yellow/year=2014/month=05','nyctaxi-staging/transactional-data/type=yellow/year=2014/month=06','nyctaxi-staging/transactional-data/type=yellow/year=2014/month=07','nyctaxi-staging/transactional-data/type=yellow/year=2014/month=09','nyctaxi-staging/transactional-data/type=yellow/year=2014/month=10','nyctaxi-staging/transactional-data/type=yellow/year=2014/month=11','nyctaxi-staging/transactional-data/type=yellow/year=2014/month=12']) ~> StagingYellowTaxi2014Non0108",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as integer,",
						"          total_amount as double,",
						"          congestion_surcharge as integer,",
						"          airport_fee as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2014/month=08']) ~> StagingYellowTaxi201408",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as integer,",
						"          airport_fee as integer,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2015/month=*']) ~> StagingYellowTaxi2015",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as integer,",
						"          airport_fee as integer,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2016/month=*']) ~> StagingYellowTaxi2016",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as integer,",
						"          airport_fee as integer,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2017/month=*']) ~> StagingYellowTaxi2017",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as double,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2018/month=01']) ~> StagingYellowTaxi201801",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as integer,",
						"          airport_fee as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2018/month=02','nyctaxi-staging/transactional-data/type=yellow/year=2018/month=03','nyctaxi-staging/transactional-data/type=yellow/year=2018/month=04','nyctaxi-staging/transactional-data/type=yellow/year=2018/month=05']) ~> StagingYellowTaxi201802To05",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as long,",
						"          trip_distance as double,",
						"          RatecodeID as long,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2018/month=06']) ~> StagingYellowTaxi201806",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          RatecodeID as double,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as integer,",
						"          airport_fee as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2018/month=07','nyctaxi-staging/transactional-data/type=yellow/year=2018/month=08','nyctaxi-staging/transactional-data/type=yellow/year=2018/month=10','nyctaxi-staging/transactional-data/type=yellow/year=2018/month=12']) ~> StagingYellowTaxi201807081012",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          RatecodeID as double,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2018/month=09','nyctaxi-staging/transactional-data/type=yellow/year=2018/month=11']) ~> StagingYellowTaxi20180911",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          RatecodeID as double,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as integer,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2019/month=*']) ~> StagingYellowTaxi2019",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          RatecodeID as double,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as integer,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2020/month=01','nyctaxi-staging/transactional-data/type=yellow/year=2020/month=02','nyctaxi-staging/transactional-data/type=yellow/year=2020/month=03','nyctaxi-staging/transactional-data/type=yellow/year=2020/month=04','nyctaxi-staging/transactional-data/type=yellow/year=2020/month=05','nyctaxi-staging/transactional-data/type=yellow/year=2020/month=06','nyctaxi-staging/transactional-data/type=yellow/year=2020/month=07','nyctaxi-staging/transactional-data/type=yellow/year=2020/month=10']) ~> StagingYellowTaxi202001To07And10",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          RatecodeID as double,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2020/month=08','nyctaxi-staging/transactional-data/type=yellow/year=2020/month=09','nyctaxi-staging/transactional-data/type=yellow/year=2020/month=11','nyctaxi-staging/transactional-data/type=yellow/year=2020/month=12']) ~> StagingYellowTaxi202008091112",
						"source(output(",
						"          VendorID as long,",
						"          tpep_pickup_datetime as timestamp,",
						"          tpep_dropoff_datetime as timestamp,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          RatecodeID as double,",
						"          store_and_fwd_flag as string,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          payment_type as long,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          congestion_surcharge as double,",
						"          airport_fee as double,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['nyctaxi-staging/transactional-data/type=yellow/year=2022/month=*','nyctaxi-staging/transactional-data/type=yellow/year=2021/month=*']) ~> StagingYellowTaxi2021And2022",
						"StagingYellowTaxi2010Non0203 derive(pickup_location_id = toLong('0'),",
						"          dropoff_location_id = toLong('0'),",
						"          pickup_datetime = toTimestamp(pickup_datetime),",
						"          dropoff_datetime = toTimestamp(dropoff_datetime),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          rate_code = toDouble(byName('rate_code')),",
						"          ehail_fee = toInteger('0'),",
						"          improvement_surcharge = toDouble('0'),",
						"          congestion_surcharge = toDouble('0'),",
						"          trip_type = toDouble('0'),",
						"          extra = toDouble('0'),",
						"          airport_fee = toDouble('0')) ~> DriftYellowTaxi2010Non0203",
						"DriftYellowTaxi2010Non0203 derive(trip_year = toInteger(left(toString(pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(pickup_datetime), 6, 2)),",
						"          taxi_type = 'yelllow') ~> DerivedYellowTaxi2010Non0203",
						"DerivedYellowTaxi2010Non0203 select(mapColumn(",
						"          vendor_id,",
						"          pickup_datetime,",
						"          dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = rate_code,",
						"          pickup_location_id,",
						"          dropoff_location_id,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2010Non0203",
						"StagingYellowTaxi2009 derive(pickup_location_id = toLong('0'),",
						"          dropoff_location_id = toLong('0'),",
						"          pickup_datetime = toTimestamp(Trip_Pickup_DateTime),",
						"          dropoff_datetime = toTimestamp(Trip_Dropoff_DateTime),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          rate_code = toDouble(byName('rate_code')),",
						"          ehail_fee = toInteger('0'),",
						"          improvement_surcharge = toDouble('0'),",
						"          congestion_surcharge = toDouble('0'),",
						"          trip_type = toDouble('0'),",
						"          extra = toDouble('0'),",
						"          airport_fee = toDouble('0'),",
						"          store_and_forward = toString(store_and_forward)) ~> DriftYellowTaxi2009",
						"DriftYellowTaxi2009 derive(trip_year = toInteger(left(toString(pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(pickup_datetime), 6, 2)),",
						"          taxi_type = 'yelllow') ~> DerivedYellowTaxi2009",
						"DerivedYellowTaxi2009 select(mapColumn(",
						"          vendor_id = vendor_name,",
						"          pickup_datetime,",
						"          dropoff_datetime,",
						"          store_and_fwd_flag = store_and_forward,",
						"          rate_code_id = DriftYellowTaxi2009@rate_code,",
						"          pickup_location_id,",
						"          dropoff_location_id,",
						"          pickup_longitude = Start_Lon,",
						"          pickup_latitude = Start_Lat,",
						"          dropoff_longitude = End_Lon,",
						"          dropoff_latitude = End_Lat,",
						"          passenger_count = DriftYellowTaxi2009@passenger_count,",
						"          trip_distance = Trip_Distance,",
						"          fare_amount = Fare_Amt,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount = Tip_Amt,",
						"          tolls_amount = Tolls_Amt,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount = Total_Amt,",
						"          payment_type = Payment_Type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2009",
						"StagingYellowTaxi20100203 derive(pickup_location_id = toLong('0'),",
						"          dropoff_location_id = toLong('0'),",
						"          pickup_datetime = toTimestamp(pickup_datetime),",
						"          dropoff_datetime = toTimestamp(dropoff_datetime),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          rate_code = toDouble(byName('rate_code')),",
						"          ehail_fee = toInteger('0'),",
						"          improvement_surcharge = toDouble('0'),",
						"          congestion_surcharge = toDouble('0'),",
						"          trip_type = toDouble('0'),",
						"          extra = toDouble('0'),",
						"          airport_fee = toDouble('0')) ~> DriftYellowTaxi20100203",
						"DriftYellowTaxi20100203 derive(trip_year = toInteger(left(toString(pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi20100203",
						"DerivedYellowTaxi20100203 select(mapColumn(",
						"          vendor_id,",
						"          pickup_datetime,",
						"          dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = rate_code,",
						"          pickup_location_id,",
						"          dropoff_location_id,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi20100203",
						"StagingYellowTaxi20110103 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type)) ~> DriftYellowTaxi20110103",
						"DriftYellowTaxi20110103 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi20110103",
						"DerivedYellowTaxi20110103 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi20110103@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi20110103",
						"StagingYellowTaxi2011Non0103 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          congestion_surcharge = toDouble(congestion_surcharge),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi2011Non0103",
						"DriftYellowTaxi2011Non0103 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi2011Non0103",
						"DerivedYellowTaxi2011Non0103 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi2011Non0103@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2011Non0103",
						"StagingYellowTaxi2012Non12 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          congestion_surcharge = toDouble(congestion_surcharge),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi2012Non12",
						"StagingYellowTaxi201212 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi201212",
						"DriftYellowTaxi2012Non12 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi2012Non12",
						"DriftYellowTaxi201212 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi201212",
						"DerivedYellowTaxi2012Non12 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi2012Non12@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2012Non12",
						"DerivedYellowTaxi201212 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi201212@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi201212",
						"StagingYellowTaxi2013Non05 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          congestion_surcharge = toDouble(congestion_surcharge),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi2013Non05",
						"StagingYellowTaxi201305 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi201305",
						"DriftYellowTaxi2013Non05 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi2013Non05",
						"DriftYellowTaxi201305 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi201305",
						"DerivedYellowTaxi2013Non05 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi2013Non05@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2013Non05",
						"DerivedYellowTaxi201305 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi201305@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi201305",
						"StagingYellowTaxi201401 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi201401",
						"StagingYellowTaxi2014Non0108 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          congestion_surcharge = toDouble(congestion_surcharge),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi2014Non0108",
						"StagingYellowTaxi201408 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          improvement_surcharge = toDouble(improvement_surcharge),",
						"          congestion_surcharge = toDouble(congestion_surcharge),",
						"          payment_type = toString(payment_type),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi201408",
						"StagingYellowTaxi2015 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          congestion_surcharge = toDouble(congestion_surcharge),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi2015",
						"DriftYellowTaxi201401 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi201401",
						"DriftYellowTaxi2014Non0108 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi2014Non0108",
						"DriftYellowTaxi201408 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi201408",
						"DriftYellowTaxi2015 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi2015",
						"DerivedYellowTaxi201401 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi201401@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi201401",
						"DerivedYellowTaxi2014Non0108 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi2014Non0108@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2014Non0108",
						"DerivedYellowTaxi201408 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi201408@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi201408",
						"DerivedYellowTaxi2015 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi2015@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2015",
						"StagingYellowTaxi2016 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          congestion_surcharge = toDouble(congestion_surcharge),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi2016",
						"StagingYellowTaxi2017 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          congestion_surcharge = toDouble(congestion_surcharge),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi2017",
						"StagingYellowTaxi201801 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type)) ~> DriftYellowTaxi201801",
						"StagingYellowTaxi201802To05 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          congestion_surcharge = toDouble(congestion_surcharge),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi201802To06",
						"DriftYellowTaxi2016 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi2016",
						"DriftYellowTaxi2017 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi2017",
						"DriftYellowTaxi201801 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi201801",
						"DriftYellowTaxi201802To06 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi201802To06",
						"DerivedYellowTaxi2016 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi2016@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2016",
						"DerivedYellowTaxi2017 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi2017@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2017",
						"DerivedYellowTaxi201801 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi201801@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi201801",
						"DerivedYellowTaxi201802To06 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi201802To06@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi201802To06",
						"StagingYellowTaxi201807081012 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          congestion_surcharge = toDouble(congestion_surcharge),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi201807081012",
						"StagingYellowTaxi20180911 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi20180911",
						"StagingYellowTaxi2019 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          airport_fee = toDouble(airport_fee),",
						"          payment_type = toString(payment_type)) ~> DriftYellowTaxi2019",
						"StagingYellowTaxi202001To07And10 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi202001To07And10",
						"DriftYellowTaxi201807081012 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi201807081012",
						"DriftYellowTaxi20180911 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi20180911",
						"DriftYellowTaxi2019 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi2019",
						"DriftYellowTaxi202001To07And10 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi202001To07And10",
						"DerivedYellowTaxi201807081012 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi201807081012@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi201807081012",
						"DerivedYellowTaxi20180911 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi20180911@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi20180911",
						"DerivedYellowTaxi2019 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi2019@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2019",
						"DerivedYellowTaxi202001To07And10 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi202001To07And10@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi202001To07And10",
						"StagingYellowTaxi202008091112 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type)) ~> DriftYellowTaxi202008091112",
						"StagingYellowTaxi2021And2022 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type)) ~> DriftYellowTaxi2021And2022",
						"DriftYellowTaxi202008091112 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi202008091112",
						"DriftYellowTaxi2021And2022 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi2021And2022",
						"DerivedYellowTaxi202008091112 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi202008091112@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi202008091112",
						"DerivedYellowTaxi2021And2022 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi2021And2022@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi2021And2022",
						"StagingYellowTaxi201806 derive(pickup_longitude = toDouble('0'),",
						"          pickup_latitude = toDouble('0'),",
						"          dropoff_longitude = toDouble('0'),",
						"          dropoff_latitude = toDouble('0'),",
						"          passenger_count = toDouble(byName('passenger_count')),",
						"          RateCodeID = toDouble(byName('RatecodeID')),",
						"          ehail_fee = toInteger('0'),",
						"          trip_type = toDouble('0'),",
						"          VendorID = toString(byName('VendorID')),",
						"          surcharge = toDouble('0'),",
						"          payment_type = toString(payment_type),",
						"          airport_fee = toDouble(airport_fee)) ~> DriftYellowTaxi201806",
						"DriftYellowTaxi201806 derive(trip_year = toInteger(left(toString(tpep_pickup_datetime),4)),",
						"          trip_month = toInteger(substring(toString(tpep_pickup_datetime), 6, 2)),",
						"          taxi_type = 'yellow') ~> DerivedYellowTaxi201806",
						"DerivedYellowTaxi201806 select(mapColumn(",
						"          vendor_id = VendorID,",
						"          pickup_datetime = tpep_pickup_datetime,",
						"          dropoff_datetime = tpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          rate_code_id = DriftYellowTaxi201806@RateCodeID,",
						"          pickup_location_id = PULocationID,",
						"          dropoff_location_id = DOLocationID,",
						"          pickup_longitude,",
						"          pickup_latitude,",
						"          dropoff_longitude,",
						"          dropoff_latitude,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          surcharge,",
						"          airport_fee,",
						"          trip_year,",
						"          trip_month,",
						"          taxi_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYellowTaxi201806",
						"SelectYellowTaxi2009 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2009",
						"SelectYellowTaxi2010Non0203 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2010Non0203",
						"SelectYellowTaxi20100203 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi20100203",
						"SelectYellowTaxi20110103 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi20110103",
						"SelectYellowTaxi2011Non0103 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2011Non0103",
						"SelectYellowTaxi2012Non12 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2012Non12",
						"SelectYellowTaxi201212 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi201212",
						"SelectYellowTaxi2013Non05 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2013Non05",
						"SelectYellowTaxi201305 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi201305",
						"SelectYellowTaxi201401 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi201401",
						"SelectYellowTaxi2014Non0108 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2014Non0108",
						"SelectYellowTaxi201408 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi201408",
						"SelectYellowTaxi2015 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2015",
						"SelectYellowTaxi2016 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2016",
						"SelectYellowTaxi2017 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2017",
						"SelectYellowTaxi201801 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi201801",
						"SelectYellowTaxi201802To06 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi201802To06",
						"SelectYellowTaxi201807081012 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi201807081012",
						"SelectYellowTaxi20180911 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi20180911",
						"SelectYellowTaxi2019 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2019",
						"SelectYellowTaxi202001To07And10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi202001To07And10",
						"SelectYellowTaxi202008091112 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi202008091112",
						"SelectYellowTaxi2021And2022 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi2021And2022",
						"SelectYellowTaxi201806 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          trip_year,",
						"          trip_month",
						"     )) ~> PersistYellowTaxi201806"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2009')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2010non0203')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds20100203')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds20110103')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2011Non0103')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2012non12')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds201212')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2013non05')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds201305')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds201401')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2014non0108')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds201408')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2015')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2016')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2017')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds201801')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds201802to05')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds201806')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds201807081012')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds20180911')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2019')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds202001to07and10')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds202008091112')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxistageyellowds2021and2022')]",
				"[concat(variables('workspaceId'), '/datasets/1_nyctaxirawyellowds')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_asa_writecampaignanalyticstoasa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/02_otherdata"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "2_asa_campaign_analytics_source",
								"type": "DatasetReference"
							},
							"name": "CampaignAnalytics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "2_asa_wwi_campaign_analytics_asa",
								"type": "DatasetReference"
							},
							"name": "CampaignAnalyticsASA"
						}
					],
					"transformations": [
						{
							"name": "MapCampaignAnalytics"
						},
						{
							"name": "ConvertColumnTypesAndValues"
						},
						{
							"name": "SelectCampaignAnalyticsColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {_col0_} as string,",
						"          {_col1_} as string,",
						"          {_col2_} as string,",
						"          {_col3_} as string,",
						"          {_col4_} as string,",
						"          {_col5_} as double,",
						"          {_col6_} as string,",
						"          {_col7_} as double,",
						"          {_col8_} as string,",
						"          {_col9_} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     skipLines: 1) ~> CampaignAnalytics",
						"CampaignAnalytics select(mapColumn(",
						"          Region = {_col0_},",
						"          Country = {_col1_},",
						"          ProductCategory = {_col2_},",
						"          CampaignName = {_col3_},",
						"          RevenuePart1 = {_col4_},",
						"          Revenue = {_col5_},",
						"          RevenueTargetPart1 = {_col6_},",
						"          RevenueTarget = {_col7_},",
						"          City = {_col8_},",
						"          State = {_col9_}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MapCampaignAnalytics",
						"MapCampaignAnalytics derive(Revenue = toDecimal(replace(concat(toString(RevenuePart1), toString(Revenue)), '\\\\', ''), 10, 2, '$###,###.##'),",
						"          RevenueTarget = toDecimal(replace(concat(toString(RevenueTargetPart1), toString(RevenueTarget)), '\\\\', ''), 10, 2, '$###,###.##')) ~> ConvertColumnTypesAndValues",
						"ConvertColumnTypesAndValues select(mapColumn(",
						"          Region,",
						"          Country,",
						"          ProductCategory,",
						"          CampaignName,",
						"          Revenue,",
						"          RevenueTarget,",
						"          City,",
						"          State",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCampaignAnalyticsColumns",
						"SelectCampaignAnalyticsColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Region as string,",
						"          Country as string,",
						"          ProductCategory as string,",
						"          CampaignName as string,",
						"          Revenue as decimal(10,2),",
						"          RevenueTarget as decimal(10,2),",
						"          City as string,",
						"          State as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CampaignAnalyticsASA"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/2_asa_campaign_analytics_source')]",
				"[concat(variables('workspaceId'), '/datasets/2_asa_wwi_campaign_analytics_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_asal_writeuserprofiledatatoasa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/02_otherdata"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "2_asa_ecommerce_userprofiles_source",
								"type": "DatasetReference"
							},
							"name": "EcommerceUserProfiles"
						},
						{
							"dataset": {
								"referenceName": "2_customer_profile_cosmosdb",
								"type": "DatasetReference"
							},
							"name": "UserProfiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "2_asa_wwi_usertopproductpurchases_asa",
								"type": "DatasetReference"
							},
							"name": "UserTopProductPurchasesASA"
						}
					],
					"transformations": [
						{
							"name": "userId"
						},
						{
							"name": "UserTopProducts"
						},
						{
							"name": "DeriveProductColumns"
						},
						{
							"name": "UserPreferredProducts"
						},
						{
							"name": "JoinTopProductsWithPreferredProducts"
						},
						{
							"name": "DerivedColumnsForMerge"
						},
						{
							"name": "FilterNullProduct"
						}
					],
					"scriptLines": [
						"source(output(",
						"          visitorId as integer,",
						"          topProductPurchases as (productId as integer, itemsPurchasedLast12Months as integer)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments',",
						"     wildcardPaths:['online-user-profiles-02/*.json']) ~> EcommerceUserProfiles",
						"source(output(",
						"          cartId as string,",
						"          preferredProducts as integer[],",
						"          productReviews as (productId as integer, reviewDate as string, reviewText as string)[],",
						"          userId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'document') ~> UserProfiles",
						"EcommerceUserProfiles derive(visitorId = toInteger(visitorId)) ~> userId",
						"userId foldDown(unroll(topProductPurchases),",
						"     mapColumn(",
						"          visitorId,",
						"          productId = topProductPurchases.productId,",
						"          itemsPurchasedLast12Months = topProductPurchases.itemsPurchasedLast12Months",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> UserTopProducts",
						"UserTopProducts derive(itemsPurchasedLast12Months = toInteger(itemsPurchasedLast12Months)) ~> DeriveProductColumns",
						"UserProfiles foldDown(unroll(preferredProducts),",
						"     mapColumn(",
						"          preferredProductId = preferredProducts,",
						"          userId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> UserPreferredProducts",
						"DeriveProductColumns, UserPreferredProducts join(visitorId == userId,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 30,",
						"          productId",
						"     ),",
						"     broadcast: 'left')~> JoinTopProductsWithPreferredProducts",
						"JoinTopProductsWithPreferredProducts derive(isTopProduct = toBoolean(iif(isNull(productId), 'false', 'true')),",
						"          isPreferredProduct = toBoolean(iif(isNull(preferredProductId), 'false', 'true')),",
						"          productId = iif(isNull(productId), preferredProductId, productId),",
						"          userId = iif(isNull(userId), visitorId, userId)) ~> DerivedColumnsForMerge",
						"DerivedColumnsForMerge filter(!isNull(productId)) ~> FilterNullProduct",
						"FilterNullProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          UserId as integer,",
						"          ProductId as integer,",
						"          ItemsPurchasedLast12Months as integer,",
						"          IsTopProduct as boolean,",
						"          IsPreferredProduct as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          UserId = userId,",
						"          ProductId = productId,",
						"          ItemsPurchasedLast12Months = itemsPurchasedLast12Months,",
						"          IsTopProduct = isTopProduct,",
						"          IsPreferredProduct = isPreferredProduct",
						"     )) ~> UserTopProductPurchasesASA"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/2_asa_ecommerce_userprofiles_source')]",
				"[concat(variables('workspaceId'), '/datasets/2_customer_profile_cosmosdb')]",
				"[concat(variables('workspaceId'), '/datasets/2_asa_wwi_usertopproductpurchases_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nycrawtocuratedgreentaxidf')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NycTaxi/2_RawToCurated"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "2_nycrawgreentaxi",
								"type": "DatasetReference"
							},
							"name": "RawGreenTaxi"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawpaymenttype",
								"type": "DatasetReference"
							},
							"name": "RawPaymentType"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawratecode",
								"type": "DatasetReference"
							},
							"name": "RawRateCode"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawtaxizone",
								"type": "DatasetReference"
							},
							"name": "RawTaxiZone"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawvendor",
								"type": "DatasetReference"
							},
							"name": "RawVendor"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawtriptype",
								"type": "DatasetReference"
							},
							"name": "RawTripType"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawtripmonth",
								"type": "DatasetReference"
							},
							"name": "RawTripMonth"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "dataaicurateddls",
								"type": "LinkedServiceReference"
							},
							"name": "SinkToCuratedZone"
						}
					],
					"transformations": [
						{
							"name": "SelectGreenTaxiColumns",
							"description": "Select deduped trips"
						},
						{
							"name": "DerivedColumnsGreenTaxi",
							"description": "Add derived columns + columns with literal values"
						},
						{
							"name": "JoinWithPaymentType"
						},
						{
							"name": "JoinWithRateZone"
						},
						{
							"name": "JoinWithTaxiZoneForPickup"
						},
						{
							"name": "ReorderAndRenamePickupZone"
						},
						{
							"name": "JoinWithTaxiZoneForDropOff"
						},
						{
							"name": "ReorderAndRenameDropoffZone"
						},
						{
							"name": "JoinWithVendor"
						},
						{
							"name": "FinalColumnList"
						},
						{
							"name": "JoinWithTripType"
						},
						{
							"name": "JoinWithTripMonth"
						}
					],
					"script": "source(output(\n\t\tvendor_id as long,\n\t\tpickup_datetime as timestamp,\n\t\tdropoff_datetime as timestamp,\n\t\tstore_and_fwd_flag as string,\n\t\trate_code_id as double,\n\t\tpickup_location_id as long,\n\t\tdropoff_location_id as long,\n\t\tpassenger_count as double,\n\t\ttrip_distance as double,\n\t\tfare_amount as double,\n\t\textra as double,\n\t\tmta_tax as double,\n\t\ttip_amount as double,\n\t\ttolls_amount as double,\n\t\tehail_fee as integer,\n\t\timprovement_surcharge as double,\n\t\ttotal_amount as double,\n\t\tpayment_type as double,\n\t\ttrip_type as double,\n\t\tcongestion_surcharge as double,\n\t\ttaxi_type as string,\n\t\ttrip_year as integer,\n\t\ttrip_month as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'dataset_file_nm',\n\tformat: 'parquet',\n\twildcardPaths:['nyctaxi-raw-df/transactions/green-taxi/*/*/*.parquet']) ~> RawGreenTaxi\nsource(output(\n\t\tpayment_type as short,\n\t\tabbreviation as string,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawPaymentType\nsource(output(\n\t\trate_code_id as short,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawRateCode\nsource(output(\n\t\tLocationID as string,\n\t\tBorough as string,\n\t\tZone as string,\n\t\tservice_zone as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawTaxiZone\nsource(output(\n\t\tvendor_id as short,\n\t\tabbreviation as string,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawVendor\nsource(output(\n\t\ttrip_type as integer,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawTripType\nsource(output(\n\t\ttrip_month as string,\n\t\tmonth_name_short as string,\n\t\tmonth_name_full as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawTripMonth\nRawGreenTaxi select(mapColumn(\n\t\tvendor_id,\n\t\tpickup_datetime,\n\t\tdropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\trate_code_id,\n\t\tpickup_location_id,\n\t\tdropoff_location_id,\n\t\tpassenger_count,\n\t\ttrip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type,\n\t\ttrip_type,\n\t\tcongestion_surcharge,\n\t\ttrip_year,\n\t\ttrip_month,\n\t\ttaxi_type,\n\t\tdataset_file_nm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectGreenTaxiColumns\nSelectGreenTaxiColumns derive(pickup_year = year(pickup_datetime),\n\t\tpickup_month = month(pickup_datetime),\n\t\tpickup_day = dayOfWeek(pickup_datetime),\n\t\tpickup_hour = hour(pickup_datetime),\n\t\tpickup_minute = minute(pickup_datetime),\n\t\tpickup_second = second(pickup_datetime),\n\t\tdropoff_year = year(dropoff_datetime),\n\t\tdropoff_month = month(dropoff_datetime),\n\t\tdropoff_day = dayOfWeek(dropoff_datetime),\n\t\tdropoff_hour = hour(dropoff_datetime),\n\t\tdropoff_minute = minute(dropoff_datetime),\n\t\tdropoff_second = second(dropoff_datetime),\n\t\ttrip_year = toInteger(left(toString(pickup_datetime),4)),\n\t\ttrip_month = toInteger(substring(toString(pickup_datetime), 6, 2))) ~> DerivedColumnsGreenTaxi\nDerivedColumnsGreenTaxi, RawPaymentType join(SelectGreenTaxiColumns@payment_type == RawPaymentType@payment_type,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithPaymentType\nJoinWithTripMonth, RawRateCode join(SelectGreenTaxiColumns@rate_code_id == RawRateCode@rate_code_id,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithRateZone\nJoinWithRateZone, RawTaxiZone join(pickup_location_id == toInteger(LocationID),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithTaxiZoneForPickup\nJoinWithTaxiZoneForPickup select(mapColumn(\n\t\tvendor_id,\n\t\tpickup_datetime,\n\t\tdropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\trate_code_id = SelectGreenTaxiColumns@rate_code_id,\n\t\tpickup_location_id,\n\t\tdropoff_location_id,\n\t\tpassenger_count,\n\t\ttrip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type = SelectGreenTaxiColumns@payment_type,\n\t\ttrip_type = SelectGreenTaxiColumns@trip_type,\n\t\tcongestion_surcharge,\n\t\tdataset_file_nm,\n\t\ttrip_year,\n\t\ttrip_month = DerivedColumnsGreenTaxi@trip_month,\n\t\ttaxi_type,\n\t\tpickup_year,\n\t\tpickup_month,\n\t\tpickup_day,\n\t\tpickup_hour,\n\t\tpickup_minute,\n\t\tpickup_second,\n\t\tdropoff_year,\n\t\tdropoff_month,\n\t\tdropoff_day,\n\t\tdropoff_hour,\n\t\tdropoff_minute,\n\t\tdropoff_second,\n\t\tpayment_type_description = RawPaymentType@description,\n\t\trate_code_description = RawRateCode@description,\n\t\tpickup_borough = Borough,\n\t\tpickup_zone = Zone,\n\t\tpickup_service_zone = service_zone,\n\t\tmonth_name_short,\n\t\tmonth_name_full,\n\t\ttrip_type_description = RawTripType@description\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ReorderAndRenamePickupZone\nReorderAndRenamePickupZone, RawTaxiZone join(dropoff_location_id == toInteger(LocationID),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithTaxiZoneForDropOff\nJoinWithTaxiZoneForDropOff select(mapColumn(\n\t\tvendor_id,\n\t\tpickup_datetime,\n\t\tdropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\trate_code_id,\n\t\tpickup_location_id,\n\t\tdropoff_location_id,\n\t\tpassenger_count,\n\t\ttrip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type,\n\t\ttrip_type,\n\t\tcongestion_surcharge,\n\t\ttrip_year,\n\t\ttrip_month,\n\t\ttaxi_type,\n\t\tdataset_file_nm,\n\t\tpickup_year,\n\t\tpickup_month,\n\t\tpickup_day,\n\t\tpickup_hour,\n\t\tpickup_minute,\n\t\tpickup_second,\n\t\tdropoff_year,\n\t\tdropoff_month,\n\t\tdropoff_day,\n\t\tdropoff_hour,\n\t\tdropoff_minute,\n\t\tdropoff_second,\n\t\tpayment_type_description,\n\t\trate_code_description,\n\t\tpickup_borough,\n\t\tpickup_zone,\n\t\tpickup_service_zone,\n\t\tdropoff_borough = Borough,\n\t\tdropoff_zone = Zone,\n\t\tdropoff_service_zone = service_zone,\n\t\tmonth_name_short,\n\t\tmonth_name_full,\n\t\ttrip_type_description\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ReorderAndRenameDropoffZone\nReorderAndRenameDropoffZone, RawVendor join(ReorderAndRenameDropoffZone@vendor_id == RawVendor@vendor_id,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithVendor\nJoinWithVendor select(mapColumn(\n\t\tvendor_id = ReorderAndRenameDropoffZone@vendor_id,\n\t\tpickup_datetime,\n\t\tdropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\trate_code_id,\n\t\tpickup_location_id,\n\t\tdropoff_location_id,\n\t\tpassenger_count,\n\t\ttrip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type,\n\t\ttrip_type,\n\t\tcongestion_surcharge,\n\t\tvendor_abbreviation = abbreviation,\n\t\tvendor_description = description,\n\t\ttrip_type_description,\n\t\tmonth_name_short,\n\t\tmonth_name_full,\n\t\tpayment_type_description,\n\t\trate_code_description,\n\t\tpickup_borough,\n\t\tpickup_zone,\n\t\tpickup_service_zone,\n\t\tdropoff_borough,\n\t\tdropoff_zone,\n\t\tdropoff_service_zone,\n\t\tpickup_year,\n\t\tpickup_month,\n\t\tpickup_day,\n\t\tpickup_hour,\n\t\tpickup_minute,\n\t\tpickup_second,\n\t\tdropoff_year,\n\t\tdropoff_month,\n\t\tdropoff_day,\n\t\tdropoff_hour,\n\t\tdropoff_minute,\n\t\tdropoff_second,\n\t\ttrip_year,\n\t\ttrip_month,\n\t\ttaxi_type,\n\t\tdataset_file_nm\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalColumnList\nJoinWithPaymentType, RawTripType join(SelectGreenTaxiColumns@trip_type == RawTripType@trip_type,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinWithTripType\nJoinWithTripType, RawTripMonth join(DerivedColumnsGreenTaxi@trip_month == toInteger(RawTripMonth@trip_month),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinWithTripMonth\nFinalColumnList sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'nyctaxi',\n\tfolderPath: 'nyctaxi-curated-df/transactions/green-taxi',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tpartitionBy('key',\n\t\t0,\n\t\ttrip_year,\n\t\ttrip_month\n\t)) ~> SinkToCuratedZone"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/2_nycrawgreentaxi')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawpaymenttype')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawratecode')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawtaxizone')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawvendor')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawtriptype')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawtripmonth')]",
				"[concat(variables('workspaceId'), '/linkedServices/dataaicurateddls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_nycrawtocuratedyellowtaxidf')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NycTaxi/2_RawToCurated"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "2_nycrawyellowtaxi",
								"type": "DatasetReference"
							},
							"name": "RawYellowTaxi"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawpaymenttype",
								"type": "DatasetReference"
							},
							"name": "RawPaymentType"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawratecode",
								"type": "DatasetReference"
							},
							"name": "RawRateCode"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawtaxizone",
								"type": "DatasetReference"
							},
							"name": "RawTaxiZone"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawvendor",
								"type": "DatasetReference"
							},
							"name": "RawVendor"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawtriptype",
								"type": "DatasetReference"
							},
							"name": "RawTripType"
						},
						{
							"dataset": {
								"referenceName": "2_nycrawtripmonth",
								"type": "DatasetReference"
							},
							"name": "RawTripMonth"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "dataaicurateddls",
								"type": "LinkedServiceReference"
							},
							"name": "SinkToCuratedZone"
						}
					],
					"transformations": [
						{
							"name": "SelectYellowTaxiColumns",
							"description": "Select deduped trips"
						},
						{
							"name": "DerivedColumnsYellowTaxi",
							"description": "Add derived columns + columns with literal values"
						},
						{
							"name": "JoinWithPaymentType"
						},
						{
							"name": "JoinWithRateZone"
						},
						{
							"name": "JoinWithTaxiZoneForPickup"
						},
						{
							"name": "ReorderAndRenamePickupZone"
						},
						{
							"name": "JoinWithTaxiZoneForDropOff"
						},
						{
							"name": "ReorderAndRenameDropoffZone"
						},
						{
							"name": "JoinWithVendor"
						},
						{
							"name": "FinalColumnList"
						},
						{
							"name": "JoinWithTripType"
						},
						{
							"name": "JoinWithTripMonth"
						}
					],
					"script": "source(output(\n\t\tvendor_id as string,\n\t\tpickup_datetime as timestamp,\n\t\tdropoff_datetime as timestamp,\n\t\tstore_and_fwd_flag as string,\n\t\trate_code_id as double,\n\t\tpickup_location_id as long,\n\t\tdropoff_location_id as long,\n\t\tpickup_longitude as double,\n\t\tpickup_latitude as double,\n\t\tdropoff_longitude as double,\n\t\tdropoff_latitude as double,\n\t\tpassenger_count as double,\n\t\ttrip_distance as double,\n\t\tfare_amount as double,\n\t\textra as double,\n\t\tmta_tax as double,\n\t\ttip_amount as double,\n\t\ttolls_amount as double,\n\t\tehail_fee as integer,\n\t\timprovement_surcharge as double,\n\t\ttotal_amount as double,\n\t\tpayment_type as string,\n\t\ttrip_type as double,\n\t\tcongestion_surcharge as double,\n\t\tsurcharge as double,\n\t\tairport_fee as double,\n\t\ttaxi_type as string,\n\t\ttrip_year as string,\n\t\ttrip_month as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'dataset_file_nm',\n\tformat: 'parquet',\n\twildcardPaths:['nyctaxi-raw-df/transactions/yellow-taxi/*/*/*.parquet']) ~> RawYellowTaxi\nsource(output(\n\t\tpayment_type as short,\n\t\tabbreviation as string,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawPaymentType\nsource(output(\n\t\trate_code_id as short,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawRateCode\nsource(output(\n\t\tLocationID as string,\n\t\tBorough as string,\n\t\tZone as string,\n\t\tservice_zone as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawTaxiZone\nsource(output(\n\t\tvendor_id as short,\n\t\tabbreviation as string,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawVendor\nsource(output(\n\t\ttrip_type as integer,\n\t\tdescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawTripType\nsource(output(\n\t\ttrip_month as string,\n\t\tmonth_name_short as string,\n\t\tmonth_name_full as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> RawTripMonth\nRawYellowTaxi select(mapColumn(\n\t\tvendor_id,\n\t\tpickup_datetime,\n\t\tdropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\trate_code_id,\n\t\tpickup_location_id,\n\t\tdropoff_location_id,\n\t\tpassenger_count,\n\t\ttrip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type,\n\t\ttrip_type,\n\t\tcongestion_surcharge,\n\t\ttrip_year,\n\t\ttrip_month,\n\t\ttaxi_type,\n\t\tdataset_file_nm,\n\t\tairport_fee,\n\t\tsurcharge,\n\t\tpickup_longitude,\n\t\tpickup_latitude,\n\t\tdropoff_longitude,\n\t\tdropoff_latitude\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectYellowTaxiColumns\nSelectYellowTaxiColumns derive(pickup_year = year(pickup_datetime),\n\t\tpickup_month = month(pickup_datetime),\n\t\tpickup_day = dayOfWeek(pickup_datetime),\n\t\tpickup_hour = hour(pickup_datetime),\n\t\tpickup_minute = minute(pickup_datetime),\n\t\tpickup_second = second(pickup_datetime),\n\t\tdropoff_year = year(dropoff_datetime),\n\t\tdropoff_month = month(dropoff_datetime),\n\t\tdropoff_day = dayOfWeek(dropoff_datetime),\n\t\tdropoff_hour = hour(dropoff_datetime),\n\t\tdropoff_minute = minute(dropoff_datetime),\n\t\tdropoff_second = second(dropoff_datetime),\n\t\ttrip_year = substring(dataset_file_nm,(instr(dataset_file_nm, 'trip_year=')+10),4),\n\t\ttrip_month = replace(substring(dataset_file_nm,(instr(dataset_file_nm, 'trip_month=')+11),2), '/', '')) ~> DerivedColumnsYellowTaxi\nDerivedColumnsYellowTaxi, RawPaymentType join(SelectYellowTaxiColumns@payment_type == toString(RawPaymentType@payment_type),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithPaymentType\nJoinWithTripMonth, RawRateCode join(SelectYellowTaxiColumns@rate_code_id == RawRateCode@rate_code_id,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithRateZone\nJoinWithRateZone, RawTaxiZone join(pickup_location_id == toInteger(LocationID),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithTaxiZoneForPickup\nJoinWithTaxiZoneForPickup select(mapColumn(\n\t\tvendor_id,\n\t\tpickup_datetime,\n\t\tdropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\trate_code_id = SelectYellowTaxiColumns@rate_code_id,\n\t\tpickup_location_id,\n\t\tdropoff_location_id,\n\t\tpassenger_count,\n\t\ttrip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type = SelectYellowTaxiColumns@payment_type,\n\t\ttrip_type = SelectYellowTaxiColumns@trip_type,\n\t\tcongestion_surcharge,\n\t\tdataset_file_nm,\n\t\ttrip_year,\n\t\ttrip_month = DerivedColumnsYellowTaxi@trip_month,\n\t\ttaxi_type,\n\t\tpickup_year,\n\t\tpickup_month,\n\t\tpickup_day,\n\t\tpickup_hour,\n\t\tpickup_minute,\n\t\tpickup_second,\n\t\tdropoff_year,\n\t\tdropoff_month,\n\t\tdropoff_day,\n\t\tdropoff_hour,\n\t\tdropoff_minute,\n\t\tdropoff_second,\n\t\tpayment_type_description = RawPaymentType@description,\n\t\trate_code_description = RawRateCode@description,\n\t\tpickup_borough = Borough,\n\t\tpickup_zone = Zone,\n\t\tpickup_service_zone = service_zone,\n\t\tmonth_name_short,\n\t\tmonth_name_full,\n\t\ttrip_type_description = RawTripType@description,\n\t\tsurcharge,\n\t\tairport_fee,\n\t\tpickup_longitude,\n\t\tpickup_latitude,\n\t\tdropoff_longitude,\n\t\tdropoff_latitude,\n\t\tLocationID,\n\t\tabbreviation\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ReorderAndRenamePickupZone\nReorderAndRenamePickupZone, RawTaxiZone join(dropoff_location_id == toInteger(RawTaxiZone@LocationID),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithTaxiZoneForDropOff\nJoinWithTaxiZoneForDropOff select(mapColumn(\n\t\tvendor_id,\n\t\tpickup_datetime,\n\t\tdropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\trate_code_id,\n\t\tpickup_location_id,\n\t\tdropoff_location_id,\n\t\tpassenger_count,\n\t\ttrip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type,\n\t\ttrip_type,\n\t\tcongestion_surcharge,\n\t\ttrip_year,\n\t\ttrip_month,\n\t\ttaxi_type,\n\t\tdataset_file_nm,\n\t\tpickup_year,\n\t\tpickup_month,\n\t\tpickup_day,\n\t\tpickup_hour,\n\t\tpickup_minute,\n\t\tpickup_second,\n\t\tdropoff_year,\n\t\tdropoff_month,\n\t\tdropoff_day,\n\t\tdropoff_hour,\n\t\tdropoff_minute,\n\t\tdropoff_second,\n\t\tpayment_type_description,\n\t\trate_code_description,\n\t\tpickup_borough,\n\t\tpickup_zone,\n\t\tpickup_service_zone,\n\t\tdropoff_borough = Borough,\n\t\tdropoff_zone = Zone,\n\t\tdropoff_service_zone = service_zone,\n\t\tmonth_name_short,\n\t\tmonth_name_full,\n\t\ttrip_type_description,\n\t\tabbreviation,\n\t\tdropoff_longitude,\n\t\tdropoff_latitude,\n\t\tpickup_longitude,\n\t\tpickup_latitude,\n\t\tairport_fee,\n\t\tsurcharge\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ReorderAndRenameDropoffZone\nReorderAndRenameDropoffZone, RawVendor join(ReorderAndRenameDropoffZone@vendor_id == toString(RawVendor@vendor_id),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithVendor\nJoinWithVendor select(mapColumn(\n\t\tvendor_id = ReorderAndRenameDropoffZone@vendor_id,\n\t\tpickup_datetime,\n\t\tdropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\trate_code_id,\n\t\tpickup_location_id,\n\t\tdropoff_location_id,\n\t\tpickup_longitude,\n\t\tpickup_latitude,\n\t\tdropoff_longitude,\n\t\tdropoff_latitude,\n\t\tpassenger_count,\n\t\ttrip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type,\n\t\ttrip_type,\n\t\tcongestion_surcharge,\n\t\tsurcharge,\n\t\tairport_fee,\n\t\tvendor_abbreviation = RawVendor@abbreviation,\n\t\tvendor_description = description,\n\t\ttrip_type_description,\n\t\tmonth_name_short,\n\t\tmonth_name_full,\n\t\tpayment_type_description,\n\t\trate_code_description,\n\t\tpickup_borough,\n\t\tpickup_zone,\n\t\tpickup_service_zone,\n\t\tdropoff_borough,\n\t\tdropoff_zone,\n\t\tdropoff_service_zone,\n\t\tpickup_year,\n\t\tpickup_month,\n\t\tpickup_day,\n\t\tpickup_hour,\n\t\tpickup_minute,\n\t\tpickup_second,\n\t\tdropoff_year,\n\t\tdropoff_month,\n\t\tdropoff_day,\n\t\tdropoff_hour,\n\t\tdropoff_minute,\n\t\tdropoff_second,\n\t\ttrip_year,\n\t\ttrip_month,\n\t\ttaxi_type,\n\t\tdataset_file_nm\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalColumnList\nJoinWithPaymentType, RawTripType join(SelectYellowTaxiColumns@trip_type == RawTripType@trip_type,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinWithTripType\nJoinWithTripType, RawTripMonth join(toInteger(DerivedColumnsYellowTaxi@trip_month) == toInteger(RawTripMonth@trip_month),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinWithTripMonth\nFinalColumnList sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'nyctaxi',\n\tfolderPath: 'nyctaxi-curated-df/transactions/yellow-taxi',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tpartitionBy('key',\n\t\t0,\n\t\ttrip_year,\n\t\ttrip_month\n\t)) ~> SinkToCuratedZone"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/2_nycrawyellowtaxi')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawpaymenttype')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawratecode')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawtaxizone')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawvendor')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawtriptype')]",
				"[concat(variables('workspaceId'), '/datasets/2_nycrawtripmonth')]",
				"[concat(variables('workspaceId'), '/linkedServices/dataaicurateddls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_nyccuratedtoconsumptiondf')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NycTaxi/3_CuratedToConsumption"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dataaicurateddls",
								"type": "LinkedServiceReference"
							},
							"name": "YellowTaxi"
						},
						{
							"linkedService": {
								"referenceName": "dataaicurateddls",
								"type": "LinkedServiceReference"
							},
							"name": "GreenTaxi"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "dataaicurateddls",
								"type": "LinkedServiceReference"
							},
							"name": "SinkToConsumption"
						}
					],
					"transformations": [
						{
							"name": "DriftYellowTaxi",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "DriftGreenTaxi",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "FinalColumnsGreen"
						},
						{
							"name": "FinalColumnsYellow"
						},
						{
							"name": "UnionYellowGreen"
						},
						{
							"name": "DerivedGreenTaxi"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'nyctaxi',\n\tfolderPath: 'nyctaxi-curated-df/transactions/yellow-taxi') ~> YellowTaxi\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'nyctaxi',\n\tfolderPath: 'nyctaxi-curated-df/transactions/green-taxi') ~> GreenTaxi\nYellowTaxi derive(vendor_id = toString(byName('vendor_id')),\n\t\tpickup_datetime = toTimestamp(byName('pickup_datetime')),\n\t\tdropoff_datetime = toTimestamp(byName('dropoff_datetime')),\n\t\tstore_and_fwd_flag = toString(byName('store_and_fwd_flag')),\n\t\trate_code_id = toDouble(byName('rate_code_id')),\n\t\tpickup_location_id = toInteger(byName('pickup_location_id')),\n\t\tdropoff_location_id = toInteger(byName('dropoff_location_id')),\n\t\tpickup_longitude = toDouble(byName('pickup_longitude')),\n\t\tpickup_latitude = toDouble(byName('pickup_latitude')),\n\t\tdropoff_longitude = toDouble(byName('dropoff_longitude')),\n\t\tdropoff_latitude = toDouble(byName('dropoff_latitude')),\n\t\tpassenger_count = toDouble(byName('passenger_count')),\n\t\ttrip_distance = toDouble(byName('trip_distance')),\n\t\tfare_amount = toDouble(byName('fare_amount')),\n\t\textra = toDouble(byName('extra')),\n\t\tmta_tax = toDouble(byName('mta_tax')),\n\t\ttip_amount = toDouble(byName('tip_amount')),\n\t\ttolls_amount = toDouble(byName('tolls_amount')),\n\t\tehail_fee = toInteger(byName('ehal_fee')),\n\t\timprovement_surcharge = toDouble(byName('improvement_surcharge')),\n\t\ttotal_amount = toDouble(byName('total_amount')),\n\t\tpayment_type = toString(byName('payment_type')),\n\t\ttrip_type = toDouble(byName('trip_type')),\n\t\tcongestion_surcharge = toDouble(byName('congestion_surcharge')),\n\t\tsurcharge = toDouble(byName('surcharge')),\n\t\tairport_fee = toDouble(byName('airport_fee')),\n\t\tvendor_abbreviation = toString(byName('vendor_abbreviation')),\n\t\tvendor_description = toString(byName('vendor_description')),\n\t\ttrip_type_description = toString(byName('trip_type_description')),\n\t\tmonth_name_short = toString(byName('month_name_short')),\n\t\tmonth_name_full = toString(byName('month_name_full')),\n\t\tpayment_type_description = toString(byName('payment_type_description')),\n\t\trate_code_description = toString(byName('rate_code_description')),\n\t\tpickup_borough = toString(byName('pickup_borough')),\n\t\tpickup_zone = toString(byName('pickup_zone')),\n\t\tpickup_service_zone = toString(byName('pickup_service_zone')),\n\t\tdropoff_borough = toString(byName('dropoff_borough')),\n\t\tdropoff_zone = toString(byName('dropoff_zone')),\n\t\tdropoff_service_zone = toString(byName('dropoff_service_zone')),\n\t\tpickup_year = toInteger(byName('pickup_year')),\n\t\tpickup_month = toInteger(byName('pickup_month')),\n\t\tpickup_day = toInteger(byName('pickup_day')),\n\t\tpickup_hour = toInteger(byName('pickup_hour')),\n\t\tpickup_minute = toInteger(byName('pickup_minute')),\n\t\tpickup_second = toInteger(byName('pickup_second')),\n\t\tpickup_date = toDate(byName('pickup_date')),\n\t\tdropoff_year = toInteger(byName('dropoff_year')),\n\t\tdropoff_month = toInteger(byName('dropoff_month')),\n\t\tdropoff_day = toInteger(byName('dropoff_day')),\n\t\tdropoff_hour = toInteger(byName('dropoff_hour')),\n\t\tdropoff_minute = toInteger(byName('dropoff_minute')),\n\t\tdropoff_second = toInteger(byName('dropoff_second')),\n\t\tdropoff_date = toDate(byName('dropoff_date')),\n\t\ttrip_year = toInteger(byName('trip_year')),\n\t\ttrip_month = toInteger(byName('trip_month')),\n\t\ttaxi_type = toString(byName('taxi_type')),\n\t\tdataset_file_nm = toString(byName('dataset_file_nm'))) ~> DriftYellowTaxi\nGreenTaxi derive(taxi_type = toString(byName('taxi_type')),\n\t\tvendor_id = toString(byName('vendor_id')),\n\t\tpickup_datetime = toTimestamp(byName('pickup_datetime')),\n\t\tdropoff_datetime = toTimestamp(byName('dropoff_datetime')),\n\t\tstore_and_fwd_flag = toString(byName('store_and_fwd_flag')),\n\t\trate_code_id = toInteger(byName('rate_code_id')),\n\t\tpickup_location_id = toInteger(byName('pickup_location_id')),\n\t\tdropoff_location_id = toInteger(byName('dropoff_location_id')),\n\t\tpassenger_count = toDouble(byName('passenger_count')),\n\t\ttrip_distance = toDouble(byName('trip_distance')),\n\t\tfare_amount = toDouble(byName('fare_amount')),\n\t\textra = toDouble(byName('extra')),\n\t\tmta_tax = toDouble(byName('mta_tax')),\n\t\ttip_amount = toDouble(byName('tip_amount')),\n\t\ttolls_amount = toDouble(byName('tolls_amount')),\n\t\tehail_fee = toInteger(byName('ehail_fee')),\n\t\timprovement_surcharge = toDouble(byName('improvement_surcharge')),\n\t\ttotal_amount = toDouble(byName('total_amount')),\n\t\tpayment_type = toString(byName('payment_type')),\n\t\ttrip_type = toDouble(byName('trip_type')),\n\t\tvendor_abbreviation = toString(byName('vendor_abbreviation')),\n\t\tvendor_description = toString(byName('vendor_description')),\n\t\ttrip_type_description = toString(byName('trip_type_description')),\n\t\tmonth_name_short = toString(byName('month_name_short')),\n\t\tmonth_name_full = toString(byName('month_name_full')),\n\t\tpayment_type_description = toString(byName('payment_type_description')),\n\t\trate_code_description = toString(byName('rate_code_description')),\n\t\tpickup_borough = toString(byName('pickup_borough')),\n\t\tpickup_zone = toString(byName('pickup_zone')),\n\t\tpickup_service_zone = toString(byName('pickup_service_zone')),\n\t\tdropoff_borough = toString(byName('dropoff_borough')),\n\t\tdropoff_zone = toString(byName('dropoff_zone')),\n\t\tdropoff_service_zone = toString(byName('dropoff_service_zone')),\n\t\tpickup_year = toInteger(byName('pickup_year')),\n\t\tpickup_month = toInteger(byName('pickup_month')),\n\t\tpickup_day = toInteger(byName('pickup_day')),\n\t\tpickup_hour = toInteger(byName('pickup_hour')),\n\t\tpickup_minute = toInteger(byName('pickup_minute')),\n\t\tpickup_second = toInteger(byName('pickup_second')),\n\t\tdropoff_year = toInteger(byName('dropoff_year')),\n\t\tdropoff_month = toInteger(byName('dropoff_month')),\n\t\tdropoff_day = toInteger(byName('dropoff_day')),\n\t\tdropoff_hour = toInteger(byName('dropoff_hour')),\n\t\tdropoff_minute = toInteger(byName('dropoff_minute')),\n\t\tdropoff_second = toInteger(byName('dropoff_second')),\n\t\tdataset_file_nm = toString(byName('dataset_file_nm')),\n\t\ttrip_year = toInteger(byName('trip_year')),\n\t\ttrip_month = toInteger(byName('trip_month')),\n\t\tcongestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi\nDerivedGreenTaxi select(mapColumn(\n\t\tvendor_id,\n\t\tpickup_datetime,\n\t\tdropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\trate_code_id,\n\t\tpickup_location_id,\n\t\tdropoff_location_id,\n\t\tpickup_longitude,\n\t\tpickup_latitude,\n\t\tdropoff_longitude,\n\t\tdropoff_latitude,\n\t\tpassenger_count,\n\t\ttrip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type,\n\t\ttrip_type,\n\t\tcongestion_surcharge,\n\t\tsurcharge,\n\t\tairport_fee,\n\t\tvendor_abbreviation,\n\t\tvendor_description,\n\t\ttrip_type_description,\n\t\tmonth_name_short,\n\t\tmonth_name_full,\n\t\tpayment_type_description,\n\t\trate_code_description,\n\t\tpickup_borough,\n\t\tpickup_zone,\n\t\tpickup_service_zone,\n\t\tdropoff_borough,\n\t\tdropoff_zone,\n\t\tdropoff_service_zone,\n\t\tpickup_year,\n\t\tpickup_month,\n\t\tpickup_day,\n\t\tpickup_hour,\n\t\tpickup_minute,\n\t\tpickup_second,\n\t\tpickup_date,\n\t\tdropoff_year,\n\t\tdropoff_month,\n\t\tdropoff_day,\n\t\tdropoff_hour,\n\t\tdropoff_minute,\n\t\tdropoff_second,\n\t\tdropoff_date,\n\t\ttrip_year,\n\t\ttrip_month,\n\t\ttaxi_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinalColumnsGreen\nDriftYellowTaxi select(mapColumn(\n\t\tvendor_id,\n\t\tpickup_datetime,\n\t\tdropoff_datetime,\n\t\tstore_and_fwd_flag,\n\t\trate_code_id,\n\t\tpickup_location_id,\n\t\tdropoff_location_id,\n\t\tpickup_longitude,\n\t\tpickup_latitude,\n\t\tdropoff_longitude,\n\t\tdropoff_latitude,\n\t\tpassenger_count,\n\t\ttrip_distance,\n\t\tfare_amount,\n\t\textra,\n\t\tmta_tax,\n\t\ttip_amount,\n\t\ttolls_amount,\n\t\tehail_fee,\n\t\timprovement_surcharge,\n\t\ttotal_amount,\n\t\tpayment_type,\n\t\ttrip_type,\n\t\tcongestion_surcharge,\n\t\tsurcharge,\n\t\tairport_fee,\n\t\tvendor_abbreviation,\n\t\tvendor_description,\n\t\ttrip_type_description,\n\t\tmonth_name_short,\n\t\tmonth_name_full,\n\t\tpayment_type_description,\n\t\trate_code_description,\n\t\tpickup_borough,\n\t\tpickup_zone,\n\t\tpickup_service_zone,\n\t\tdropoff_borough,\n\t\tdropoff_zone,\n\t\tdropoff_service_zone,\n\t\tpickup_year,\n\t\tpickup_month,\n\t\tpickup_day,\n\t\tpickup_hour,\n\t\tpickup_minute,\n\t\tpickup_second,\n\t\tpickup_date,\n\t\tdropoff_year,\n\t\tdropoff_month,\n\t\tdropoff_day,\n\t\tdropoff_hour,\n\t\tdropoff_minute,\n\t\tdropoff_second,\n\t\tdropoff_date,\n\t\ttrip_year,\n\t\ttrip_month,\n\t\ttaxi_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinalColumnsYellow\nFinalColumnsYellow, FinalColumnsGreen union(byName: true)~> UnionYellowGreen\nDriftGreenTaxi derive(pickup_longitude = toDouble('0'),\n\t\tpickup_latitude = toDouble('0'),\n\t\tdropoff_longitude = toDouble('0'),\n\t\tdropoff_latitude = toDouble('0'),\n\t\tairport_fee = toDouble('0'),\n\t\tsurcharge = toDouble('0'),\n\t\tpickup_date = toDate(pickup_datetime),\n\t\tdropoff_date = toDate(dropoff_datetime)) ~> DerivedGreenTaxi\nUnionYellowGreen sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'nyctaxi',\n\tfolderPath: 'nyctaxi-consumption-df/transactions/materialized-view',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tpartitionBy('key',\n\t\t0,\n\t\ttaxi_type,\n\t\ttrip_year,\n\t\ttrip_month\n\t)) ~> SinkToConsumption"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataaicurateddls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01 - Explore Open DataSet with SQL Serverless')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets/SQL Serverless"
				},
				"content": {
					"query": "/*\nFull tutorial available on: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql/tutorial-data-analyst\nIn this tutorial, you learn how to perform exploratory data analysis by combining different Azure Open Datasets using serverless SQL pool and then visualizing the results in Azure Synapse Studio.\n\ndataaisynapsewks\n\nIn particular, you analyze the New York City (NYC) Taxi dataset that includes:\n\n - Pickup and drop-off dates and times.\n - Pick up and drop-off locations.\n - Trip distances.\n - Itemized fares.\n - Rate types.\n - Payment types.\n - Driver-reported passenger counts.*/\n\n\n/*\n * * * * * * * * * * * * * * * *\n * Automatic schema inference  *\n * * * * * * * * * * * * * * * *\n\nSince data is stored in the Parquet file format, automatic schema inference is available. You can easily query the data without listing the data types of all columns in the files. You also can use the virtual column mechanism and the filepath function to filter out a certain subset of files.\n\nLet's first get familiar with the NYC Taxi data by running the following query. */\n\nSELECT TOP 100 * FROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [nyc];\n\n\n/* Similarly, you can query the Public Holidays dataset by using the following query. */\n\nSELECT TOP 100 * FROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/holidaydatacontainer/Processed/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [holidays];\n\n/* Lastly, you can also query the Weather Data dataset by using the following query. */\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/isdweatherdatacontainer/ISDWeather/year=*/month=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [weather];\n\n/* You can learn more about the meaning of the individual columns in the descriptions\nof the NYC Taxi, Public Holidays, and Weather Data datasets on the Azure Opendatasets page. */\n\n\n/*\n * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Time series, seasonality, and outlier analysis  *\n * * * * * * * * * * * * * * * * * * * * * * * * * *\nYou can easily summarize the yearly number of taxi rides by using the following query. */\n\nSELECT\n    YEAR(tpepPickupDateTime) AS current_year,\n    COUNT(*) AS rides_per_year\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [nyc]\nWHERE nyc.filepath(1) >= '2009' AND nyc.filepath(1) <= '2019'\nGROUP BY YEAR(tpepPickupDateTime)\nORDER BY 1 ASC;\n\n/* The data can be visualized in Synapse Studio by switching from the Table to the Chart view.\nYou can choose among different chart types, such as Area, Bar, Column, Line, Pie, and Scatter.\nIn this case, plot the Column chart with the Category column set to current_year.\n\nFrom this visualization, a trend of a decreasing number of rides over years can be clearly seen.\nPresumably, this decrease is due to the recent increased popularity of ride-sharing companies.\n*/\n\n/* Next, let's focus the analysis on a single year, for example, 2016.\nThe following query returns the daily number of rides during that year. */\n\nSELECT\n    CAST([tpepPickupDateTime] AS DATE) AS [current_day],\n    COUNT(*) as rides_per_day\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [nyc]\nWHERE nyc.filepath(1) = '2016'\nGROUP BY CAST([tpepPickupDateTime] AS DATE)\nORDER BY 1 ASC;\n\n/* Again, you can easily visualize data by plotting the Column chart with\nthe Category column set to current_day and the Legend (series) column set to rides_per_day. */\n\n/* From the plot chart, you can see that there's a weekly pattern, with Saturdays as the peak day.\nDuring summer months, there are fewer taxi rides because of vacations.\nThere are also some significant drops in the number of taxi rides without a clear pattern of when and why they occur. */\n\n/* Next, let's see if the drops correlate with public holidays by joining the NYC Taxi rides dataset with the Public Holidays dataset. */\n\nWITH taxi_rides AS\n(\n    SELECT\n        CAST([tpepPickupDateTime] AS DATE) AS [current_day],\n        COUNT(*) as rides_per_day\n    FROM\n        OPENROWSET(\n            BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n            FORMAT='PARQUET'\n        ) AS [nyc]\n    WHERE nyc.filepath(1) = '2016'\n    GROUP BY CAST([tpepPickupDateTime] AS DATE)\n),\npublic_holidays AS\n(\n    SELECT\n        holidayname as holiday,\n        date\n    FROM\n        OPENROWSET(\n            BULK 'https://azureopendatastorage.blob.core.windows.net/holidaydatacontainer/Processed/*.parquet',\n            FORMAT='PARQUET'\n        ) AS [holidays]\n    WHERE countryorregion = 'United States' AND YEAR(date) = 2016\n)\nSELECT\n*\nFROM taxi_rides t\nLEFT OUTER JOIN public_holidays p on t.current_day = p.date\nORDER BY current_day ASC;\n\n/* This time, we want to highlight the number of taxi rides during public holidays.\nFor that purpose, we choose none for the Category column and rides_per_day and holiday as the Legend (series) columns. */\n\n/* From the plot chart, you can see that during public holidays the number of taxi rides is lower.\nThere's still one unexplained large drop on January 23. Let's check the weather in NYC on that day by querying the Weather Data dataset. */\n\nSELECT\n    AVG(windspeed) AS avg_windspeed,\n    MIN(windspeed) AS min_windspeed,\n    MAX(windspeed) AS max_windspeed,\n    AVG(temperature) AS avg_temperature,\n    MIN(temperature) AS min_temperature,\n    MAX(temperature) AS max_temperature,\n    AVG(sealvlpressure) AS avg_sealvlpressure,\n    MIN(sealvlpressure) AS min_sealvlpressure,\n    MAX(sealvlpressure) AS max_sealvlpressure,\n    AVG(precipdepth) AS avg_precipdepth,\n    MIN(precipdepth) AS min_precipdepth,\n    MAX(precipdepth) AS max_precipdepth,\n    AVG(snowdepth) AS avg_snowdepth,\n    MIN(snowdepth) AS min_snowdepth,\n    MAX(snowdepth) AS max_snowdepth\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/isdweatherdatacontainer/ISDWeather/year=*/month=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [weather]\nWHERE countryorregion = 'US' AND CAST([datetime] AS DATE) = '2016-01-23' AND stationname = 'JOHN F KENNEDY INTERNATIONAL AIRPORT';\n\n/* The results of the query indicate that the drop in the number of taxi rides occurred because:\n\n1. There was a blizzard on that day in NYC with heavy snow (~30 cm).\n2. It was cold (temperature was below zero degrees Celsius).\n3. It was windy (~10 m/s). */\n\n\n/* This tutorial has shown how a data analyst can quickly perform exploratory data analysis, easily combine different\ndatasets by using serverless SQL pool, and visualize the results by using Azure Synapse Studio. */\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01 - Load the New York Taxicab dataset')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets/Dedicated SQL"
				},
				"content": {
					"query": "\n/* Create tables for the sample data */\nCREATE TABLE [dbo].[Date]\n(\n    [DateID] int NOT NULL,\n    [Date] datetime NULL,\n    [DateBKey] char(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [DayOfMonth] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [DaySuffix] varchar(4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [DayName] varchar(9) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [DayOfWeek] char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [DayOfWeekInMonth] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [DayOfWeekInYear] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [DayOfQuarter] varchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [DayOfYear] varchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [WeekOfMonth] varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [WeekOfQuarter] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [WeekOfYear] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [Month] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [MonthName] varchar(9) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [MonthOfQuarter] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [Quarter] char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [QuarterName] varchar(9) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [Year] char(4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [YearName] char(7) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [MonthYear] char(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [MMYYYY] char(6) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [FirstDayOfMonth] date NULL,\n    [LastDayOfMonth] date NULL,\n    [FirstDayOfQuarter] date NULL,\n    [LastDayOfQuarter] date NULL,\n    [FirstDayOfYear] date NULL,\n    [LastDayOfYear] date NULL,\n    [IsHolidayUSA] bit NULL,\n    [IsWeekday] bit NULL,\n    [HolidayUSA] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n);\n\nCREATE TABLE [dbo].[Geography]\n(\n    [GeographyID] int NOT NULL,\n    [ZipCodeBKey] varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n    [County] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [City] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [State] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [Country] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [ZipCode] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n);\n\nCREATE TABLE [dbo].[HackneyLicense]\n(\n    [HackneyLicenseID] int NOT NULL,\n    [HackneyLicenseBKey] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n    [HackneyLicenseCode] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n);\n\nCREATE TABLE [dbo].[Medallion]\n(\n    [MedallionID] int NOT NULL,\n    [MedallionBKey] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n    [MedallionCode] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n);\n\nCREATE TABLE [dbo].[Time]\n(\n    [TimeID] int NOT NULL,\n    [TimeBKey] varchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n    [HourNumber] tinyint NOT NULL,\n    [MinuteNumber] tinyint NOT NULL,\n    [SecondNumber] tinyint NOT NULL,\n    [TimeInSecond] int NOT NULL,\n    [HourlyBucket] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n    [DayTimeBucketGroupKey] int NOT NULL,\n    [DayTimeBucket] varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n);\n\nCREATE TABLE [dbo].[Trip]\n(\n    [DateID] int NOT NULL,\n    [MedallionID] int NOT NULL,\n    [HackneyLicenseID] int NOT NULL,\n    [PickupTimeID] int NOT NULL,\n    [DropoffTimeID] int NOT NULL,\n    [PickupGeographyID] int NULL,\n    [DropoffGeographyID] int NULL,\n    [PickupLatitude] float NULL,\n    [PickupLongitude] float NULL,\n    [PickupLatLong] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [DropoffLatitude] float NULL,\n    [DropoffLongitude] float NULL,\n    [DropoffLatLong] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [PassengerCount] int NULL,\n    [TripDurationSeconds] int NULL,\n    [TripDistanceMiles] float NULL,\n    [PaymentType] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [FareAmount] money NULL,\n    [SurchargeAmount] money NULL,\n    [TaxAmount] money NULL,\n    [TipAmount] money NULL,\n    [TollsAmount] money NULL,\n    [TotalAmount] money NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n);\n\nCREATE TABLE [dbo].[Weather]\n(\n    [DateID] int NOT NULL,\n    [GeographyID] int NOT NULL,\n    [PrecipitationInches] float NOT NULL,\n    [AvgTemperatureFahrenheit] float NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n);\n\n\n/* Load the data into your data warehouse */\nCOPY INTO [dbo].[Date]\nFROM 'https://nytaxiblob.blob.core.windows.net/2013/Date'\nWITH\n(\n    FILE_TYPE = 'CSV',\n\tFIELDTERMINATOR = ',',\n\tFIELDQUOTE = ''\n)\nOPTION (LABEL = 'COPY : Load [dbo].[Date] - Taxi dataset');\n\n\nCOPY INTO [dbo].[Geography]\nFROM 'https://nytaxiblob.blob.core.windows.net/2013/Geography'\nWITH\n(\n    FILE_TYPE = 'CSV',\n\tFIELDTERMINATOR = ',',\n\tFIELDQUOTE = ''\n)\nOPTION (LABEL = 'COPY : Load [dbo].[Geography] - Taxi dataset');\n\nCOPY INTO [dbo].[HackneyLicense]\nFROM 'https://nytaxiblob.blob.core.windows.net/2013/HackneyLicense'\nWITH\n(\n    FILE_TYPE = 'CSV',\n\tFIELDTERMINATOR = ',',\n\tFIELDQUOTE = ''\n)\nOPTION (LABEL = 'COPY : Load [dbo].[HackneyLicense] - Taxi dataset');\n\nCOPY INTO [dbo].[Medallion]\nFROM 'https://nytaxiblob.blob.core.windows.net/2013/Medallion'\nWITH\n(\n    FILE_TYPE = 'CSV',\n\tFIELDTERMINATOR = ',',\n\tFIELDQUOTE = ''\n)\nOPTION (LABEL = 'COPY : Load [dbo].[Medallion] - Taxi dataset');\n\nCOPY INTO [dbo].[Time]\nFROM 'https://nytaxiblob.blob.core.windows.net/2013/Time'\nWITH\n(\n    FILE_TYPE = 'CSV',\n\tFIELDTERMINATOR = ',',\n\tFIELDQUOTE = ''\n)\nOPTION (LABEL = 'COPY : Load [dbo].[Time] - Taxi dataset');\n\nCOPY INTO [dbo].[Weather]\nFROM 'https://nytaxiblob.blob.core.windows.net/2013/Weather'\nWITH\n(\n    FILE_TYPE = 'CSV',\n\tFIELDTERMINATOR = ',',\n\tFIELDQUOTE = '',\n\tROWTERMINATOR='0X0A'\n)\nOPTION (LABEL = 'COPY : Load [dbo].[Weather] - Taxi dataset');\n\nCOPY INTO [dbo].[Trip]\nFROM 'https://nytaxiblob.blob.core.windows.net/2013/Trip2013'\nWITH\n(\n    FILE_TYPE = 'CSV',\n\tFIELDTERMINATOR = '|',\n\tFIELDQUOTE = '',\n\tROWTERMINATOR='0X0A',\n\tCOMPRESSION = 'GZIP'\n)\nOPTION (LABEL = 'COPY : Load [dbo].[Trip] - Taxi dataset');\n\n\n/* View the data */\nSELECT  r.[request_id]\n,       r.[status]\n,       r.resource_class\n,       r.command\n,       sum(bytes_processed) AS bytes_processed\n,       sum(rows_processed) AS rows_processed\nFROM    sys.dm_pdw_exec_requests r\n              JOIN sys.dm_pdw_dms_workers w\n                     ON r.[request_id] = w.request_id\nWHERE [label] = 'COPY : Load [dbo].[Date] - Taxi dataset' OR\n    [label] = 'COPY : Load [dbo].[Geography] - Taxi dataset' OR\n    [label] = 'COPY : Load [dbo].[HackneyLicense] - Taxi dataset' OR\n    [label] = 'COPY : Load [dbo].[Medallion] - Taxi dataset' OR\n    [label] = 'COPY : Load [dbo].[Time] - Taxi dataset' OR\n    [label] = 'COPY : Load [dbo].[Weather] - Taxi dataset' OR\n    [label] = 'COPY : Load [dbo].[Trip] - Taxi dataset'\nand session_id <> session_id() and type = 'WRITER'\nGROUP BY r.[request_id],\n        r.[status],\n        r.resource_class,\n        r.command;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_create logins')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/00_setup"
				},
				"content": {
					"query": "create login [asa.sql.workload01] with password = 'P2ssw0rd2903$'\ncreate login [asa.sql.workload02] with password = 'P2ssw0rd2903$'\ncreate login [asa.sql.import01] with password = 'P2ssw0rd2903$'\ncreate login [asa.sql.import02] with password = 'P2ssw0rd2903$'\ncreate login [asa.sql.highperf] with password = 'P2ssw0rd2903$'\ncreate login [asa.sql.admin] with password = 'P2ssw0rd2903$'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02 - Query Parquet Files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets/SQL Serverless"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02 - Row-Level Security for dedicated SQL pools')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets/Dedicated SQL"
				},
				"content": {
					"query": "--Create three user accounts that will demonstrate different access capabilities\nCREATE USER Manager WITHOUT LOGIN;\nCREATE USER Sales1 WITHOUT LOGIN;\nCREATE USER Sales2 WITHOUT LOGIN;\n\n--Create a table to hold data\nCREATE TABLE Sales\n    (\n    OrderID int,\n    SalesRep sysname,\n    Product varchar(10),\n    Qty int\n    );\n\n--Insert data into table with six rows of data, showing three orders for each sales representative\nINSERT INTO Sales VALUES (1, 'Sales1', 'Valve', 5);\nINSERT INTO Sales VALUES (2, 'Sales1', 'Wheel', 2);\nINSERT INTO Sales VALUES (3, 'Sales1', 'Valve', 4);\nINSERT INTO Sales VALUES (4, 'Sales2', 'Bracket', 2);\nINSERT INTO Sales VALUES (5, 'Sales2', 'Wheel', 5);\nINSERT INTO Sales VALUES (6, 'Sales2', 'Seat', 5);\n-- View the 6 rows in the table\nSELECT * FROM Sales;\n\n--Grant read access on the table to each of the users\nGRANT SELECT ON Sales TO Manager;\nGRANT SELECT ON Sales TO Sales1;\nGRANT SELECT ON Sales TO Sales2;\n\n\n--Create a new schema, and an inline table-valued function.\n--The function returns 1 when a row in the SalesRep column is the same as the user executing the query (@SalesRep = USER_NAME()) or if the user executing the query is the Manager user (USER_NAME() = 'Manager')\nEXEC('CREATE SCHEMA Security');\nGO\n\n  --Select the code for creating the function and run\nCREATE FUNCTION Security.fn_securitypredicate(@SalesRep AS sysname)\n    RETURNS TABLE\nWITH SCHEMABINDING\nAS\n    RETURN SELECT 1 AS fn_securitypredicate_result\nWHERE @SalesRep = USER_NAME() OR USER_NAME() = 'Manager'\nGO\n--Create a security policy adding the function as a filter predicate. The state must be set to ON to enable the policy.\nCREATE SECURITY POLICY SalesFilter\nADD FILTER PREDICATE Security.fn_securitypredicate(SalesRep)\nON dbo.Sales\nWITH (STATE = ON);\n\n--Allow SELECT permissions to the fn_securitypredicate function\nGRANT SELECT ON security.fn_securitypredicate TO Manager;\nGRANT SELECT ON security.fn_securitypredicate TO Sales1;\nGRANT SELECT ON security.fn_securitypredicate TO Sales2;\n\n--Test the filtering predicate, by selected from the Sales table as each user\nEXECUTE AS USER = 'Sales1';\nSELECT * FROM Sales;\nREVERT;\n\nEXECUTE AS USER = 'Sales2';\nSELECT * FROM Sales;\nREVERT;\n\nEXECUTE AS USER = 'Manager';\nSELECT * FROM Sales;\nREVERT;\n\n--Alter the security policy to disable the policy\nALTER SECURITY POLICY SalesFilter\nWITH (STATE = OFF);\n\n--Connect to the SQL database to clean up resources\nDROP USER Sales1;\nDROP USER Sales2;\nDROP USER Manager;\n\nDROP SECURITY POLICY SalesFilter;\nDROP TABLE Sales;\nDROP FUNCTION Security.fn_securitypredicate;\nDROP SCHEMA Security;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_create users')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/00_setup"
				},
				"content": {
					"query": "create user [asa.sql.workload01] for login [asa.sql.workload01]\ncreate user [asa.sql.workload02] for login [asa.sql.workload02]\nexecute sp_addrolemember 'db_datareader', 'asa.sql.workload01' \nexecute sp_addrolemember 'db_datareader', 'asa.sql.workload02'\n\n\ncreate user [asa.sql.import01] for login [asa.sql.import01]\ncreate user [asa.sql.import02] for login [asa.sql.import02]\nexecute sp_addrolemember 'db_owner', 'asa.sql.import01'  \nexecute sp_addrolemember 'db_owner', 'asa.sql.import02' \n\n\ncreate user [asa.sql.highperf] for login [asa.sql.highperf]\nexecute sp_addrolemember 'db_owner', 'asa.sql.highperf' \nexecute sp_addrolemember 'staticrc80', 'asa.sql.highperf' \n    \nCREATE USER [dataaidw] FROM EXTERNAL PROVIDER;\nEXEC sp_addrolemember 'db_owner', 'dataaidw'\n\ncreate user [asa.sql.admin] for login [asa.sql.admin]\nexecute sp_addrolemember 'db_owner', 'asa.sql.admin' \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03 - Query CSV Files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets/SQL Serverless"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read a csv file */\nselect top 10 *\nfrom openrowset(\n    bulk 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.csv',\n    format = 'csv',\n    parser_version = '2.0',\n    firstrow = 2 ) as rows\n\n\n\n/* Explicitly specify schema */\nselect top 10 *\nfrom openrowset(\n        bulk 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.csv',\n        format = 'csv',\n        parser_version ='2.0',\n        firstrow = 2\n    ) with (\n        date_rep date 1,\n        cases int 5,\n        geo_id varchar(6) 8\n    ) as rows\n\n/* Windows style new line */\nSELECT *\nFROM OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/population/population.csv',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIELDTERMINATOR =',',\n        ROWTERMINATOR = '\n'\n    )\nWITH (\n    [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2,\n    [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2,\n    [year] smallint,\n    [population] bigint\n) AS [r]\nWHERE\n    country_name = 'Luxembourg'\n    AND year = 2017;\n\n\n/* Unix-style new line */\nSELECT *\nFROM OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/population-unix/population.csv',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIELDTERMINATOR =',',\n        ROWTERMINATOR = '0x0a'\n    )\nWITH (\n    [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2,\n    [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2,\n    [year] smallint,\n    [population] bigint\n) AS [r]\nWHERE\n    country_name = 'Luxembourg'\n    AND year = 2017;\n\n\n/* Header row */\nSELECT *\nFROM OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/population-unix-hdr/population.csv',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIELDTERMINATOR =',',\n        FIRSTROW = 2\n    )\n    WITH (\n        [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2,\n        [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2,\n        [year] smallint,\n        [population] bigint\n    ) AS [r]\nWHERE\n    country_name = 'Luxembourg'\n    AND year = 2017;\n\n\n/* Custom quote character */\nSELECT *\nFROM OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/population-unix-hdr-quoted/population.csv',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIELDTERMINATOR =',',\n        ROWTERMINATOR = '0x0a',\n        FIRSTROW = 2,\n        FIELDQUOTE = '\"'\n    )\n    WITH (\n        [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2,\n        [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2,\n        [year] smallint,\n        [population] bigint\n    ) AS [r]\nWHERE\n    country_name = 'Luxembourg'\n    AND year = 2017;\n\n\n/* Escape characters */\nSELECT *\nFROM OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/population-unix-hdr-escape/population.csv',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIELDTERMINATOR =',',\n        ROWTERMINATOR = '0x0a',\n        FIRSTROW = 2,\n        ESCAPECHAR = ''\n    )\n    WITH (\n        [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2,\n        [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2,\n        [year] smallint,\n        [population] bigint\n    ) AS [r]\nWHERE\n    country_name = 'Slovenia';\n\n\n/* Escape quoting characters */\nSELECT *\nFROM OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/population-unix-hdr-escape-quoted/population.csv',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIELDTERMINATOR =',',\n        ROWTERMINATOR = '0x0a',\n        FIRSTROW = 2\n    )\n    WITH (\n        [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2,\n        [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2,\n        [year] smallint,\n        [population] bigint\n    ) AS [r]\nWHERE\n    country_name = 'Slovenia';\n\n\n/* Tab-delimited files */\nSELECT *\nFROM OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/population-unix-hdr-tsv/population.csv',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIELDTERMINATOR ='\t',\n        ROWTERMINATOR = '0x0a',\n        FIRSTROW = 2\n    )\n    WITH (\n        [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2,\n        [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2,\n        [year] smallint,\n        [population] bigint\n    ) AS [r]\nWHERE\n    country_name = 'Luxembourg'\n    AND year = 2017\n\n\n/* Return a subset of columns */\nSELECT\n    COUNT(DISTINCT country_name) AS countries\nFROM OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/population/population.csv',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIELDTERMINATOR =',',\n        ROWTERMINATOR = '\n'\n    )\nWITH (\n    --[country_code] VARCHAR (5),\n    [country_name] VARCHAR (100) 2\n    --[year] smallint,\n    --[population] bigint\n) AS [r]\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03 - Scoring machine learning models in dedicated SQL pool')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets/Dedicated SQL"
				},
				"content": {
					"query": "/* This is a sample script for loading and scoring machine learning models using New York taxi data.\n   The query scenario is to predict the fare for taking a trip around New York City.\n   First, create two tables: to store the sample machine learning model and scoring data.\n   Next, load the data and the model in their respective tables.\n   Last, use T-SQL Predict to score the model.\n   Run the script below to see the results.\n*/\n\n-- Create a table to store the model.\nCREATE TABLE [dbo].[AllModels]\n(\n    [Model] [varbinary](max) NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    HEAP\n)\nGO\n\n-- Next, load the hexadecimal string of the model from Azure Data Lake storage location into the table.\nCOPY INTO [AllModels] (Model)\nFROM 'https://nytaxiblob.blob.core.windows.net/samplepredictdata/NYC-fare-prediction.onnx.hex'\nWITH (\n    FILE_TYPE = 'CSV'\n)\n\n-- Create a table to store the sample scoring data.\nCREATE TABLE [dbo].[TaxiTrips]\n(\n\t[vendorID] [real] NOT NULL,\n\t[passengerCount] [real] NULL,\n\t[tripDistance] [real] NULL,\n\t[month_num] [real] NULL,\n\t[day_of_month] [real] NULL,\n\t[day_of_week] [real] NULL,\n\t[day_of_hour] [real] NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nGO\n\n-- Next, load the sample data from the Azure Data Lake location.\nCOPY INTO [dbo].[TaxiTrips] (vendorID, passengerCount, tripDistance, month_num, day_of_month, day_of_week, day_of_hour)\nFROM 'https://nytaxiblob.blob.core.windows.net/samplepredictdata/tripstestdata.csv'\nWITH (\n    FILE_TYPE = 'CSV',\n\tFIRSTROW = 2,\n    FIELDTERMINATOR=',',\n    ROWTERMINATOR='0x0A'\n\t)\n\n-- Use Predict find out what the fare of various trips around New York City is.\n-- A new column is generated called totalAmount with data type float that will contain the predicted amount.\nSELECT [vendorID],\n \t   [passengerCount],\n\t   [tripDistance],\n\t   [month_num],\n\t   [day_of_month],\n\t   [day_of_week],\n\t   [day_of_hour],\n\t   [totalAmount]\nFROM PREDICT (model = (SELECT Model FROM AllModels), Data = dbo.TaxiTrips, RUNTIME=ONNX) WITH (totalAmount float)\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_create schemas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/00_setup"
				},
				"content": {
					"query": "create schema wwi\ngo\ncreate schema wwi_security\ngo\ncreate schema wwi_staging\ngo\ncreate schema wwi_perf\ngo\ncreate schema wwi_poc\ngo\ncreate schema wwi_ml\ngo",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04 - Query JSON Files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets/SQL Serverless"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read JSON files */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.json',\n        FORMAT = 'csv',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b'\n    ) with (doc nvarchar(max)) as rows\ngo\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.json',\n        FORMAT = 'csv',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b' --> You need to override rowterminator to read classic JSON\n    ) WITH (doc nvarchar(max)) as rows\n\n\n/* Books dataset */\n\n/* In order to process JSON files using JSON_VALUE and JSON_QUERY you need to to read json file from storage as single column.\nFollowing script reads book1.json file as single column. */\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-json/books/book1.json',\n        FORMAT='CSV',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(8000)\n    ) AS [r]\n\n/* Querying JSON files using JSON_VALUE */\n\n/*Following query shows how to use JSON_VALUE to retrieve scalar values (title, publisher)\nfrom book with title Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics.*/\nSELECT\n    JSON_VALUE(jsonContent, '$.title') AS title,\n\tJSON_VALUE(jsonContent, '$.publisher') as publisher,\n\tjsonContent\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-json/books/*.json',\n\t\tFORMAT='CSV',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(8000)\n    ) AS [r]\nWHERE\n\tJSON_VALUE(jsonContent, '$.title') = 'Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics'\n\n/* Querying JSON files using JSON_QUERY */\n\n/* Following query shows how to use JSON_QUERY to retrieve objects and arrays (authors)\nfrom book with title Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics. */\n\nSELECT\n    JSON_QUERY(jsonContent, '$.authors') AS authors,\n\tjsonContent\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-json/books/*.json',\n\t\tFORMAT='CSV',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(8000)\n    ) AS [r]\nWHERE\n\tJSON_VALUE(jsonContent, '$.title') = 'Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics'\n\n/* Querying JSON files using OPENJSON */\n\n/* Following query shows how to use OPENJSON to retrieve objects and properties\nwithin book with title Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics. */\n\nSELECT\n\tj.*\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-json/books/*.json',\n\t\tFORMAT='CSV',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent NVARCHAR(4000) --Note that we have to use NVARCHAR(4000) for OPENJSON to work.\n    ) AS [r]\nCROSS APPLY OPENJSON(jsonContent) AS j\nWHERE\n\tJSON_VALUE(jsonContent, '$.title') = 'Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics'\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_create wwi tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/00_setup"
				},
				"content": {
					"query": "IF OBJECT_ID(N'[wwi].[Product]', N'U') IS NOT NULL   \nDROP TABLE [wwi].[Product]\n\nCREATE TABLE [wwi].[Product]\n(\n    ProductId SMALLINT NOT NULL,\n    Seasonality TINYINT NOT NULL,\n    Price DECIMAL(6,2),\n    Profit DECIMAL(6,2)\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE\n)\n\nIF OBJECT_ID(N'[wwi].[Date]', N'U') IS NOT NULL   \nDROP TABLE [wwi].[Date]\n\nCREATE TABLE [wwi].[Date]\n(\n\tDateId int not null,\n\tDay tinyint not null,\n\tMonth tinyint not null,\n\tQuarter tinyint not null,\n\tYear smallint not null\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE\n)\n\nIF OBJECT_ID(N'[wwi].[SaleSmall]', N'U') IS NOT NULL   \nDROP TABLE [wwi].[SaleSmall]\n\nCREATE TABLE [wwi].[SaleSmall]\n( \n\t[TransactionId] [uniqueidentifier]  NOT NULL,\n\t[CustomerId] [int]  NOT NULL,\n\t[ProductId] [smallint]  NOT NULL,\n\t[Quantity] [tinyint]  NOT NULL,\n\t[Price] [decimal](9,2)  NOT NULL,\n\t[TotalAmount] [decimal](9,2)  NOT NULL,\n\t[TransactionDateId] [int]  NOT NULL,\n\t[ProfitAmount] [decimal](9,2)  NOT NULL,\n\t[Hour] [tinyint]  NOT NULL,\n\t[Minute] [tinyint]  NOT NULL,\n\t[StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX,\n\tPARTITION\n\t(\n\t\t[TransactionDateId] RANGE RIGHT FOR VALUES (\n\t\t\t20100101, 20100201, 20100301, 20100401, 20100501, 20100601, 20100701, 20100801, 20100901, 20101001, 20101101, 20101201, \n\t\t\t20110101, 20110201, 20110301, 20110401, 20110501, 20110601, 20110701, 20110801, 20110901, 20111001, 20111101, 20111201, \n\t\t\t20120101, 20120201, 20120301, 20120401, 20120501, 20120601, 20120701, 20120801, 20120901, 20121001, 20121101, 20121201, \n\t\t\t20130101, 20130201, 20130301, 20130401, 20130501, 20130601, 20130701, 20130801, 20130901, 20131001, 20131101, 20131201, \n\t\t\t20140101, 20140201, 20140301, 20140401, 20140501, 20140601, 20140701, 20140801, 20140901, 20141001, 20141101, 20141201, \n\t\t\t20150101, 20150201, 20150301, 20150401, 20150501, 20150601, 20150701, 20150801, 20150901, 20151001, 20151101, 20151201, \n\t\t\t20160101, 20160201, 20160301, 20160401, 20160501, 20160601, 20160701, 20160801, 20160901, 20161001, 20161101, 20161201, \n\t\t\t20170101, 20170201, 20170301, 20170401, 20170501, 20170601, 20170701, 20170801, 20170901, 20171001, 20171101, 20171201, \n\t\t\t20180101, 20180201, 20180301, 20180401, 20180501, 20180601, 20180701, 20180801, 20180901, 20181001, 20181101, 20181201, \n\t\t\t20190101, 20190201, 20190301, 20190401, 20190501, 20190601, 20190701, 20190801, 20190901, 20191001, 20191101, 20191201)\n\t)\n)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05 - Query Nested Types in JSON and Parquet Files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets/SQL Serverless"
				},
				"content": {
					"query": "/* The example extracts scalar and objects values from COVID-19 Open Research Dataset JSON file with nested objects is shown below.*/\nSELECT\n    title = JSON_VALUE(doc, '$.metadata.title'),\n    first_author = JSON_QUERY(doc, '$.metadata.authors[0]'),\n    first_author_name = JSON_VALUE(doc, '$.metadata.authors[0].first'),\n    complex_object = doc\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/covid19temp/comm_use_subset/pdf_json/000b7d1517ceebb34e1e3e817695b6de03e2fa78.json',\n        FORMAT='CSV', FIELDTERMINATOR ='0x0b', FIELDQUOTE = '0x0b', ROWTERMINATOR = '0x0b'\n    )\n    WITH ( doc varchar(MAX) ) AS docs;\n\n\n/* Project nested or repeated data */\nSELECT\n    DateStruct, TimeStruct, TimestampStruct, DecimalStruct, FloatStruct\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/structExample.parquet',\n        FORMAT='PARQUET'\n    )\n    WITH (\n        DateStruct VARCHAR(8000),\n        TimeStruct VARCHAR(8000),\n        TimestampStruct VARCHAR(8000),\n        DecimalStruct VARCHAR(8000),\n        FloatStruct VARCHAR(8000)\n    ) AS [r];\n\n/* The following query reads the justSimpleArray.parquet file. */\nSELECT\n    SimpleArray\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/justSimpleArray.parquet',\n        FORMAT='PARQUET'\n    ) AS [r];\n\n\n/* Read properties from nested object columns */\nSELECT\n    title = JSON_VALUE(complex_column, '$.metadata.title'),\n    first_author_name = JSON_VALUE(complex_column, '$.metadata.authors[0].first'),\n    body_text = JSON_VALUE(complex_column, '$.body_text.text'),\n    complex_column\nFROM\n    OPENROWSET( BULK 'https://azureopendatastorage.blob.core.windows.net/covid19temp/comm_use_subset/pdf_json/000b7d1517ceebb34e1e3e817695b6de03e2fa78.json',\n                FORMAT='CSV', FIELDTERMINATOR ='0x0b', FIELDQUOTE = '0x0b', ROWTERMINATOR = '0x0b' ) WITH ( complex_column varchar(MAX) ) AS docs;\n\n/* The following query reads the structExample.parquet file and shows how to surface elements of a nested column. */\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/structExample.parquet',\n        FORMAT='PARQUET'\n    )\n    WITH (\n        [DateValue] DATE '$.DateStruct.Date',\n        [TimeStruct.Time] TIME,\n        [TimestampStruct.Timestamp] DATETIME2,\n        DecimalValue DECIMAL(18, 5) '$.DecimalStruct.Decimal',\n        [FloatStruct.Float] FLOAT\n    ) AS [r];\n\n\n/* Access elements from repeated columns */\nSELECT\n    *,\n    JSON_VALUE(SimpleArray, '$[0]') AS FirstElement,\n    JSON_VALUE(SimpleArray, '$[1]') AS SecondElement,\n    JSON_VALUE(SimpleArray, '$[2]') AS ThirdElement\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/justSimpleArray.parquet',\n        FORMAT='PARQUET'\n    ) AS [r];\n\n\n/* Access sub-objects from complex columns */\nSELECT\n    MapOfPersons,\n    JSON_QUERY(MapOfPersons, '$.\"John Doe\"') AS [John]\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/mapExample.parquet',\n        FORMAT='PARQUET'\n    ) AS [r];\n\n/* Explicitly reference the columns that you want to return in WITH clause */\nSELECT DocId,\n    MapOfPersons,\n    JSON_QUERY(MapOfPersons, '$.\"John Doe\"') AS [John]\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/mapExample.parquet',\n        FORMAT='PARQUET'\n    )\n    WITH (DocId bigint, MapOfPersons VARCHAR(max)) AS [r];\n\n\n/* Project values from repeated columns */\nSELECT\n    SimpleArray, Element\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/justSimpleArray.parquet',\n        FORMAT='PARQUET'\n    ) AS arrays\n    CROSS APPLY OPENJSON (SimpleArray) WITH (Element int '$') as array_values\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_create aml tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/00_setup"
				},
				"content": {
					"query": "CREATE TABLE [wwi_ml].[AMLModel]\n( \n\t[ID] [nvarchar](1024)  NOT NULL,\n\t[name] [nvarchar](1024)  NOT NULL,\n\t[description] [nvarchar](1024)  NULL,\n\t[version] [int]  NULL,\n\t[created_time] [datetime2](7)  NULL,\n\t[created_by] [nvarchar](128)  NULL,\n\t[framework] [nvarchar](64)  NULL,\n\t[model] [varbinary](max)  NULL,\n\t[inputs_schema] [nvarchar](max)  NULL,\n\t[outputs_schema] [nvarchar](max)  NULL\n)\nWITH\n(\n\tDISTRIBUTION = REPLICATE,\n\tHEAP\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06 - Use file metadata in queries')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets/SQL Serverless"
				},
				"content": {
					"query": "/* Filename */\n/* The following sample reads the NYC Yellow Taxi data files for the month September of 2017 and returns the number of rides per file. */\nSELECT\n    nyc.filename() AS [filename]\n    ,COUNT_BIG(*) AS [rows]\nFROM\n    OPENROWSET(\n    BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/taxi/year=2017/month=9/*.parquet',\n    FORMAT='PARQUET'\n    ) nyc\nGROUP BY nyc.filename();\n\n/* The following example shows how filename() can be used in the WHERE clause to filter the files to be read. */\nSELECT\n    r.filename() AS [filename]\n    ,COUNT_BIG(*) AS [rows]\nFROM OPENROWSET(\n    BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/taxi/yellow_tripdata_2017-*.csv',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    FIRSTROW = 2)\n    WITH (C1 varchar(200) ) AS [r]\nWHERE\n    r.filename() IN ('yellow_tripdata_2017-10.csv', 'yellow_tripdata_2017-11.csv', 'yellow_tripdata_2017-12.csv')\nGROUP BY\n    r.filename()\nORDER BY\n    [filename];\n\n\n/* Filepath */\n/* The following sample reads NYC Yellow Taxi data files for the last three months of 2017. It returns the number of rides per file path. */\nSELECT\n    r.filepath() AS filepath\n    ,COUNT_BIG(*) AS [rows]\nFROM OPENROWSET(\n    BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/taxi/yellow_tripdata_2017-1*.csv',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    FIRSTROW = 2\n    )\n    WITH (\n        vendor_id INT\n    ) AS [r]\nGROUP BY\n    r.filepath()\nORDER BY\n    filepath;\n\n/* The following example shows how filepath() can be used in the WHERE clause to filter the files to be read, shows the last three months of 2017. */\nSELECT\n    r.filepath() AS filepath\n    ,r.filepath(1) AS [year]\n    ,r.filepath(2) AS [month]\n    ,COUNT_BIG(*) AS [rows]\nFROM OPENROWSET(\n    BULK 'https://sqlondemandstorage.blob.core.windows.net/public-csv/taxi/yellow_tripdata_*-*.csv',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    FIRSTROW = 2\n    )\nWITH (\n    vendor_id INT\n) AS [r]\nWHERE\n    r.filepath(1) IN ('2017')\n    AND r.filepath(2) IN ('10', '11', '12')\nGROUP BY\n    r.filepath()\n    ,r.filepath(1)\n    ,r.filepath(2)\nORDER BY\n    filepath;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06_create security tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/00_setup"
				},
				"content": {
					"query": "create user [CEO] without login\ncreate user [DataAnalystMiami] without login\ncreate user [DataAnalystSanDiego] without login\n\nIF OBJECT_ID(N'[wwi_security].[CustomerInfo]', N'U') IS NOT NULL   \nDROP TABLE [wwi_security].[CustomerInfo]\n\nCREATE TABLE [wwi_security].[CustomerInfo]\n( \n\t[UserName] [nvarchar](100)  NULL,\n\t[Gender] [nvarchar](10)  NULL,\n\t[Phone] [nvarchar](50)  NULL,\n\t[Email] [nvarchar](150)  NULL,\n\t[CreditCard] [nvarchar](21)  NULL\n)\nWITH\n(\n\tDISTRIBUTION = REPLICATE,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\nCOPY INTO [wwi_security].[CustomerInfo]\nFROM 'https://dataairawdls.dfs.core.windows.net/wwi-02/security/customerinfo.csv'\nWITH (\n\t--CREDENTIAL = (IDENTITY = 'Storage Account Key', SECRET = 'DivozaHnB+c7HtcEo6nK1f/XQyGHmaMQShb2wXB/Jo4lEoP31MQX+hdU5do5wYmaRYh4mM+Ontro+ASt7AO0Tg=='),\n    FILE_TYPE = 'CSV',\n    FIRSTROW = 2,\n\tFIELDQUOTE='''',\n    ENCODING='UTF8'\n)\nGO\n\nIF OBJECT_ID(N'[wwi_security].[Sale]', N'U') IS NOT NULL  \nDROP TABLE [wwi_security].[Sale]\nGO\n\nCREATE TABLE [wwi_security].[Sale]\n( \n\t[ProductId] [int]  NOT NULL,\n\t[Analyst] [nvarchar](100)  NOT NULL,\n\t[Product] [nvarchar](200)  NOT NULL,\n\t[CampaignName] [nvarchar](200)  NOT NULL,\n\t[Quantity] [int]  NOT NULL,\n\t[Region] [nvarchar](50)  NOT NULL,\n\t[State] [nvarchar](50)  NOT NULL,\n\t[City] [nvarchar](50)  NOT NULL,\n\t[Revenue] [nvarchar](50)  NULL,\n\t[RevenueTarget] [nvarchar](50)  NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\nCOPY INTO [wwi_security].[Sale]\nFROM 'https://dataairawdls.dfs.core.windows.net/wwi-02/security/factsale.csv'\nWITH (\n\t--CREDENTIAL = (IDENTITY = 'Storage Account Key', SECRET = 'RqDON1zUPW0M2YDLsfuZo4j3EwJ9Uw64L4c+K041P9o1oIT8GN9KVPJgoGXQ9EF/EsUwY+UV/Aq9+AStdj3kLA=='),\n    FILE_TYPE = 'CSV',\n    FIRSTROW = 2,\n\tFIELDQUOTE='''',\n    ENCODING='UTF8'\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_consumption delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NycTaxi/Serverless"
				},
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dataaicurateddls.dfs.core.windows.net/nyctaxi/nyctaxi-consumption-df/transactions/materialized-view/',\n        FORMAT = 'DELTA'\n    ) AS [result]\nWHERE [result].taxi_type = 'green'\nand trip_year = 2019",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_create resource login')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "-- Parquet Auto Ingestion\n-- Create Logins for different Resource Classes\n-- Run against the tpcdw dedicated pool -> master db\nUSE [master]\nGO\n\nCREATE LOGIN LoadingUser WITH PASSWORD    = 'P2ssw0rd2903$'\nGO\nCREATE LOGIN Userstaticrc10 WITH PASSWORD = 'P2ssw0rd2903$'\nGO\nCREATE LOGIN Userstaticrc20 WITH PASSWORD = 'P2ssw0rd2903$'\nGO\nCREATE LOGIN Userstaticrc30 WITH PASSWORD = 'P2ssw0rd2903$'\nGO\nCREATE LOGIN Userstaticrc40 WITH PASSWORD = 'P2ssw0rd2903$'\nGO\nCREATE LOGIN Userstaticrc50 WITH PASSWORD = 'P2ssw0rd2903$'\nGO\nCREATE LOGIN Userstaticrc60 WITH PASSWORD = 'P2ssw0rd2903$'\nGO\nCREATE LOGIN Userstaticrc70 WITH PASSWORD = 'P2ssw0rd2903$'\nGO\nCREATE LOGIN Userstaticrc80 WITH PASSWORD = 'P2ssw0rd2903$'\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "dataaitpcdw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_create tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/02_other data"
				},
				"content": {
					"query": "-- create a new table for the Campaign Analytics CSV file\nCREATE TABLE [wwi].[CampaignAnalytics]\n(\n    [Region] [nvarchar](50)  NOT NULL,\n    [Country] [nvarchar](30)  NOT NULL,\n    [ProductCategory] [nvarchar](50)  NOT NULL,\n    [CampaignName] [nvarchar](500)  NOT NULL,\n    [Revenue] [decimal](10,2)  NULL,\n    [RevenueTarget] [decimal](10,2)  NULL,\n    [City] [nvarchar](50)  NULL,\n    [State] [nvarchar](25)  NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [Region] ),\n    CLUSTERED COLUMNSTORE INDEX\n)\n\n-- create a new table for the Sales Parquet files:\nCREATE TABLE [wwi].[Sale]\n(\n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDate] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX,\n    PARTITION\n    (\n        [TransactionDaten    )\n)\n\n-- new table for the user reviews contained within the user profile data in Azure Cosmos DB\nCREATE TABLE [wwi].[UserProductReviews]\n(\n    [UserId] [int]  NOT NULL,\n    [ProductId] [int]  NOT NULL,\n    [ReviewText] [nvarchar](1000)  NOT NULL,\n    [ReviewDate] [datetime]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [ProductId] ),\n    CLUSTERED COLUMNSTORE INDEX\n)\n\n-- new table that joins users' preferred products stored in Azure Cosmos DB with top product purchases per user from the e-commerce site, \n-- stored in JSON files within the data lake\n\nCREATE TABLE [wwi].[UserTopProductPurchases]\n(\n    [UserId] [int]  NOT NULL,\n    [ProductId] [int]  NOT NULL,\n    [ItemsPurchasedLast12Months] [int]  NULL,\n    [IsTopProduct] [bit]  NOT NULL,\n    [IsPreferredProduct] [bit]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [UserId] ),\n    CLUSTERED COLUMNSTORE INDEX\n)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_curated delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NycTaxi/Serverless"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dataaicurateddls.dfs.core.windows.net/nyctaxi/nyctaxi-curated-df/transactions/green-taxi/',\n        FORMAT = 'DELTA'\n    ) AS [result]\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dataaicurateddls.dfs.core.windows.net/nyctaxi/nyctaxi-curated-df/transactions/yellow-taxi/',\n        FORMAT = 'DELTA'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_end to end security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/04_security"
				},
				"content": {
					"query": "--Wide World Importers is host to a plethora of data coming from many disparate sources. The idea of bringing all of their data \n-- together into Azure Synapse Analytics for them to query, gain insights, and consume in ways they have never done before is \n-- exhilarating! As much as it is an exciting game-changer for this business, it opens up a large amount of surface area for \n-- potential attack. Security must be established in the forefront at the time of design of this solution.\n-- This will guide you through several security-related steps that cover an end-to-end security story for Azure Synapse Analytics. \n-- Some key take-aways from this are:\n-- Leverage Azure Key Vault to store sensitive connection information, such as access keys and passwords for linked services as\n--  well as in pipelines.\n--Introspect the data that is contained within the SQL Pools in the context of potential sensitive/confidential data disclosure. \n-- Identify the columns representing sensitive data, then secure them by adding column-level security. \n-- Determine at the table level what data should be hidden from specific groups of users then define security predicates to\n--  apply row level security (filters) on the table. If desired, you also have the option of applying Dynamic Data Masking \n-- to mask sensitive data returned in queries on a column by column basis.\n\n\n--Azure Synapse Analytics (ASA) is a powerful solution that handles security for many of the resources that it creates and \n-- manages. In order to run ASA, however, some foundational security measures need to be put in place to ensure the\n-- infrastructure that it relies upon is secure. In this exercise, we will walk through securing the supporting infrastructure\n-- of ASA.\n\n-- Observing the SQL Active Directory admin\n-- The SQL Active Directory Admin can be a user (the default) or group (best practice so that more than one user can be \n-- provided these permissions) security principal. The principal assigned to this will have administrative permissions \n-- to the SQL Pools contained in the workspace.\n\n\n-- Manage IP firewall rules\n-- Having robust Internet security is a must for every technology system. One way to mitigate internet threat vectors is by \n-- reducing the number of public IP addresses that can access the Azure Synapse Analytics Workspace through the use of \n-- IP firewall rules. The Azure Synapse Analytics workspace will then delegate those same rules to all managed public \n-- endpoints of the workspace, including those for SQL pools and SQL Serverless endpoints.\n\n-- Managing secrets with Azure Key Vault\n-- When dealing with connectivity to external data sources and services, sensitive connection information such as passwords and \n-- access keys should be properly handled. It is recommended that this type of information be stored in an Azure Key Vault. \n-- Leveraging Azure Key Vault not only protects against secrets being compromised, it also serves as a central source of truth; \n-- meaning that if a secret value needs to be updated (such as when cycling access keys on a storage account), \n-- it can be changed in one place and all services consuming this key will start pulling the new value immediately. \n-- Azure Key Vault encrypts and decrypts information transparently using 256-bit AES encryption, which is FIPS 140-2 compliant.\n\n-- Use Azure Key Vault for secrets when creating Linked Services\n-- Linked Services are synonymous with connection strings in Azure Synapse Analytics. Azure Synapse Analytics linked services \n-- provides the ability to connect to nearly 100 different types of external services ranging from Azure Storage Accounts to \n-- Amazon S3 and more. When connecting to external services, having secrets related to connection information is almost \n-- guaranteed. The best place to store these secrets is the Azure Key Vault. Azure Synapse Analytics provides the ability \n-- to configure all linked service connections with values from Azure Key Vault.\n\n\n-- Secure workspace pipeline runs\n-- It is recommended to store any secrets that are part of your pipeline in Azure Key Vault. In this task you will retrieve \n-- these values using a Web activity, just to show the mechanics. The second part of this task demonstrates using a Web \n-- activity in the pipeline to retrieve a secret from the Key Vault.\n\n-- Secure Azure Synapse Analytics SQL Pools\n-- Transparent Data Encryption (TDE) is a feature of SQL Server that provides encryption and decryption of data at rest, \n-- this includes: databases, log files, and back ups. When using this feature with ASA SQL Pools, it will use a built in \n-- symmetric Database Encryption Key (DEK) that is provided by the pool itself. With TDE, all stored data is encrypted on disk,\n--  when the data is requested, TDE will decrypt this data at the page level as it's read into memory, and vice-versa \n-- encrypting in-memory data before it gets written back to disk. As with the name, this happens transparently without \n-- affecting any application code. When creating a SQL Pool through ASA, Transparent Data Encryption is not enabled. \n-- The first part of this task will show you how to enable this feature.\n\n-- Column Level Security\n /*  Column-level security feature in Azure Synapse simplifies the design and coding of security in application.\n    It ensures column level security by restricting column access to protect sensitive data. */\n\n/* Scenario: In this scenario we will be working with two users. The first one is the CEO, he has access to all\n    data. The second one is DataAnalystMiami, this user doesn't have access to the confidential Revenue column\n    in the Sales table. Follow this lab, one step at a time to see how Column-level security removes access to the\n    Revenue column to DataAnalystMiami */\n\n--Step 1: Let us see how this feature in Azure Synapse works. Before that let us have a look at the Campaign table.\nselect  Top 100 * from wwi_Security.Sale\nwhere City is not null and state is not null\n\n/*  Consider a scenario where there are two users.\n    A CEO, who is an authorized  personnel with access to all the information in the database\n    and a Data Analyst, to whom only required information should be presented.*/\n\n-- Step:2 Verify the existence of the 'CEO' and 'DataAnalystMiami' users in the Datawarehouse.\nSELECT Name as [User1] FROM sys.sysusers WHERE name = N'CEO';\nSELECT Name as [User2] FROM sys.sysusers WHERE name = N'DataAnalystMiami';\n\n\n-- Step:3 Now let us enforce column level security for the DataAnalystMiami.\n/*  The Sales table in the warehouse has information like ProductID, Analyst, Product, CampaignName, Quantity, Region, State, City, RevenueTarget and Revenue.\n    The Revenue generated from every campaign is classified and should be hidden from DataAnalystMiami.\n*/\n\nREVOKE SELECT ON wwi_security.Sale FROM DataAnalystMiami;\nGRANT SELECT ON wwi_security.Sale([ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget]) TO DataAnalystMiami;\n-- This provides DataAnalystMiami access to all the columns of the Sale table but Revenue.\n\n-- Step:4 Then, to check if the security has been enforced, we execute the following query with current User As 'DataAnalystMiami', this will result in an error\n--  since DataAnalystMiami doesn't have select access to the Revenue column\nEXECUTE AS USER ='DataAnalystMiami';\nselect TOP 100 * from wwi_security.Sale;\n---\n-- The following query will succeed since we are not including the Revenue column in the query.\nEXECUTE AS USER ='DataAnalystMiami';\nselect [ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget] from wwi_security.Sale;\n\n-- Step:5 Whereas, the CEO of the company should be authorized with all the information present in the warehouse.To do so, we execute the following query.\nRevert;\nGRANT SELECT ON wwi_security.Sale TO CEO;  --Full access to all columns.\n\n-- Step:6 Let us check if our CEO user can see all the information that is present. Assign Current User As 'CEO' and the execute the query\nEXECUTE AS USER ='CEO'\nselect * from wwi_security.Sale\nRevert;\n\n-- Row Level Security\n/*\tRow level Security (RLS) in Azure Synapse enables us to use group membership to control access to rows in a table.\n\tAzure Synapse applies the access restriction every time the data access is attempted from any user. \n\tLet see how we can implement row level security in Azure Synapse.*/\n\n----------------------------------Row-Level Security (RLS), 1: Filter predicates------------------------------------------------------------------\n-- Step:1 The Sale table has two Analyst values: DataAnalystMiami and DataAnalystSanDiego. \n--     Each analyst has jurisdiction across a specific Region. DataAnalystMiami on the South East Region\n--      and DataAnalystSanDiego on the Far West region.\nSELECT DISTINCT Analyst, Region FROM wwi_security.Sale order by Analyst ;\n\n/* Scenario: WWI requires that an Analyst only see the data for their own data from their own region. The CEO should see ALL data.\n    In the Sale table, there is an Analyst column that we can use to filter data to a specific Analyst value. */\n\n/* We will define this filter using what is called a Security Predicate. This is an inline table-valued function that allows\n    us to evaluate additional logic, in this case determining if the Analyst executing the query is the same as the Analyst\n    specified in the Analyst column in the row. The function returns 1 (will return the row) when a row in the Analyst column is the same as the \n    user executing the query (@Analyst = USER_NAME()) or if the user executing the query is the CEO user (USER_NAME() = 'CEO')\n    whom has access to all data.\n*/\n\n-- Review any existing security predicates in the database\nSELECT * FROM sys.security_predicates\n\n--Step:2 Create a new Schema to hold the security predicate, then define the predicate function. It returns 1 (or True) when\n--  a row should be returned in the parent query.\nGO\n\nCREATE FUNCTION wwi_security.fn_securitypredicate(@Analyst AS sysname)  \n    RETURNS TABLE  \nWITH SCHEMABINDING  \nAS  \n    RETURN SELECT 1 AS fn_securitypredicate_result\n    WHERE @Analyst = USER_NAME() OR USER_NAME() = 'CEO'\nGO\n-- Now we define security policy that adds the filter predicate to the Sale table. This will filter rows based on their login name.\nCREATE SECURITY POLICY SalesFilter  \nADD FILTER PREDICATE wwi_security.fn_securitypredicate(Analyst)\nON wwi_security.Sale\nWITH (STATE = ON);\n\n------ Allow SELECT permissions to the Sale Table.------\nGRANT SELECT ON wwi_security.Sale TO CEO, DataAnalystMiami, DataAnalystSanDiego;\n\n-- Step:3 Let us now test the filtering predicate, by selecting data from the Sale table as 'DataAnalystMiami' user.\nEXECUTE AS USER = 'DataAnalystMiami' \nSELECT * FROM wwi_security.Sale;\nrevert;\n-- As we can see, the query has returned rows here Login name is DataAnalystMiami\n\n-- Step:4 Let us test the same for  'DataAnalystSanDiego' user.\nEXECUTE AS USER = 'DataAnalystSanDiego';\nSELECT * FROM wwi_security.Sale;\nrevert;\n-- RLS is working indeed.\n\n-- Step:5 The CEO should be able to see all rows in the table.\nEXECUTE AS USER = 'CEO';  \nSELECT * FROM wwi_security.Sale;\nrevert;\n-- And he can.\n\n--Step:6 To disable the security policy we just created above, we execute the following.\nALTER SECURITY POLICY SalesFilter  \nWITH (STATE = OFF);\n\nDROP SECURITY POLICY SalesFilter;\nDROP FUNCTION wwi_security.fn_securitypredicate;\n\n-- Dynamic Data Masking\n-------------------------------------------------------------------------Dynamic Data Masking (DDM)----------------------------------------------------------------------------------------------------------\n/*  Dynamic data masking helps prevent unauthorized access to sensitive data by enabling customers\n    to designate how much of the sensitive data to reveal with minimal impact on the application layer.\n    Let see how */\n\n/* Scenario: WWI has identified sensitive information in the CustomerInfo table. They would like us to \n    obfuscate the CreditCard and Email columns of the CustomerInfo table to DataAnalysts */\n\n-- Step:1 Let us first get a view of CustomerInfo table.\nSELECT TOP (100) * FROM wwi_security.CustomerInfo;\n\n-- Step:2 Let's confirm that there are no Dynamic Data Masking (DDM) applied on columns.\nSELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \nFROM sys.masked_columns AS c  \nJOIN sys.tables AS tbl\n    ON c.[object_id] = tbl.[object_id]  \nWHERE is_masked = 1\n    AND tbl.name = 'CustomerInfo';\n-- No results returned verify that no data masking has been done yet.\n\n-- Step:3 Now lets mask 'CreditCard' and 'Email' Column of 'CustomerInfo' table.\nALTER TABLE wwi_security.CustomerInfo  \nALTER COLUMN [CreditCard] ADD MASKED WITH (FUNCTION = 'partial(0,\"XXXX-XXXX-XXXX-\",4)');\nGO\nALTER TABLE wwi_security.CustomerInfo\nALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');\nGO\n-- The columns are sucessfully masked.\n\n-- Step:4 Let's see Dynamic Data Masking (DDM) applied on the two columns.\nSELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \nFROM sys.masked_columns AS c  \nJOIN sys.tables AS tbl\n    ON c.[object_id] = tbl.[object_id]  \nWHERE is_masked = 1\n    AND tbl.name ='CustomerInfo';\n\n-- Step:5 Now, let us grant SELECT permission to 'DataAnalystMiami' on the 'CustomerInfo' table.\nGRANT SELECT ON wwi_security.CustomerInfo TO DataAnalystMiami;  \n\n-- Step:6 Logged in as  'DataAnalystMiami' let us execute the select query and view the result.\nEXECUTE AS USER = 'DataAnalystMiami';  \nSELECT * FROM wwi_security.CustomerInfo;\n\n-- Step:7 Let us remove the data masking using UNMASK permission\nGRANT UNMASK TO DataAnalystMiami;\nEXECUTE AS USER = 'DataAnalystMiami';  \nSELECT *\nFROM wwi_security.CustomerInfo;\nrevert;\nREVOKE UNMASK TO DataAnalystMiami;  \n\n----step:8 Reverting all the changes back to as it was.\nALTER TABLE wwi_security.CustomerInfo\nALTER COLUMN CreditCard DROP MASKED;\nGO\nALTER TABLE wwi_security.CustomerInfo\nALTER COLUMN Email DROP MASKED;\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_explore query performance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_datawarehouse optimization"
				},
				"content": {
					"query": "\n-- The script takes around 24 seconds to execute and returns a count of ~ 340 million rows in the table.\nSELECT  \n    COUNT_BIG(*)\nFROM\n    [wwi_staging].[SaleHeap]\n\n-- More Complex Statement\n-- The script takes up to a 70 seconds to execute and returns the result. \n-- There is clearly something wrong with the Sale_Heap table that induces the performance hit.\n-- Note the OPTION clause used in the statement. This comes in handy when you're looking to \n-- identify your query in the sys.dm_pdw_exec_requests DMV.\n-- The ROUND_ROBIN distribution and The HEAP structure of the table could be the reason for performance hit\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_staging].[SaleHeap] S\n    GROUP BY\n        S.CustomerId\n) T\nOPTION (LABEL = 'Sales Heap')\n\n-- Run this time with the EXPLAIN WITH_RECOMMENDATIONS line before it\n-- The EXPLAIN WITH_RECOMMENDATIONS clause returns the query plan for an Azure Synapse Analytics SQL statement without running the statement.\n--  Use EXPLAIN to preview which operations will require data movement and to view the estimated costs of the query operations. \n-- By default, you will get the execution plan in XML format, which you can export to other formats like CSV or JSON.\n--  Do not select Query Plan from the toolbar as it will try do download the query plan and open it in SQL Server Management Studio.\nEXPLAIN WITH_RECOMMENDATIONS\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_staging].[SaleHeap] S\n    GROUP BY\n        S.CustomerId\n) T\n\n-- Notice the details of the internal layout of the MPP system:\n-- This layout is given by the current Date Warehouse Units (DWU) setting. In the setup used for the example above,\n--  we were running at DW100c which means that there is a single physical node to service the 60 distributions, giving a number of, again, \n-- 60 distributions per physical node. Depending on your own DWU settings, these numbers will vary.\n-- The query plan indicates data movement is required. This is indicated by the SHUFFLE_MOVE distributed SQL operation. \n-- Data movement is an operation where parts of the distributed tables are moved to different nodes during query execution. \n-- This operation is required where the data is not available on the target node, most commonly when the tables do not share the distribution key. \n-- The most common data movement operation is shuffle. During shuffle, for each input row, Synapse computes a hash value using the join \n-- columns and then sends that row to the node that owns that hash value. Either one or both sides of join can participate in the shuffle. \n\n-- Besides the EXPLAIN statement, you can also understand the plan details using the sys.dm_pdw_request_steps DMV.\nSELECT  \n    *\nFROM    \n    sys.dm_pdw_exec_requests\nWHERE   \n    [label] = 'Sales Heap'\n\n-- Grab QID from above query\nSELECT\n   *\nFROM\n    sys.dm_pdw_request_steps\nWHERE\n    request_id = 'QID3984'\nORDER BY\n   step_index\n\n-- The steps (indexed 0 to 4) are matching operations 2 to 6 from the query plan. Again, the culprit stands out: the step with index 2 \n-- describes the inter-partition data movement operation. By looking at the TOTAL_ELAPSED_TIME column one can clearly tell the \n-- largest part of the query time is generated by this step.\n\n-- Get more details on the problematic step using the following SQL statement \n-- (replace the request_id and step_index values from the previous query results):\nSELECT\n*\nFROM\n    sys.dm_pdw_sql_requests\nWHERE\n    request_id = 'QID3984'\n    AND step_index = 2\nORDER BY\n    distribution_id\n\n-- The results of the statement provide details about data being moved at each distribution. The ROWS_PROCESSED column is especially \n-- useful here to get an estimate of the magnitude of the data movement happening when the query is executed.\n\n--  Improve table structure with hash distribution and columnstore index\n-- CTAS is a more customizable version of the SELECT...INTO statement. SELECT...INTO doesn't allow you to change either the \n-- distribution method or the index type as part of the operation. You create the new table by using the default distribution \n-- type of ROUND_ROBIN, and the default table structure of CLUSTERED COLUMNSTORE INDEX.\nCREATE TABLE [wwi_perf].[SaleHash]\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX\n)\nAS\nSELECT\n    *\nFROM\n    [wwi_staging].[SaleHeap] \n\n-- Run the query again to see the performance improvements:\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_perf].[SaleHash]  S\n    GROUP BY\n        S.CustomerId\n) T\n\n-- Run the following EXPLAIN statement again to get the query plan \n-- (do not select Query Plan from the toolbar as it will try do download the query plan and open it in SQL Server Management Studio):\nEXPLAIN\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_perf].[SaleHash] S\n    GROUP BY\n        S.CustomerId\n) T\n\n-- COmplex Query\nSELECT\n    AVG(TotalProfit) as AvgMonthlyCustomerProfit\nFROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n        ,SUM(S.TotalAmount) as TotalAmount\n        ,AVG(S.TotalAmount) as AvgAmount\n        ,SUM(S.ProfitAmount) as TotalProfit\n        ,AVG(S.ProfitAmount) as AvgProfit\n    FROM\n        [wwi_perf].[SaleHash] S\n        join [wwi].[Date] D on\n            D.DateId = S.TransactionDate\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n) T\n\n-- Improve further the structure of the table with partitioning\n-- Date columns are usually good candidates for partitioning tables at the distributions level. In the case of your sales data,\n--  partitioning based on the TransactionDateId column seems to be a good choice.\nCREATE TABLE [wwi_perf].[Sale_Partition01]\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX,\n\tPARTITION\n\t(\n\t\t[TransactionDate] RANGE RIGHT FOR VALUES (\n            20190101, 20190201, 20190301, 20190401, 20190501, 20190601, 20190701, 20190801, 20190901, 20191001, 20191101, 20191201)\n\t)\n)\nAS\nSELECT\n\t*\nFROM\t\n\t[wwi_perf].[SaleHash]\nOPTION  (LABEL  = 'CTAS : Sale_Partition01')\n\nCREATE TABLE [wwi_perf].[Sale_Partition02]\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX,\n\tPARTITION\n\t(\n\t\t[TransactionDate] RANGE RIGHT FOR VALUES (\n            20190101, 20190401, 20190701, 20191001)\n\t)\n)\nAS\nSELECT *\nFROM\n    [wwi_perf].[SaleHash]\nOPTION  (LABEL  = 'CTAS : Sale_Partition02')\n\n-- Notice the two partitioning strategies we've used here. The first partitioning scheme is month-based and the second is quarter-based.\n--  You will explore in the subtle differences between these and understand the potential performance implications resulting from these choices.\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_query parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/01_sales data"
				},
				"content": {
					"query": "-- Perform aggregates and grouping operations to better understand the data.\nSELECT\n    TransactionDate, ProductId,\n        CAST(SUM(ProfitAmount) AS decimal(18,2)) AS [(sum) Profit],\n        CAST(AVG(ProfitAmount) AS decimal(18,2)) AS [(avg) Profit],\n        SUM(Quantity) AS [(sum) Quantity]\nFROM\n    OPENROWSET(\n        BULK 'https://dataairawdls.dfs.core.windows.net/wwi-02/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS [r] GROUP BY r.TransactionDate, r.ProductId;\n\n\n-- How many records are contained within the Parquet files for 2019 data. \n-- This information is important for planning how we optimize for importing the data into Azure Synapse Analytics.\nSELECT\n    COUNT(*)\nFROM\n    OPENROWSET(\n        BULK 'https://dataairawdls.dfs.core.windows.net/wwi-02/sale-small/Year=2019/*/*/*/*',\n        FORMAT='PARQUET'\n    ) AS [r];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_raw parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NycTaxi/Serverless"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dataairawdls.dfs.core.windows.net/nyctaxi/nyctaxi-staging/transactional-data/type=green/year=2015/month=*/*.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_register model inferencing')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/05_machine learning"
				},
				"content": {
					"query": "-- Create a view to score machine learning models.\nCREATE VIEW wwi_ml.CustomerPrediction\nAS\n-- Select input scoring data and assign aliases.\nWITH InputData AS\n(\n    SELECT\n        [Cost],\n        [Size],\n        [Price],\n        [PrimaryBrandId],\n        [GenderId],\n        [MaritalStatus],\n        [LowerIncomeBound],\n        [UpperIncomeBound]\n    FROM [wwi_ml].[CustomerTest]\n)\n-- Using T-SQL Predict command to score machine learning models. \nSELECT *\nFROM PREDICT (MODEL = (SELECT [model] FROM wwi_ml.AMLModel WHERE [ID] = 'aml-synapse-classifier:1'),\n              DATA = InputData,\n              RUNTIME = ONNX) WITH ([label_out] [bigint])\nGO\n\n-- Display the results.\nSELECT * FROM wwi_ml.CustomerPrediction",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_verify workload')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/06_monitoring"
				},
				"content": {
					"query": "--First, let's confirm that there are no queries currently being run by users logged in workload01 or workload02\n\nSELECT s.login_name, r.[Status], r.Importance, submit_time, \nstart_time ,s.session_id FROM sys.dm_pdw_exec_sessions s \nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload01','asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended') \n--and submit_time>dateadd(minute,-2,getdate())\nORDER BY submit_time ,s.login_name\n\n\n-- Execute 1_Execute Business Analyst and CEO Pipeline\n-- Let's see what happened to all the queries we just triggered as they flood the system. Return to the query window, \n-- replace the script with the following:\n\nSELECT s.login_name, r.[Status], r.Importance, submit_time, start_time ,s.session_id FROM sys.dm_pdw_exec_sessions s \nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload01','asa.sql.workload02') \nand Importance is not NULL AND r.[status] in ('Running','Suspended') and submit_time>dateadd(minute,-2,getdate())\nORDER BY submit_time ,status\n\nIF EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE name = 'CEO')\nBEGIN\n    DROP WORKLOAD CLASSIFIER CEO;\nEND\nCREATE WORKLOAD CLASSIFIER CEO\n  WITH (WORKLOAD_GROUP = 'largerc'\n  ,MEMBERNAME = 'asa.sql.workload01',IMPORTANCE = High);\n\n\nSELECT s.login_name, r.[Status], r.Importance, submit_time, start_time ,s.session_id FROM sys.dm_pdw_exec_sessions s \nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload01','asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended') and submit_time>dateadd(minute,-2,getdate())\nORDER BY submit_time ,status desc",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create resource users')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "--USE [DedicatedPoolName]\n-- Run against tpcdw dedicated pool database\n\nCREATE USER Userstaticrc10 FOR LOGIN Userstaticrc10; \nGO \nEXEC sp_addrolemember 'db_owner', 'Userstaticrc10';\nGO\nEXEC sp_addrolemember 'staticrc10', Userstaticrc10\nGO\n\nCREATE USER Userstaticrc20 FOR LOGIN Userstaticrc20; \nGO \nEXEC sp_addrolemember 'db_owner', 'Userstaticrc20';\nGO\nEXEC sp_addrolemember 'staticrc20', Userstaticrc20\nGO\n\nCREATE USER Userstaticrc30 FOR LOGIN Userstaticrc30; \nGO \nEXEC sp_addrolemember 'db_owner', 'Userstaticrc30';\nGO\nEXEC sp_addrolemember 'staticrc30', Userstaticrc30\nGO\n\nCREATE USER Userstaticrc40 FOR LOGIN Userstaticrc40; \nGO \nEXEC sp_addrolemember 'db_owner', 'Userstaticrc40';\nGO\nEXEC sp_addrolemember 'staticrc40', Userstaticrc40\nGO\n\nCREATE USER Userstaticrc50 FOR LOGIN Userstaticrc50; \nGO \nEXEC sp_addrolemember 'db_owner', 'Userstaticrc50';\nGO\nEXEC sp_addrolemember 'staticrc50', Userstaticrc50\nGO\n\nCREATE USER Userstaticrc60 FOR LOGIN Userstaticrc60; \nGO \nEXEC sp_addrolemember 'db_owner', 'Userstaticrc60';\nGO\nEXEC sp_addrolemember 'staticrc60', Userstaticrc60\nGO\n\nCREATE USER Userstaticrc70 FOR LOGIN Userstaticrc70; \nGO \nEXEC sp_addrolemember 'db_owner', 'Userstaticrc70';\nGO\nEXEC sp_addrolemember 'staticrc70', Userstaticrc70\nGO\n\nCREATE USER Userstaticrc80 FOR LOGIN Userstaticrc80; \nGO \nEXEC sp_addrolemember 'db_owner', 'Userstaticrc80';\nGO\nEXEC sp_addrolemember 'staticrc80', Userstaticrc80\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaitpcdw",
						"poolName": "dataaitpcdw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_import sales data with polybase and copy')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/01_sales data"
				},
				"content": {
					"query": "-- There are different options for loading large amounts and varying types of data into \n-- Azure Synapse Analytics, such as through T-SQL commands using a Synapse SQL Pool, and with \n-- Azure Synapse pipelines. In our scenario, Wide World Importers stores most of their raw data in a\n--  data lake and in different formats. Among the data loading options available to them, WWI's \n-- data engineers are most comfortable using T-SQL.\n\n-- However, even with their familiarity with SQL, there are some things to consider when loading large \n-- or disparate file types and formats. Since the files are stored in ADLS Gen2, \n-- WWI can use either PolyBase external tables or the new COPY statement. \n-- Both options enable fast and scalable data load operations, but there are some differences\n--  between the two:\n\n-- PolyBase\t| COPY\n-- GA, stable |\tGA, stable\n-- Needs CONTROL permission |\tRelaxed permission\n-- Has row width limits\t| No row width limit\n-- No delimiters within text | Supports delimiters in text\n-- Fixed line delimiter |\tSupports custom column and row delimiters\n-- Complex to set up in code | Reduces amount of code\n\n-- WWI has heard that PolyBase is generally faster than COPY, especially when working with large data sets.\n\n-- The Sale table has a columnstore index to optimize for read-heavy workloads. \n-- It is also used heavily for reporting and ad-hoc queries. To achieve the fastest loading speed and \n-- minimize the impact of heavy data inserts on the Sale table, \n-- WWI has decided to create a staging table for loads.\n\n-- Create a new staging table named SaleHeap in a new schema named wwi_staging. \n-- You will define it as a heap and use round-robin distribution. When WWI finalizes their data loading \n-- pipeline, they will load the data into SaleHeap, then insert from the heap table into Sale. \n-- Although this is a two-step process, the second step of inserting the rows to the production table\n--  does not incur data movement across the distributions.\n\nCREATE SCHEMA [wwi_staging]\n\nCREATE TABLE [wwi_staging].[SaleHeap]\n( \n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDate] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH (\n    DISTRIBUTION = ROUND_ROBIN,\n    HEAP\n)\n\nCREATE TABLE [wwi_staging].[Sale]\n(\n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDate] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX,\n    PARTITION\n    (\n        [TransactionDaten    )\n)\n\n-- Configure and run Polybase load operation\n-- PolyBase requires the following elements:\n\n-- An external data source that points to the abfss path in ADLS Gen2 where the Parquet files are located\n-- An external file format for Parquet files\n-- An external table that defines the schema for the files, as well as the location, data source, and \n-- file format\n\n-- Replace SUFFIX with the lab workspace id.\nCREATE EXTERNAL DATA SOURCE ABSS\nWITH\n( TYPE = HADOOP,\n    LOCATION = 'abfss://wwi-02@dataairawdls.dfs.core.windows.net'\n);\n\nCREATE EXTERNAL FILE FORMAT [ParquetFormat]\nWITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\nGO\n\n-- Notice that we defined TransactionId as an nvarchar(36) field instead of uniqueidentifier. \n-- This is because external tables do not currently support uniqueidentifier columns:\n\nCREATE SCHEMA [wwi_external];\nGO\n\nCREATE EXTERNAL TABLE [wwi_external].Sales\n    (\n        [TransactionId] [nvarchar](36)  NOT NULL,\n        [CustomerId] [int]  NOT NULL,\n        [ProductId] [smallint]  NOT NULL,\n        [Quantity] [smallint]  NOT NULL,\n        [Price] [decimal](9,2)  NOT NULL,\n        [TotalAmount] [decimal](9,2)  NOT NULL,\n        [TransactionDate] [int]  NOT NULL,\n        [ProfitAmount] [decimal](9,2)  NOT NULL,\n        [Hour] [tinyint]  NOT NULL,\n        [Minute] [tinyint]  NOT NULL,\n        [StoreId] [smallint]  NOT NULL\n    )\nWITH\n    (\n        LOCATION = '/sale-small/Year=2019',  \n        DATA_SOURCE = ABSS,\n        FILE_FORMAT = [ParquetFormat]  \n    )  \nGO\n\n-- On DW100c, following query takes ~20 minutes\nINSERT INTO [wwi_staging].[SaleHeap]\nSELECT *\nFROM [wwi_external].[Sales]\n\n-- # of rows 339507246\nSELECT COUNT(1) FROM wwi_staging.SaleHeap(nolock)\n\n-- Configure and run the COPY statement\n-- let's see how to perform the same load operation with the COPY statement.\nTRUNCATE TABLE wwi_staging.SaleHeap;\nGO\n\n-- COPY INTO took about ~19 minute\nCOPY INTO wwi_staging.SaleHeap\nFROM 'https://dataairawdls.dfs.core.windows.net/wwi-02/sale-small%2FYear%3D2019'\nWITH (\n    FILE_TYPE = 'PARQUET',\n    COMPRESSION = 'SNAPPY'\n)\nGO\n\n-- # of rows 339507246\nSELECT COUNT(1) FROM wwi_staging.SaleHeap(nolock)\n\n--Do the number of rows match for both load operations? Which activity was fastest? \n-- You should see that both copied the same amount of data in roughly the same amount of time.\n\n-- Load data into the clustered columnstore table\n-- For both of the load operations above, we inserted data into the heap table. \n-- What if we inserted into the clustered columnstore table instead? Is there really a performance difference?\n\n-- Copy into Sales - Took ~20:21 minutes\nCOPY INTO wwi_staging.Sale\nFROM 'https://dataairawdls.dfs.core.windows.net/wwi-02/sale-small%2FYear%3D2019'\nWITH (\n    FILE_TYPE = 'PARQUET',\n    COMPRESSION = 'SNAPPY'\n)\nGO\n\nSELECT COUNT(1) FROM wwi_staging.Sale(nolock)\n-- PolyBase vs. COPY (DW100) (insert 2019 small data set (339,507,246 rows)):\n-- COPY (Heap: 18:91, clustered columnstore: 20:21)\n-- PolyBase (Heap: 19:XX)\n\n-- Use COPY to load text file with non-standard row delimiters\n-- One of the advantages COPY has over PolyBase is that it supports custom column and row delimiters.\n-- WWI has a nightly process that ingests regional sales data from a partner analytics system and \n-- saves the files in the data lake. The text files use non-standard column and row delimiters \n-- where columns are delimited by a . and rows by a ,:\n\nCREATE TABLE [wwi_staging].DailySalesCounts\n    (\n        [Date] [int]  NOT NULL,\n        [NorthAmerica] [int]  NOT NULL,\n        [SouthAmerica] [int]  NOT NULL,\n        [Europe] [int]  NOT NULL,\n        [Africa] [int]  NOT NULL,\n        [Asia] [int]  NOT NULL\n    )\nGO\n\n-- Replace <PrimaryStorage> with the workspace default storage account name.\nCOPY INTO wwi_staging.DailySalesCounts\nFROM 'https://dataairawdls.dfs.core.windows.net/wwi-02/campaign-analytics/dailycounts.txt'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIELDTERMINATOR='.',\n    ROWTERMINATOR=','\n)\nGO\n\nSELECT * FROM [wwi_staging].DailySalesCounts\nORDER BY [Date] DESC\n\n-- Use PolyBase to load text file with non-standard row delimiters\nCREATE EXTERNAL FILE FORMAT csv_dailysales\nWITH (\n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS (\n        FIELD_TERMINATOR = '.',\n        DATE_FORMAT = '',\n        USE_TYPE_DEFAULT = False\n    )\n);\nGO\n\nCREATE EXTERNAL TABLE [wwi_external].DailySalesCounts\n    (\n        [Date] [int]  NOT NULL,\n        [NorthAmerica] [int]  NOT NULL,\n        [SouthAmerica] [int]  NOT NULL,\n        [Europe] [int]  NOT NULL,\n        [Africa] [int]  NOT NULL,\n        [Asia] [int]  NOT NULL\n    )\nWITH\n    (\n        LOCATION = '/campaign-analytics/dailycounts.txt',  \n        DATA_SOURCE = ABSS,\n        FILE_FORMAT = csv_dailysales\n    )  \nGO\nINSERT INTO [wwi_staging].[DailySalesCounts]\nSELECT *\nFROM [wwi_external].[DailySalesCounts]\n\n-- You should see an error similar to: Failed to execute query. Error: HdfsBridge::recordReaderFillBuffer\n--  - Unexpected error encountered filling record reader buffer: HadoopExecutionException: Too many columns in the line..\n-- The row delimiter in delimited-text files must be supported by Hadoop's LineRecordReader. \n-- That is, it must be either \\r, \\n, or \\r\\n. These delimiters are not user-configurable.\n-- This is an example of where COPY's flexibility gives it an advantage over PolyBase.\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_improve query performance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_datawarehouse optimization"
				},
				"content": {
					"query": "\n-- Query takes up to 60 seconds to execute. That is expected, since distinct counts are one of the most difficult to optimize types of queries.\nSELECT COUNT( DISTINCT CustomerId) from wwi_staging.SaleHeap\n\n-- Run the Hyperlog approach\n-- Query takes about half the time to execute.\nSELECT APPROX_COUNT_DISTINCT(CustomerId) from wwi_staging.SaleHeap\n\n-- Use materialized views. As opposed to a standard view, a materialized view pre-computes, stores, and maintains its data in a Synapse SQL pool \n-- just like a table. Here is a basic comparison between standard and materialized views:\n\n--Comparison |\tView | Materialized View\n--View definition |\tStored in Azure data warehouse.\t| Stored in Azure data warehouse.\n--View content | Generated each time when the view is used. | Pre-processed and stored in Azure data warehouse during view creation. Updated as data is added to the underlying tables.\n--Data refresh| Always updated | Always updated\n--Speed to retrieve view data from complex queries | \tSlow | Fast\n--Extra storage| No| Yes\n--Syntax | CREATE VIEW\t| CREATE MATERIALIZED VIEW AS SELECT\n\n-- 11 Seconds\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Quarter\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_perf].[Sale_Partition02] S\n        join [wwi].[Date] D on\n            S.TransactionDate = D.DateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Quarter\n) T\n\n-- 1 Second\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n        ,SUM(S.ProfitAmount) as TotalProfit\n    FROM\n        [wwi_perf].[Sale_Partition02] S\n        join [wwi].[Date] D on\n            S.TransactionDate = D.DateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n) T\n\n-- Create materialized view\nCREATE MATERIALIZED VIEW\n    wwi_perf.mvCustomerSales\nWITH\n(\n    DISTRIBUTION = HASH( CustomerId )\n)\nAS\nSELECT\n    S.CustomerId\n    ,D.Year\n    ,D.Quarter\n    ,D.Month\n    ,SUM(S.TotalAmount) as TotalAmount\n    ,SUM(S.ProfitAmount) as TotalProfit\nFROM\n    [wwi_perf].[Sale_Partition02] S\n    join [wwi].[Date] D on\n        S.TransactionDate = D.DateId\nGROUP BY\n    S.CustomerId\n    ,D.Year\n    ,D.Quarter\n    ,D.Month\n\n-- Run the following query to get an estimated execution plan (do not select Query Plan from the toolbar as it will try \n-- do download the query plan and open it in SQL Server Management Studio):\nEXPLAIN\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Quarter\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_perf].[Sale_Partition02] S\n        join [wwi].[Date] D on\n            S.TransactionDate = D.DateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Quarter\n) T\n\n-- The same materialized view is also used to optimize the second query. Get its execution plan:\nEXPLAIN\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n        ,SUM(S.ProfitAmount) as TotalProfit\n    FROM\n        [wwi_perf].[Sale_Partition02] S\n        join [wwi].[Date] D on\n            S.TransactionDate = D.DateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n) T\n\nDBCC PDW_SHOWMATERIALIZEDVIEWOVERHEAD ( 'wwi_perf.mvCustomerSales' )\n\n-- The results show that BASE_VIEW_ROWS are equal to TOTAL_ROWS (and hence OVERHEAD_RATIO is 1). \n-- The materialized view is perfectly aligned with the base view. This situation is expected to change once the underlying data starts to change.\n\nUPDATE\n    [wwi_perf].[Sale_Partition02]\nSET\n    TotalAmount = TotalAmount * 1.01\n    ,ProfitAmount = ProfitAmount * 1.01\nWHERE\n    CustomerId BETWEEN 100 and 200\n\n-- There is now a delta stored by the materialized view which results in TOTAL_ROWS being greater \n-- than BASE_VIEW_ROWS and OVERHEAD_RATIO being greater than 1.\nDBCC PDW_SHOWMATERIALIZEDVIEWOVERHEAD ( 'wwi_perf.mvCustomerSales' )\n\n-- Rebuild the materialized view and check that the overhead ration went back to 1:\nALTER MATERIALIZED VIEW [wwi_perf].[mvCustomerSales] REBUILD\n\nDBCC PDW_SHOWMATERIALIZEDVIEWOVERHEAD ( 'wwi_perf.mvCustomerSales' )\n\n-- Use result set caching\nSELECT\n    name\n    ,is_result_set_caching_on\nFROM\n    sys.databases\n\n-- If False is returned for your SQL pool, run the following query to activate it (you need to run it on the master database and \n-- replace <sql_pool> with the name of your SQL pool):\nALTER DATABASE dataaidw\nSET RESULT_SET_CACHING ON\n\n-- The operations to create result set cache and retrieve data from the cache happen on the control node of a Synapse SQL pool instance. \n-- When result set caching is turned ON, running queries that return large result set (for example, >1GB) can cause high throttling on \n-- the control node and slow down the overall query response on the instance. Those queries are commonly used during data exploration or\n--  ETL operations. To avoid stressing the control node and cause performance issue, users should turn OFF result set caching on the \n-- database before running those types of queries.\n\n\n-- After activating result set caching, run a query and immediately check if it hit the cache (change the database back to your SQL Pool):\nSELECT\n    D.Year\n    ,D.Quarter\n    ,D.Month\n    ,SUM(S.TotalAmount) as TotalAmount\n    ,SUM(S.ProfitAmount) as TotalProfit\nFROM\n    [wwi_perf].[Sale_Partition02] S\n    join [wwi].[Date] D on\n        S.TransactionDate = D.DateId\nGROUP BY\n    D.Year\n    ,D.Quarter\n    ,D.Month\nOPTION (LABEL = 'Result set caching')\n\nSELECT\n    result_cache_hit\nFROM\n    sys.dm_pdw_exec_requests\nWHERE\n    request_id =\n    (\n        SELECT TOP 1\n            request_id\n        FROM\n            sys.dm_pdw_exec_requests\n        WHERE\n            [label] = 'Result set caching'\n        ORDER BY\n            start_time desc\n    )\n\n-- As expected, the result is False. Still, you can identify that, while running the query, Synapse has also cached the result set. \n-- Run the following query to get the execution steps:\nSELECT\n    step_index\n    ,operation_type\n    ,location_type\n    ,status\n    ,total_elapsed_time\n    ,command\nFROM\n    sys.dm_pdw_request_steps\nWHERE\n    request_id =\n    (\n        SELECT TOP 1\n            request_id\n        FROM\n            sys.dm_pdw_exec_requests\n        WHERE\n            [label] = 'Result set caching'\n        ORDER BY\n            start_time desc\n    )\n\n-- You can control at the user session level the use of the result set cache. The following query shows how to deactivate and \n-- activate the result cache:\nSET RESULT_SET_CACHING OFF\n\nSELECT\n    D.Year\n    ,D.Quarter\n    ,D.Month\n    ,SUM(S.TotalAmount) as TotalAmount\n    ,SUM(S.ProfitAmount) as TotalProfit\nFROM\n    [wwi_perf].[Sale_Partition02] S\n    join [wwi].[Date] D on\n        S.TransactionDateId = D.DateId\nGROUP BY\n    D.Year\n    ,D.Quarter\n    ,D.Month\nOPTION (LABEL = 'Result set caching off')\n\nSET RESULT_SET_CACHING ON\n\nSELECT\n    D.Year\n    ,D.Quarter\n    ,D.Month\n    ,SUM(S.TotalAmount) as TotalAmount\n    ,SUM(S.ProfitAmount) as TotalProfit\nFROM\n    [wwi_perf].[Sale_Partition02] S\n    join [wwi].[Date] D on\n        S.TransactionDate = D.DateId\nGROUP BY\n    D.Year\n    ,D.Quarter\n    ,D.Month\nOPTION (LABEL = 'Result set caching on')\n\nSELECT TOP 2\n    request_id\n    ,[label]\n    ,result_cache_hit\nFROM\n    sys.dm_pdw_exec_requests\nWHERE\n    [label] in ('Result set caching off', 'Result set caching on')\nORDER BY\n    start_time desc\n\n-- The result of SET RESULT_SET_CACHING OFF is visible in the cache hit test results (The result_cache_hit column returns 1 for cache hit, \n-- 0 for cache miss, and negative values for reasons why result set caching was not used.):\n\n-- At any moment, you can check the space used by the results cache:\nDBCC SHOWRESULTCACHESPACEUSED\n\n-- Finally, disable result set caching on the database using the following query (you need to run it on the master database and replace \n-- `<sql_pool> with the name of your SQL pool): (It can take up to a minute to disable Result Set Caching.)\nALTER DATABASE [dataaidw]\nSET RESULT_SET_CACHING OFF\n\n-- Make sure you disable result set caching on the SQL pool. Failing to do so will have a negative impact on the remainder of this lab, \n-- as it will skew execution times and defeat the purpose of several upcoming exercises.\n\n-- The maximum size of result set cache is 1 TB per database. The cached results are automatically invalidated when the underlying query data change.\n--The cache eviction is managed by SQL Analytics automatically following this schedule:\n-- Every 48 hours if the result set hasn't been used or has been invalidated.\n-- When the result set cache approaches the maximum size.\n-- Users can manually empty the entire result set cache by using one of these options:\n\n-- Turn OFF the result set cache feature for the database\n-- Run DBCC DROPRESULTSETCACHE while connected to the database\n-- Pausing a database won't empty cached result set.\n\n\n-- Create and update statistics\n-- The more the SQL pool resource knows about your data, the faster it can execute queries. After loading data into SQL pool, \n-- collecting statistics on your data is one of the most important things you can do for query optimization.\n-- The SQL pool query optimizer is a cost-based optimizer. It compares the cost of various query plans, and then chooses the plan with \n-- the lowest cost. In most cases, it chooses the plan that will execute the fastest.\n-- For example, if the optimizer estimates that the date your query is filtering on will return one row it will choose one plan.\n--  If it estimates that the selected date will return 1 million rows, it will return a different plan.\n\n-- Check if statistics are set to be automatically created in the database:\nSELECT name, is_auto_create_stats_on\nFROM sys.databases\n\n-- See statistics that have been automatically created (change the database back to your SQL Pool):\nSELECT\n    *\nFROM\n    sys.dm_pdw_exec_requests\nWHERE\n    Command like 'CREATE STATISTICS%'\n\n-- Check if there are any statistics created for CustomerId from the wwi_perf.Sale_Has table:\nDBCC SHOW_STATISTICS ('wwi_perf.SaleHash', CustomerId) WITH HISTOGRAM\n\n-- You should get an error stating that statistics for CustomerId does not exist.\n-- Create statistics for CustomerId:\nCREATE STATISTICS Sale_Hash_CustomerId ON wwi_perf.SaleHash (CustomerId)\n\n-- Display the newly created statistics:\nDBCC SHOW_STATISTICS([wwi_perf.SaleHash], 'Sale_Hash_CustomerId')\n\n-- The more SQL pool knows about your data, the faster it can execute queries against it. After loading data into SQL pool, collecting \n-- statistics on your data is one of the most important things you can do to optimize your queries.\n-- The SQL pool query optimizer is a cost-based optimizer. It compares the cost of various query plans, and then chooses the plan with the\n--  lowest cost. In most cases, it chooses the plan that will execute the fastest.\n-- For example, if the optimizer estimates that the date your query is filtering on will return one row it will choose one plan. \n-- If it estimates that the selected date will return 1 million rows, it will return a different plan.\n\n-- Create and update indexes\n-- Clustered Columnstore Index vs. Heap vs. Clustered and Nonclustered\n-- Clustered indexes may outperform clustered columnstore indexes when a single row needs to be quickly retrieved. \n-- For queries where a single or very few row lookup is required to perform with extreme speed, consider a cluster index or \n-- nonclustered secondary index. The disadvantage to using a clustered index is that only queries that benefit are the ones \n-- that use a highly selective filter on the clustered index column. To improve filter on other columns a nonclustered index can \n-- be added to other columns. However, each index which is added to a table adds both space and processing time to loads.\n\n-- Retrieve information about a single customer from the table with CCI:\nSELECT\n    *\nFROM\n    [wwi_perf].[SaleHash]\nWHERE\n    CustomerId = 500000\n\n-- Retrieve information about a single customer from the table with a clustered index:\nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Index]\nWHERE\n    CustomerId = 500000\n\n-- The execution time is similar to the one for the query above. Clustered columnstore indexes have no significant advantage over \n-- clustered indexes in the specific scenario of highly selective queries.\n\n-- Retrieve information about multiple customers from the table with CCI:\nSELECT\n    *\nFROM\n    [wwi_perf].[SaleHash]\nWHERE\n    CustomerId between 400000 and 400100\n\n-- and then retrieve the same information from the table with a clustered index:\nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Index]\nWHERE\n    CustomerId between 400000 and 400100\n\n-- Run both queries several times to get a stable execution time. Under normal conditions, you should see that even with a \n-- relatively small number of customers, the CCI table starts yielding better results than the clustered index table.\n\n-- Now add an extra condition on the query, one that refers to the StoreId column:\nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Index]\nWHERE\n    CustomerId between 400000 and 400100\n    and StoreId between 2000 and 4000\n\n-- Create a non-clustered index on the StoreId column:\nCREATE INDEX Store_Index on wwi_perf.Sale_Index (StoreId)\n\n-- Creating a non-clustered index on the wwi_perf.Sale_Index is based on the already existing clustered index. As a bonus exercise, \n-- try to create the same type of index on the wwi_perf.Sale_Hash table. Can you explain the difference in index creation time?\n\n-- Ordered Clustered Columnstore Indexes\n-- By default, for each table created without an index option, an internal component (index builder) creates a non-ordered clustered \n-- columnstore index (CCI) on it. Data in each column is compressed into a separate CCI rowgroup segment. There's metadata on each \n-- segment's value range, so segments that are outside the bounds of the query predicate aren't read from disk during query execution. \n-- CCI offers the highest level of data compression and reduces the size of segments to read so queries can run faster. However, \n-- because the index builder doesn't sort data before compressing them into segments, segments with overlapping value ranges could occur, \n-- causing queries to read more segments from disk and take longer to finish.\n\n-- When creating an ordered CCI, the Synapse SQL engine sorts the existing data in memory by the order key(s) before the index builder \n-- compresses them into index segments. With sorted data, segment overlapping is reduced allowing queries to have a more efficient \n-- segment elimination and thus faster performance because the number of segments to read from disk is smaller. \n-- If all data can be sorted in memory at once, then segment overlapping can be avoided. Due to large tables in data warehouses, \n-- this scenario doesn't happen often.\n\n-- Queries with the following patterns typically run faster with ordered CCI:\n--The queries have equality, inequality, or range predicates\n--The predicate columns and the ordered CCI columns are the same.\n--The predicate columns are used in the same order as the column ordinal of ordered CCI columns.\n\n-- Run the following query to show the segment overlaps for the Sale_Hash table:\nselect\n    OBJ.name as table_name\n    ,COL.name as column_name\n    ,NT.distribution_id\n    ,NP.partition_id\n    ,NP.rows as partition_rows\n    ,NP.data_compression_desc\n    ,NCSS.segment_id\n    ,NCSS.version\n    ,NCSS.min_data_id\n    ,NCSS.max_data_id\n    ,NCSS.row_count\nfrom\n    sys.objects OBJ\n    JOIN sys.columns as COL ON\n        OBJ.object_id = COL.object_id\n    JOIN sys.pdw_table_mappings TM ON\n        OBJ.object_id = TM.object_id\n    JOIN sys.pdw_nodes_tables as NT on\n        TM.physical_name = NT.name\n    JOIN sys.pdw_nodes_partitions NP on\n        NT.object_id = NP.object_id\n        and NT.pdw_node_id = NP.pdw_node_id\n        and substring(TM.physical_name, 40, 10) = NP.distribution_id\n    JOIN sys.pdw_nodes_column_store_segments NCSS on\n        NP.partition_id = NCSS.partition_id\n        and NP.distribution_id = NCSS.distribution_id\n        and COL.column_id = NCSS.column_id\nwhere\n    OBJ.name = 'SaleHash'\n    and COL.name = 'CustomerId'\n    and TM.physical_name  not like '%HdTable%'\norder by\n    NT.distribution_id\n\n-- Browse through the result set and notice the significant overlap between segments. There is literally overlap in customer \n-- ids between every single pair of segments (CustomerId values in the data range from 1 to 1,000,000). The segment structure of\n--  this CCI is clearly inefficient and will result in a lot of unnecessary reads from storage.\n\nCREATE TABLE [wwi_perf].[SaleHashOrdered]\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX ORDER( [CustomerId] )\n)\nAS\nSELECT\n    *\nFROM\n    [wwi_staging].[SaleHeap]\nOPTION  (LABEL  = 'CTAS : Sale_Hash', MAXDOP 1)\n\n-- Run the following query to show the segment overlaps for the Sale_Hash_Ordered table:\nselect\n    OBJ.name as table_name\n    ,COL.name as column_name\n    ,NT.distribution_id\n    ,NP.partition_id\n    ,NP.rows as partition_rows\n    ,NP.data_compression_desc\n    ,NCSS.segment_id\n    ,NCSS.version\n    ,NCSS.min_data_id\n    ,NCSS.max_data_id\n    ,NCSS.row_count\nfrom\n    sys.objects OBJ\n    JOIN sys.columns as COL ON\n        OBJ.object_id = COL.object_id\n    JOIN sys.pdw_table_mappings TM ON\n        OBJ.object_id = TM.object_id\n    JOIN sys.pdw_nodes_tables as NT on\n        TM.physical_name = NT.name\n    JOIN sys.pdw_nodes_partitions NP on\n        NT.object_id = NP.object_id\n        and NT.pdw_node_id = NP.pdw_node_id\n        and substring(TM.physical_name, 40, 10) = NP.distribution_id\n    JOIN sys.pdw_nodes_column_store_segments NCSS on\n        NP.partition_id = NCSS.partition_id\n        and NP.distribution_id = NCSS.distribution_id\n        and COL.column_id = NCSS.column_id\nwhere\n    OBJ.name = 'SaleHashOrdered'\n    and COL.name = 'CustomerId'\n    and TM.physical_name  not like '%HdTable%'\norder by\n    NT.distribution_id\n\n-- Notice the creation of the ordered CCI with MAXDOP = 1. Each thread used for ordered CCI creation works on a subset of data and \n-- sorts it locally. There's no global sorting across data sorted by different threads. Using parallel threads can reduce the time to \n-- create an ordered CCI but will generate more overlapping segments than using a single thread. Currently, the MAXDOP option is only \n-- supported in creating an ordered CCI table using CREATE TABLE AS SELECT command. Creating an ordered CCI via CREATE INDEX or CREATE \n-- TABLE commands does not support the MAXDOP option.\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_query campaign analytics')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/02_other data"
				},
				"content": {
					"query": "SELECT ProductCategory\n,SUM(Revenue) AS TotalRevenue\n,SUM(RevenueTarget) AS TotalRevenueTarget\n,(SUM(RevenueTarget) - SUM(Revenue)) AS Delta\nFROM [wwi].[CampaignAnalytics]\nGROUP BY ProductCategory",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_workload management')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/06_monitoring"
				},
				"content": {
					"query": "-- The code creates a workload group called CEODemo to reserve resources exclusively for the workload group. \n-- In this example, a workload group with a MIN_PERCENTAGE_RESOURCE set to 50% and REQUEST_MIN_RESOURCE_GRANT_PERCENT \n-- set to 25% is guaranteed 2 concurrency.\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_groups where name = 'CEODemo')\nBEGIN\n    Create WORKLOAD GROUP CEODemo WITH  \n    ( MIN_PERCENTAGE_RESOURCE = 50        -- integer value\n    ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 25 --  \n    ,CAP_PERCENTAGE_RESOURCE = 100\n    )\nEND\n\n--In the query window, replace the script with the following to create a workload Classifier called CEODreamDemo \n--that assigns a workload group and importance to incoming requests:\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers where  name = 'CEODreamDemo')\nBEGIN\n    Create Workload Classifier CEODreamDemo with\n    ( Workload_Group ='CEODemo',MemberName='asa.sql.workload02',IMPORTANCE = BELOW_NORMAL);\nEND\n\n--In the query window, replace the script with the following to confirm that there are no active queries being run by \n-- asa.sql.workload02:\nSELECT s.login_name, r.[Status], r.Importance, submit_time,\nstart_time ,s.session_id FROM sys.dm_pdw_exec_sessions s\nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended')\nORDER BY submit_time, status\n\n-- Let's flood the system with queries and see what happens for asa.sql.workload02. To do this, we will run an Azure Synapse \n-- Pipeline which triggers queries. Select the Integrate hub. Run the Lab 08 - Execute Business Analyst Queries Pipeline, \n-- which will run / trigger asa.sql.workload02 queries. Please let this pipeline run for 30 seconds to one minute, then \n-- cancel it recursively.\n\nSELECT s.login_name, r.[Status], r.Importance, submit_time,\nstart_time ,s.session_id FROM sys.dm_pdw_exec_sessions s\nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended')\nORDER BY submit_time, status\n\n-- In the query window, replace the script with the following to set 3.25% minimum resources per request:\nIF  EXISTS (SELECT * FROM sys.workload_management_workload_classifiers where group_name = 'CEODemo')\nBEGIN\n    Drop Workload Classifier CEODreamDemo\n    DROP WORKLOAD GROUP CEODemo\n    --- Creates a workload group 'CEODemo'.\n        Create  WORKLOAD GROUP CEODemo WITH  \n    (MIN_PERCENTAGE_RESOURCE = 26 -- integer value\n        ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 3.25 -- factor of 26 (guaranteed more than 4 concurrencies)\n    ,CAP_PERCENTAGE_RESOURCE = 100\n    )\n    --- Creates a workload Classifier 'CEODreamDemo'.\n    Create Workload Classifier CEODreamDemo with\n    (Workload_Group ='CEODemo',MemberName='asa.sql.workload02',IMPORTANCE = BELOW_NORMAL);\nEND\n\n-- Note: Configuring workload containment implicitly defines a maximum level of concurrency. With a CAP_PERCENTAGE_RESOURCE\n-- set to 60% and a REQUEST_MIN_RESOURCE_GRANT_PERCENT set to 1%, up to a 60-concurrency level is allowed for the workload group.\n-- Consider the method included below for determining the maximum concurrency:\n--[Max Concurrency] = [CAP_PERCENTAGE_RESOURCE] / [REQUEST_MIN_RESOURCE_GRANT_PERCENT]\n\n-- Let's flood the system again and see what happens for asa.sql.workload02. To do this, we will run an Azure Synapse Pipeline \n-- which triggers queries. Select the Integrate hub. Run the Lab 08 - Execute Business Analyst Queries Pipeline, which will\n--  run / trigger asa.sql.workload02 queries. Please let this run for 30 seconds to one minute, then cancel it recursively.\nSELECT s.login_name, r.[Status], r.Importance, submit_time,\nstart_time ,s.session_id FROM sys.dm_pdw_exec_sessions s\nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload02') and Importance\nis  not NULL AND r.[status] in ('Running','Suspended')\nORDER BY submit_time, status\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_analyze performance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_datawarehouse optimization"
				},
				"content": {
					"query": "--Analyze the space used by tables\nDBCC PDW_SHOWSPACEUSED('wwi_perf.SaleHash');\n\n-- Analyze the number of rows in each distribution. Those numbers should be as even as possible. \n-- You can see from the results that rows are equally distributed across distributions. Let's dive a bit more into this analysis. \n-- Use the following query to get customers with the most sale transaction items:\n\nSELECT TOP 1000\n    CustomerId,\n    count(*) as TransactionItemsCount\nFROM\n    [wwi_perf].[SaleHash]\nGROUP BY\n    CustomerId\nORDER BY\n    count(*) DESC\n\n--Now find the customers with the least sale transaction items:\nSELECT TOP 1000\n    CustomerId,\n    count(*) as TransactionItemsCount\nFROM\n    [wwi_perf].[SaleHash]\nGROUP BY\n    CustomerId\nORDER BY\n    count(*) ASC\n\n-- Notice the largest number of transaction items is 69 and the smallest is 16.\nSELECT\n    T.TransactionItemsCountBucket\n    ,count(*) as CustomersCount\nFROM\n    (\n        SELECT\n            CustomerId,\n            (count(*) - 16) / 100 as TransactionItemsCountBucket\n        FROM\n            [wwi_perf].[SaleHash]\n        GROUP BY\n            CustomerId\n    ) T\nGROUP BY\n    T.TransactionItemsCountBucket\nORDER BY\n    T.TransactionItemsCountBucket\n\n-- Use a more advanced approach to understand table space usage\n-- drop view [wwi_perf].[vTableSizes] \nCREATE VIEW [wwi_perf].[vTableSizes]\nAS\nWITH base\nAS\n(\nSELECT\n    GETDATE()                                                              AS  [execution_time]\n    , DB_NAME()                                                            AS  [database_name]\n    , s.name                                                               AS  [schema_name]\n    , t.name                                                               AS  [table_name]\n    , QUOTENAME(s.name)+'.'+QUOTENAME(t.name)                              AS  [two_part_name]\n    , nt.[name]                                                            AS  [node_table_name]\n    , ROW_NUMBER() OVER(PARTITION BY nt.[name] ORDER BY (SELECT NULL))     AS  [node_table_name_seq]\n    , tp.[distribution_policy_desc]                                        AS  [distribution_policy_name]\n    , c.[name]                                                             AS  [distribution_column]\n    , nt.[distribution_id]                                                 AS  [distribution_id]\n    , i.[type]                                                             AS  [index_type]\n    , i.[type_desc]                                                        AS  [index_type_desc]\n    , nt.[pdw_node_id]                                                     AS  [pdw_node_id]\n    , pn.[type]                                                            AS  [pdw_node_type]\n    , pn.[name]                                                            AS  [pdw_node_name]\n    , di.name                                                              AS  [dist_name]\n    , di.position                                                          AS  [dist_position]\n    , nps.[partition_number]                                               AS  [partition_nmbr]\n    , nps.[reserved_page_count]                                            AS  [reserved_space_page_count]\n    , nps.[reserved_page_count] - nps.[used_page_count]                    AS  [unused_space_page_count]\n    , nps.[in_row_data_page_count]\n        + nps.[row_overflow_used_page_count]\n        + nps.[lob_used_page_count]                                        AS  [data_space_page_count]\n    , nps.[reserved_page_count]\n    - (nps.[reserved_page_count] - nps.[used_page_count])\n    - ([in_row_data_page_count]\n            + [row_overflow_used_page_count]+[lob_used_page_count])        AS  [index_space_page_count]\n    , nps.[row_count]                                                      AS  [row_count]\nFROM\n    sys.schemas s\nINNER JOIN sys.tables t\n    ON s.[schema_id] = t.[schema_id]\nINNER JOIN sys.indexes i\n    ON  t.[object_id] = i.[object_id]\n    AND i.[index_id] <= 1\nINNER JOIN sys.pdw_table_distribution_properties tp\n    ON t.[object_id] = tp.[object_id]\nINNER JOIN sys.pdw_table_mappings tm\n    ON t.[object_id] = tm.[object_id]\nINNER JOIN sys.pdw_nodes_tables nt\n    ON tm.[physical_name] = nt.[name]\nINNER JOIN sys.dm_pdw_nodes pn\n    ON  nt.[pdw_node_id] = pn.[pdw_node_id]\nINNER JOIN sys.pdw_distributions di\n    ON  nt.[distribution_id] = di.[distribution_id]\nINNER JOIN sys.dm_pdw_nodes_db_partition_stats nps\n    ON nt.[object_id] = nps.[object_id]\n    AND nt.[pdw_node_id] = nps.[pdw_node_id]\n    AND nt.[distribution_id] = nps.[distribution_id]\nLEFT OUTER JOIN (select * from sys.pdw_column_distribution_properties where distribution_ordinal = 1) cdp\n    ON t.[object_id] = cdp.[object_id]\nLEFT OUTER JOIN sys.columns c\n    ON cdp.[object_id] = c.[object_id]\n    AND cdp.[column_id] = c.[column_id]\nWHERE pn.[type] = 'COMPUTE'\n)\n, size\nAS\n(\nSELECT\n[execution_time]\n,  [database_name]\n,  [schema_name]\n,  [table_name]\n,  [two_part_name]\n,  [node_table_name]\n,  [node_table_name_seq]\n,  [distribution_policy_name]\n,  [distribution_column]\n,  [distribution_id]\n,  [index_type]\n,  [index_type_desc]\n,  [pdw_node_id]\n,  [pdw_node_type]\n,  [pdw_node_name]\n,  [dist_name]\n,  [dist_position]\n,  [partition_nmbr]\n,  [reserved_space_page_count]\n,  [unused_space_page_count]\n,  [data_space_page_count]\n,  [index_space_page_count]\n,  [row_count]\n,  ([reserved_space_page_count] * 8.0)                                 AS [reserved_space_KB]\n,  ([reserved_space_page_count] * 8.0)/1000                            AS [reserved_space_MB]\n,  ([reserved_space_page_count] * 8.0)/1000000                         AS [reserved_space_GB]\n,  ([reserved_space_page_count] * 8.0)/1000000000                      AS [reserved_space_TB]\n,  ([unused_space_page_count]   * 8.0)                                 AS [unused_space_KB]\n,  ([unused_space_page_count]   * 8.0)/1000                            AS [unused_space_MB]\n,  ([unused_space_page_count]   * 8.0)/1000000                         AS [unused_space_GB]\n,  ([unused_space_page_count]   * 8.0)/1000000000                      AS [unused_space_TB]\n,  ([data_space_page_count]     * 8.0)                                 AS [data_space_KB]\n,  ([data_space_page_count]     * 8.0)/1000                            AS [data_space_MB]\n,  ([data_space_page_count]     * 8.0)/1000000                         AS [data_space_GB]\n,  ([data_space_page_count]     * 8.0)/1000000000                      AS [data_space_TB]\n,  ([index_space_page_count]  * 8.0)                                   AS [index_space_KB]\n,  ([index_space_page_count]  * 8.0)/1000                              AS [index_space_MB]\n,  ([index_space_page_count]  * 8.0)/1000000                           AS [index_space_GB]\n,  ([index_space_page_count]  * 8.0)/1000000000                        AS [index_space_TB]\nFROM base\n)\nSELECT *\nFROM size\n\n-- Table Name\tDescription\n-- sys.schemas |All schemas in the database.\n-- sys.tables  | All tables in the database.\n-- sys.indexes |All indexes in the database.\n-- sys.columns|All columns in the database.\n-- sys.pdw_table_mappings|Maps each table to local tables on physical nodes and distributions.\n-- sys.pdw_nodes_tables|Contains information on each local table in each distribution.\n-- sys.pdw_table_distribution_properties|Holds distribution information for tables (the type of distribution tables have).\n-- sys.pdw_column_distribution_properties|Holds distribution information for columns. Filtered to include only columns used to distribute their parent tables (distribution_ordinal = 1).\n-- sys.pdw_distributions|Holds information about the distributions from the SQL pool.\n-- sys.dm_pdw_nodes|Holds information about the nodes from the SQL pool. Filtered to include only compute nodes (type = COMPUTE).\n-- sys.dm_pdw_nodes_db_partition_stats|Returns page and row-count information for every partition in the current database.\n\n-- Run the following script to view the details about the structure of the tables in the wwi_perf schema:\nSELECT\n    database_name\n,    schema_name\n,    table_name\n,    distribution_policy_name\n,      distribution_column\n,    index_type_desc\n,    COUNT(distinct partition_nmbr) as nbr_partitions\n,    SUM(row_count)                 as table_row_count\n,    SUM(reserved_space_GB)         as table_reserved_space_GB\n,    SUM(data_space_GB)             as table_data_space_GB\n,    SUM(index_space_GB)            as table_index_space_GB\n,    SUM(unused_space_GB)           as table_unused_space_GB\nFROM\n    [wwi_perf].[vTableSizes]\nWHERE\n    schema_name = 'wwi_perf'\nGROUP BY\n    database_name\n,    schema_name\n,    table_name\n,    distribution_policy_name\n,      distribution_column\n,    index_type_desc\nORDER BY\n    table_reserved_space_GB desc\n\n-- Notice the significant difference between the space used by CLUSTERED COLUMNSTORE and HEAP or CLUSTERED tables. \n-- This provides a clear indication on the significant advantages columnstore indexes have.\n\n\ncreate view [wwi_perf].[vColumnStoreRowGroupStats]\nas\nwith cte\nas\n(\nselect   tb.[name]                    AS [logical_table_name]\n,        rg.[row_group_id]            AS [row_group_id]\n,        rg.[state]                   AS [state]\n,        rg.[state_desc]              AS [state_desc]\n,        rg.[total_rows]              AS [total_rows]\n,        rg.[trim_reason_desc]        AS trim_reason_desc\n,        mp.[physical_name]           AS physical_name\nFROM    sys.[schemas] sm\nJOIN    sys.[tables] tb               ON  sm.[schema_id]          = tb.[schema_id]\nJOIN    sys.[pdw_table_mappings] mp   ON  tb.[object_id]          = mp.[object_id]\nJOIN    sys.[pdw_nodes_tables] nt     ON  nt.[name]               = mp.[physical_name]\nJOIN    sys.[dm_pdw_nodes_db_column_store_row_group_physical_stats] rg      ON  rg.[object_id]     = nt.[object_id]\n                                                                            AND rg.[pdw_node_id]   = nt.[pdw_node_id]\n                                        AND rg.[distribution_id]    = nt.[distribution_id]\n)\nselect *\nfrom cte;\n\n-- The state_desc column provides useful information on the state of a row group:\n-- Name|Description\n-- INVISIBLE|A rowgroup which is being compressed.\n-- OPEN|A deltastore rowgroup that is accepting new rows. It is important to remember that an open rowgroup is still in rowstore format and has not been compressed to columnstore format.\n-- CLOSED|A deltastore rowgroup that contains the maximum number of rows, and is waiting for the tuple mover process to compress it to the columnstore.\n-- COMPRESSED|A row group that is compressed with columnstore compression and stored in the columnstore.\n-- TOMBSTONE|A row group that was formerly in the deltastore and is no longer used.\n\n-- The trim_reason_desc column describes the reason that triggered the COMPRESSED rowgroup to have less than the maximum\n--  number of rows:\n--Name|Description\n--UNKNOWN_UPGRADED_FROM_PREVIOUS_VERSION|Occurred when upgrading from the previous version of SQL Server.\n--NO_TRIM|The row group was not trimmed. The row group was compressed with the maximum of 1,048,476 rows. The number of rows could be less if a subset of rows was deleted after delta rowgroup was closed.\n--BULKLOAD|The bulk-load batch size limited the number of rows. This is what you should be looking for when optimizing data loading, as it is an indicator of resource starvation during the loading process.\n--REORG|Forced compression as part of REORG command.\n--DICTIONARY_SIZE|Dictionary size grew too large to compress all of the rows together.\n--MEMORY_LIMITATION|Not enough available memory to compress all the rows together.\n--RESIDUAL_ROW_GROUP|Closed as part of last row group with rows < 1 million during index build operation.\n\nSELECT\n    *\nFROM\n    [wwi_perf].[vColumnStoreRowGroupStats]\nWHERE\n    Logical_Table_Name = 'Sale_Partition01'\n\n-- Browse through the results and get an overview of the rowgroup states. \n-- Notice the COMPRESSED and OPEN states of some of the row groups.\n\nSELECT\n    *\nFROM\n    [wwi_perf].[vColumnStoreRowGroupStats]\nWHERE\n    Logical_Table_Name = 'SaleHashOrdered'\n\n-- There is a significant difference in the rowgroup states from the previous one. \n-- This highlights one of the potential advantages of ordered CCIs.\n\n--Study the impact of materialized views\n-- Analyze the execution plan of a query\nSELECT\n    T.TransactionItemsCountBucket\n    ,count(*) as CustomersCount\nFROM\n    (\n        SELECT\n            CustomerId,\n            (count(*) - 184) / 100 as TransactionItemsCountBucket\n        FROM\n            [wwi_perf].[SaleHash]\n        GROUP BY\n            CustomerId\n    ) T\nGROUP BY\n    T.TransactionItemsCountBucket\nORDER BY\n    T.TransactionItemsCountBucket\n\n-- Improve the query by adding support to calculate the lower margin of the first per-customer transactions items count bucket:\nSELECT\n    T.TransactionItemsCountBucket\n    ,count(*) as CustomersCount\nFROM\n    (\n        SELECT\n            CustomerId,\n            (\n                COUNT(*) -\n                (\n                    SELECT\n                        MIN(TransactionItemsCount)\n                    FROM\n                    (\n                        SELECT\n                            COUNT(*) as TransactionItemsCount\n                        FROM\n                            [wwi_perf].[SaleHash]\n                        GROUP BY\n                            CustomerId\n                    ) X\n                )\n            ) / 100 as TransactionItemsCountBucket\n        FROM\n            [wwi_perf].[SaleHash]\n        GROUP BY\n            CustomerId\n    ) T\nGROUP BY\n    T.TransactionItemsCountBucket\nORDER BY\n    T.TransactionItemsCountBucket\n\n-- Improve the execution plan of the query with a materialized view\n-- Run the query with the EXPLAIN directive (note the WITH_RECOMMENDATIONS option as well):\nEXPLAIN WITH_RECOMMENDATIONS\nSELECT\n    T.TransactionItemsCountBucket\n    ,count(*) as CustomersCount\nFROM\n    (\n        SELECT\n            CustomerId,\n            (\n                COUNT(*) - \n                (\n                    SELECT \n                        MIN(TransactionItemsCount)\n                    FROM \n                    (\n                        SELECT \n                            COUNT(*) as TransactionItemsCount\n                        FROM \n                            [wwi_perf].[SaleHash] \n                        GROUP BY \n                            CustomerId \n                    ) X \n                )\n            ) / 100 as TransactionItemsCountBucket\n        FROM\n            [wwi_perf].[SaleHash]\n        GROUP BY\n            CustomerId\n    ) T\nGROUP BY\n    T.TransactionItemsCountBucket\nORDER BY\n    T.TransactionItemsCountBucket\n\n-- Analyze the resulting execution plan. Take a close look to the <materialized_view_candidates> section which \n-- suggests possible materialized views you can create to improve the performance of the query.\n\n-- Create the suggested materialized view:\nCREATE MATERIALIZED VIEW\n    mvTransactionItemsCounts\nWITH\n(\n    DISTRIBUTION = HASH([CustomerId])\n)\nAS\nSELECT\n    CustomerId\n    ,COUNT(*) AS ItemsCount\nFROM\n    [wwi_perf].[SaleHash]\nGROUP BY\n    CustomerId\n\n-- Check the execution plan again:\nEXPLAIN WITH_RECOMMENDATIONS\nSELECT\n    T.TransactionItemsCountBucket\n    ,count(*) as CustomersCount\nFROM\n    (\n        SELECT\n            CustomerId,\n            (\n                COUNT(*) - \n                (\n                    SELECT \n                        MIN(TransactionItemsCount)\n                    FROM \n                    (\n                        SELECT \n                            COUNT(*) as TransactionItemsCount\n                        FROM \n                            [wwi_perf].[SaleHash] \n                        GROUP BY \n                            CustomerId \n                    ) X \n                )\n            ) / 100 as TransactionItemsCountBucket\n        FROM\n            [wwi_perf].[SaleHash]\n        GROUP BY\n            CustomerId\n    ) T\nGROUP BY\n    T.TransactionItemsCountBucket\nORDER BY\n    T.TransactionItemsCountBucket\n\n-- The resulting execution plan indicates now the use of the mvTransactionItemsCounts (the BROADCAST_MOVE distributed \n-- SQL operation) materialized view which provides improvements to the query execution time:\n\n-- Avoid extensive logging\n-- The following operations are capable of being minimally logged:\n-- CREATE TABLE AS SELECT (CTAS)\n--INSERT..SELECT\n--CREATE INDEX\n--ALTER INDEX REBUILD\n--DROP INDEX\n--TRUNCATE TABLE\n--DROP TABLE\n--ALTER TABLE SWITCH PARTITION\n--Minimal logging with bulk load\n\n--CTAS and INSERT...SELECT are both bulk load operations. However, both are influenced by the target table definition \n-- and depend on the load scenario. The following table explains when bulk operations are fully or minimally logged:\n\n--Primary Index|Load Scenario|Logging Mode\n--Heap|Any|Minimal\n--Clustered Index|Empty target table|Minimal\n--Clustered Index|Loaded rows do not overlap with existing pages in target|Minimal\n--Clustered Index|Loaded rows overlap with existing pages in target|Full\n--Clustered Columnstore Index|Batch size >= 102,400 per partition aligned distribution|Minimal\n\n-- A Synapse Analytics SQL pool has 60 distributions. Therefore, assuming all rows are evenly distributed and \n-- landing in a single partition, your batch will need to contain 6,144,000 rows or larger to be minimally logged \n-- when writing to a Clustered Columnstore Index. If the table is partitioned and the rows being inserted span\n--  partition boundaries, then you will need 6,144,000 rows per partition boundary assuming even data distribution.\n--  Each partition in each distribution must independently exceed the 102,400 row threshold for the insert \n-- to be minimally logged into the distribution.\n\n-- Optimizing a delete operation\nSELECT\n    COUNT_BIG(*) as TransactionItemsCount\nFROM\n    [wwi_perf].[SaleHash]\nWHERE\n    CustomerId < 900000\n\n-- Implement a minimal logging approach to delete transaction items for customers with ids lower than 900000. \n-- Use the following CTAS query to isolate the transaction items that should be kept:\nCREATE TABLE [wwi_perf].[SaleHashv2]\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    HEAP\n)\nAS\nSELECT\n    *\nFROM\n    [wwi_perf].[SaleHash]\nWHERE\n    CustomerId >= 900000\n\n-- The query should execute within a few minutes. All that would remain to complete the process would be to delete the \n-- Sale_Heap table and rename Sale_Heap_v2 to Sale_Heap.\n--DELETE\n--    [wwi_perf].[SaleHash]\n--WHERE\n--    CustomerId < 900000",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create loading users')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "--USE [DedicatedPoolName]\n-- Run against tpcdw dedicated pool database\n\nCREATE USER LoadingUser FOR LOGIN LoadingUser; \nGO \n\nEXEC sp_addrolemember 'db_owner', 'LoadingUser';\nGO\n\n-- EXEC sp_addrolemember 'staticrc80', LoadingUser\n-- GO\n\nCREATE WORKLOAD GROUP DataLoads\nWITH \n( \n   MIN_PERCENTAGE_RESOURCE = 100\n   ,CAP_PERCENTAGE_RESOURCE = 100\n   ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 100\n)\n;\n\nCREATE WORKLOAD CLASSIFIER [wgcELTLogin]\nWITH \n(\n\t WORKLOAD_GROUP = 'DataLoads'\n   ,MEMBERNAME = 'LoadingUser'\n)\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaitpcdw",
						"poolName": "dataaitpcdw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_import sales data using pipeline')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/01_sales data"
				},
				"content": {
					"query": "-- Now that WWI has gone through the process of loading data using PolyBase and COPY via T-SQL statements, \n-- it's time for them to experiment with loading sales data through a Synapse pipeline.\n\n-- When moving data into a data warehouse, there is oftentimes a level of orchestration involved, \n-- coordinating movement from one or more data sources and sometimes some level of transformation. \n-- The transformation step can occur during (extract-transform-load - ETL) or \n-- after (extract-load-transform - ELT) data movement. Any modern data platform must provide \n-- a seamless experience for all the typical data wrangling actions like extractions, parsing,\n--  joining, standardizing, augmenting, cleansing, consolidating, and filtering. \n-- Azure Synapse Analytics provides two significant categories of features - data flows and \n-- data orchestrations (implemented as pipelines).\n\n-- Configure workload management classification\n-- When loading a large amount of data, it is best to run only one load job at a time for fastest performance. \n-- If this isn't possible, run a minimal number of loads concurrently. If you expect a large loading job, \n-- consider scaling up your SQL pool before the load.\n\n-- Be sure that you allocate enough memory to the pipeline session. To do this, increase the resource class\n--  of a user which has permissions to rebuild the index on this table to the recommended minimum.\n\n-- To run loads with appropriate compute resources, create loading users designated for running loads. \n-- Assign each loading user to a specific resource class or workload group. To run a load, \n-- sign in as one of the loading users, and then run the load. The load runs with the user's resource class.\n\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE group_name = 'BigDataLoad')\nBEGIN\n    CREATE WORKLOAD GROUP BigDataLoad WITH  \n    (\n        MIN_PERCENTAGE_RESOURCE = 50 -- integer value\n        ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 25 --  (guaranteed a minimum of 4 concurrency)\n        ,CAP_PERCENTAGE_RESOURCE = 100\n    );\nEND\n\n-- HeavyLoader that assigns the asa.sql.import01 user we created in your environment to the BigDataLoad workload group.\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE [name] = 'HeavyLoader')\nBEGIN\n    CREATE WORKLOAD Classifier HeavyLoader WITH\n    (\n        Workload_Group ='BigDataLoad',\n        MemberName='asa.sql.import01',\n        IMPORTANCE = HIGH\n    );\nEND\n\nSELECT * FROM sys.workload_management_workload_classifiers\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_workload monitoring')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/06_monitoring"
				},
				"content": {
					"query": "-- Azure Synapse Analytics provides a rich monitoring experience within the Azure portal to surface insights regarding your \n-- data warehouse workload. The Azure portal is the recommended tool when monitoring your data warehouse as it provides \n-- configurable retention periods, alerts, recommendations, and customizable charts and dashboards for metrics and logs. \n-- The portal also enables you to integrate with other Azure monitoring services such as Azure Monitor (logs) with \n-- Log analytics to provide a holistic monitoring experience for not only your data warehouse but also your entire \n-- Azure analytics platform for an integrated monitoring experience.\n\n--All queries executed on SQL pool are logged to sys.dm_pdw_exec_requests. This DMV contains the last 10,000 queries executed. \n-- The request_id uniquely identifies each query and is the primary key for this DMV. The request_id is assigned sequentially\n--  for each new query and is prefixed with QID, which stands for query ID. Querying this DMV for a given session_id \n-- shows all queries for a given logon.\nSELECT * FROM sys.dm_pdw_exec_sessions where status <> 'Closed' and session_id <> session_id();\n\n--Let's flood the system with queries to create operations to monitor. To do this, we will run a Azure Synapse Pipeline which \n-- triggers queries. Select the Integrate hub. Run the Lab 08 - Execute Business Analyst Queries Pipeline, which will run / trigger\n--  asa.sql.workload02 queries. Please let this pipeline run for 30 seconds to one minute, then cancel it recursively.\n\nSELECT *\nFROM sys.dm_pdw_exec_requests\nWHERE status not in ('Completed','Failed','Cancelled')\n  AND session_id <> session_id()\nORDER BY submit_time DESC;\n\n--As an alternative, you can execute the following SQL command to find the top 10 longest running queries.\nSELECT TOP 10 *\nFROM sys.dm_pdw_exec_requests\nORDER BY total_elapsed_time DESC;\n\n--To simplify the lookup of a query in the sys.dm_pdw_exec_requests table, use LABEL to assign a comment to your query, \n--which can be looked up in the sys.dm_pdw_exec_requests view. To test using the labels, replace the script in the query \n--window with the following:\nSELECT *\nFROM sys.tables\nOPTION (LABEL = 'My Query');\n\n-- Find a query with the Label 'My Query'\n-- Use brackets when querying the label column, as it it a key word\nSELECT  *\nFROM sys.dm_pdw_exec_requests\nWHERE [label] = 'My Query';\n\n--In the query window, replace the script with the following to retrieve the query's distributed SQL (DSQL) plan from \n--sys.dm_pdw_request_steps. Be sure to replace the QID##### with the Request_ID you noted in Step 12:\nSELECT * FROM sys.dm_pdw_request_steps\nWHERE request_id = 'QID4990'\nORDER BY step_index;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaidw",
						"poolName": "dataaidw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create schemas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "--USE [DedicatedPoolName]\n-- Run against tpcdw dedicated pool database\n\nCREATE SCHEMA stagingTPCDS\nGO\nCREATE SCHEMA TPCDS\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dataaitpcdw",
						"poolName": "dataaitpcdw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create serverless db')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "-- Run against built-in serverless - master db\n\nIF NOT EXISTS (SELECT * FROM sys.DATABASES WHERE [name] = 'TPCDSDBDemo') \nCREATE DATABASE TPCDSDBDemo\nGO\n\nALTER DATABASE TPCDSDBDemo COLLATE Latin1_General_100_BIN2_UTF8\nGO\n\n--Database for external tables--\nIF NOT EXISTS (SELECT * FROM sys.DATABASES WHERE [name] = 'TPCDSDBExternal') \nCREATE DATABASE TPCDSDBExternal\nGO\n\nALTER DATABASE TPCDSDBExternal COLLATE Latin1_General_100_BIN2_UTF8\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create serverless login users')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "-- Run against multiple serverless db\n\nUSE [master]\nCREATE LOGIN LoadingUser WITH PASSWORD = 'P2ssw0rd2903$'\nGO\n\nUSE [TPCDSDBDemo]\nCREATE USER LoadingUser FOR LOGIN LoadingUser; \nGO \n\nALTER ROLE db_owner ADD MEMBER LoadingUser;\nGO\n\nCREATE SCHEMA TPCDS;\nGO\n\nUSE [TPCDSDBExternal]\nCREATE USER LoadingUser FOR LOGIN LoadingUser; \nGO \n\nALTER ROLE db_owner ADD MEMBER LoadingUser;\nGO\n\nCREATE SCHEMA TPCDS;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TPCDSDBExternal",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_run other dependent scripts')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "-- Run Databricks notebook to generate TPCDS dataset in Azure Lake\n-- Run 0_Load Tpc Dataset Pipeline",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_serverless source and format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "-- Run against built serverless - TPCDSDBDemo\n\nUSE TPCDSDBDemo\nGO\n\nIF NOT EXISTS (SELECT 1 FROM sys.symmetric_keys WHERE symmetric_key_id = 101)\nBEGIN\n\tCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'P2ssw0rd2903$';\nEND\nGO\n\nCREATE DATABASE SCOPED CREDENTIAL [SasADLSDemoDatabaseScoped]\nWITH IDENTITY = 'SHARED ACCESS SIGNATURE',\n     SECRET = '?sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupyx&se=2025-10-31T03:42:48Z&st=2022-10-30T19:42:48Z&spr=https&sig=EPYrpBogzFjDkAd3vy2cJ8PskubTwIZFSMiwLUW7tEc%3D'\nGO\n\n--DROP DATABASE SCOPED CREDENTIAL [SasADLSDemoDatabaseScoped]\n\nCREATE DATABASE SCOPED CREDENTIAL [SasADLSDemoDatabaseScoped]\nWITH IDENTITY = 'SHARED ACCESS SIGNATURE',\nSECRET = 'DivozaHnB+c7HtcEo6nK1f/XQyGHmaMQShb2wXB/Jo4lEoP31MQX+hdU5do5wYmaRYh4mM+Ontro+ASt7AO0Tg==';\n\n--DROP EXTERNAL DATA SOURCE [TPCDataSource]\nCREATE EXTERNAL DATA SOURCE [TPCDataSource] WITH (\n    LOCATION = 'https://dataairawdls.blob.core.windows.net/tpcds', CREDENTIAL = [SasADLSDemoDatabaseScoped]\n);\nGO\n\nCREATE EXTERNAL FILE FORMAT [FF_Parquet] WITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TPCDSDBDemo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_serverless views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "-- Run against built serverless - TPCDSDBDemo\n\nUSE TPCDSDBDemo\nGO\n\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.call_center') DROP VIEW TPCDS.call_center\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.catalog_page') DROP VIEW TPCDS.catalog_page\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.catalog_returns') DROP VIEW TPCDS.catalog_returns\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.catalog_sales') DROP VIEW TPCDS.catalog_sales\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.customer') DROP VIEW TPCDS.customer\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.customer_address') DROP VIEW TPCDS.customer_address\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.customer_demographics') DROP VIEW TPCDS.customer_demographics\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.date_dim') DROP VIEW TPCDS.date_dim\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.household_demographics') DROP VIEW TPCDS.household_demographics\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.income_band') DROP VIEW TPCDS.income_band\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.inventory') DROP VIEW TPCDS.inventory\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.item') DROP VIEW TPCDS.item\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.promotion') DROP VIEW TPCDS.promotion\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.reason') DROP VIEW TPCDS.reason\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.ship_mode') DROP VIEW TPCDS.ship_mode\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.store') DROP VIEW TPCDS.store\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.store_returns') DROP VIEW TPCDS.store_returns\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.store_sales') DROP VIEW TPCDS.store_sales\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.time_dim') DROP VIEW TPCDS.time_dim\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.warehouse') DROP VIEW TPCDS.warehouse\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_page') DROP VIEW TPCDS.web_page\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_returns') DROP VIEW TPCDS.web_returns\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_sales') DROP VIEW TPCDS.web_sales\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_site') DROP VIEW TPCDS.web_site\nGO\n\n\nCREATE VIEW TPCDS.call_center AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/call_center/*.parquet', FORMAT='PARQUET') WITH (cc_call_center_sk INT,cc_call_center_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,cc_rec_start_date DATE,cc_rec_end_date DATE,cc_closed_date_sk INT,cc_open_date_sk INT,cc_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cc_class VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cc_employees INT,cc_sq_ft INT,cc_hours CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,cc_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,cc_mkt_id INT,cc_mkt_class CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cc_mkt_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,cc_market_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,cc_division INT,cc_division_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cc_company INT,cc_company_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cc_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,cc_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,cc_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,cc_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,cc_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,cc_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,cc_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,cc_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,cc_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,cc_gmt_offset numeric(5, 2),cc_tax_percentage numeric(5, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.catalog_page AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/catalog_page/*.parquet', FORMAT='PARQUET') WITH (cp_catalog_page_sk INT,cp_catalog_page_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,cp_start_date_sk INT,cp_end_date_sk INT,cp_department VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cp_catalog_number INT,cp_catalog_page_number INT,cp_description VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,cp_type VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.catalog_returns AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/catalog_returns/*.parquet', FORMAT='PARQUET') WITH (cr_returned_date_sk INT, cr_returned_time_sk INT,cr_item_sk INT,cr_refunded_customer_sk INT,cr_refunded_cdemo_sk INT,cr_refunded_hdemo_sk INT,cr_refunded_addr_sk INT,cr_returning_customer_sk INT,cr_returning_cdemo_sk INT,cr_returning_hdemo_sk INT,cr_returning_addr_sk INT,cr_call_center_sk INT,cr_catalog_page_sk INT,cr_ship_mode_sk INT,cr_warehouse_sk INT,cr_reason_sk INT,cr_order_number BIGINT,cr_return_quantity INT,cr_return_amount numeric(7, 2),cr_return_tax numeric(7, 2),cr_return_amt_inc_tax numeric(7, 2),cr_fee numeric(7, 2),cr_return_ship_cost numeric(7, 2),cr_refunded_cash numeric(7, 2),cr_reversed_charge numeric(7, 2),cr_store_credit numeric(7, 2),cr_net_loss numeric(7, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.catalog_sales AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/catalog_sales/*.parquet', FORMAT='PARQUET') WITH (cs_sold_date_sk INT, cs_sold_time_sk INT,cs_ship_date_sk INT,cs_bill_customer_sk INT,cs_bill_cdemo_sk INT,cs_bill_hdemo_sk INT,cs_bill_addr_sk INT,cs_ship_customer_sk INT,cs_ship_cdemo_sk INT,cs_ship_hdemo_sk INT,cs_ship_addr_sk INT,cs_call_center_sk INT,cs_catalog_page_sk INT,cs_ship_mode_sk INT,cs_warehouse_sk INT,cs_item_sk INT,cs_promo_sk INT,cs_order_number BIGINT,cs_quantity INT,cs_wholesale_cost numeric(7, 2),cs_list_price numeric(7, 2),cs_sales_price numeric(7, 2),cs_ext_discount_amt numeric(7, 2),cs_ext_sales_price numeric(7, 2),cs_ext_wholesale_cost numeric(7, 2),cs_ext_list_price numeric(7, 2),cs_ext_tax numeric(7, 2),cs_coupon_amt numeric(7, 2),cs_ext_ship_cost numeric(7, 2),cs_net_paid numeric(7, 2),cs_net_paid_inc_tax numeric(7, 2),cs_net_paid_inc_ship numeric(7, 2),cs_net_paid_inc_ship_tax numeric(7, 2),cs_net_profit numeric(7, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.customer AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/customer/*.parquet', FORMAT='PARQUET') WITH (c_customer_sk INT,c_customer_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,c_current_cdemo_sk INT,c_current_hdemo_sk INT,c_current_addr_sk INT,c_first_shipto_date_sk INT,c_first_sales_date_sk INT,c_salutation CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,c_first_name CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,c_last_name CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,c_preferred_cust_flag CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,c_birth_day INT,c_birth_month INT,c_birth_year INT,c_birth_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,c_login CHAR(13) COLLATE Latin1_General_100_BIN2_UTF8,c_email_address CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,c_last_review_date VARCHAR(7) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.customer_address AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/customer_address/*.parquet', FORMAT='PARQUET') WITH (ca_address_sk INT,ca_address_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,ca_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,ca_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,ca_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,ca_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,ca_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,ca_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,ca_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,ca_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,ca_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,ca_gmt_offset numeric(5, 2),ca_location_type CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.customer_demographics AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/customer_demographics/*.parquet', FORMAT='PARQUET') WITH (cd_demo_sk INT,cd_gender CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,cd_marital_status CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,cd_education_status CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,cd_purchase_estimate INT,cd_credit_rating CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,cd_dep_count INT,cd_dep_employed_count INT,cd_dep_college_count INT) AS [r]\nGO\nCREATE VIEW TPCDS.date_dim AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/date_dim/*.parquet', FORMAT='PARQUET') WITH (d_date_sk INT,d_date_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,d_date DATE,d_month_seq INT,d_week_seq INT,d_quarter_seq INT,d_year INT,d_dow INT,d_moy INT,d_dom INT,d_qoy INT,d_fy_year INT,d_fy_quarter_seq INT,d_fy_week_seq INT,d_day_name CHAR(9) COLLATE Latin1_General_100_BIN2_UTF8,d_quarter_name CHAR(6) COLLATE Latin1_General_100_BIN2_UTF8,d_holiday CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_weekend CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_following_holiday CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_first_dom INT,d_last_dom INT,d_same_day_ly INT,d_same_day_lq INT,d_current_day CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_current_week CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_current_month CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_current_quarter CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_current_year CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.household_demographics AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/household_demographics/*.parquet', FORMAT='PARQUET') WITH (hd_demo_sk INT,hd_income_band_sk INT,hd_buy_potential CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,hd_dep_count INT,hd_vehicle_count INT) AS [r]\nGO\nCREATE VIEW TPCDS.income_band AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/income_band/*.parquet', FORMAT='PARQUET') WITH (ib_income_band_sk INT,ib_lower_bound INT,ib_upper_bound INT) AS [r]\nGO\nCREATE VIEW TPCDS.inventory AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/inventory/*.parquet', FORMAT='PARQUET') WITH (inv_date_sk INT, inv_item_sk INT,inv_warehouse_sk INT,inv_quantity_on_hand INT) AS [r]\nGO\nCREATE VIEW TPCDS.item AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/item/*.parquet', FORMAT='PARQUET') WITH (i_item_sk INT,i_item_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,i_rec_start_date DATE,i_rec_end_date DATE,i_item_desc VARCHAR(200) COLLATE Latin1_General_100_BIN2_UTF8,i_current_price numeric(7, 2),i_wholesale_cost numeric(7, 2),i_brand_id INT,i_brand CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,i_class_id INT,i_class CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,i_category_id INT,i_category CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,i_manufact_id INT,i_manufact CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,i_size CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,i_formulation CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,i_color CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,i_units CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,i_container CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,i_manager_id INT,i_product_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.promotion AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/promotion/*.parquet', FORMAT='PARQUET') WITH (p_promo_sk INT,p_promo_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,p_start_date_sk INT,p_end_date_sk INT,p_item_sk INT,p_cost numeric(15, 2),p_response_target INT,p_promo_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_dmail CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_email CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_catalog CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_tv CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_radio CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_press CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_event CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_demo CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_details VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,p_purpose CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,p_discount_active CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.reason AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/reason/*.parquet', FORMAT='PARQUET') WITH (r_reason_sk INT,r_reason_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,r_reason_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.ship_mode AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/ship_mode/*.parquet', FORMAT='PARQUET') WITH (sm_ship_mode_sk INT,sm_ship_mode_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,sm_type CHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,sm_code CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,sm_carrier CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,sm_contract CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.store AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/store/*.parquet', FORMAT='PARQUET') WITH (s_store_sk INT,s_store_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,s_rec_start_date DATE,s_rec_end_date DATE,s_closed_date_sk INT,s_store_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,s_number_employees INT,s_floor_space INT,s_hours CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,s_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,s_market_id INT,s_geography_class VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,s_market_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,s_market_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,s_division_id INT,s_division_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,s_company_id INT,s_company_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,s_street_number VARCHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,s_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,s_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,s_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,s_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,s_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,s_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,s_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,s_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,s_gmt_offset numeric(5, 2),s_tax_precentage numeric(5, 2)) AS [r]\nGO\n--CREATE VIEW TPCDS.store_returns AS SELECT CONVERT(INT, REPLACE(r.filepath(1), 'sr_returned_date_sk=', '')) AS sr_returned_date_sk, * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/store_returns/*.parquet', FORMAT='PARQUET') WITH (sr_return_time_sk INT,sr_item_sk INT,sr_customer_sk INT,sr_cdemo_sk INT,sr_hdemo_sk INT,sr_addr_sk INT,sr_store_sk INT,sr_reason_sk INT,sr_ticket_number BIGINT,sr_return_quantity INT,sr_return_amt numeric(7, 2),sr_return_tax numeric(7, 2),sr_return_amt_inc_tax numeric(7, 2),sr_fee numeric(7, 2),sr_return_ship_cost numeric(7, 2),sr_refunded_cash numeric(7, 2),sr_reversed_charge numeric(7, 2),sr_store_credit numeric(7, 2),sr_net_loss numeric(7, 2)) AS [r]\nCREATE VIEW TPCDS.store_returns AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/store_returns/*.parquet', FORMAT='PARQUET') WITH (sr_returned_date_sk INT,sr_return_time_sk INT,sr_item_sk INT,sr_customer_sk INT,sr_cdemo_sk INT,sr_hdemo_sk INT,sr_addr_sk INT,sr_store_sk INT,sr_reason_sk INT,sr_ticket_number BIGINT,sr_return_quantity INT,sr_return_amt numeric(7, 2),sr_return_tax numeric(7, 2),sr_return_amt_inc_tax numeric(7, 2),sr_fee numeric(7, 2),sr_return_ship_cost numeric(7, 2),sr_refunded_cash numeric(7, 2),sr_reversed_charge numeric(7, 2),sr_store_credit numeric(7, 2),sr_net_loss numeric(7, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.store_sales AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/store_sales/*.parquet', FORMAT='PARQUET') WITH (ss_sold_date_sk INT, ss_sold_time_sk INT,ss_item_sk INT,ss_customer_sk INT,ss_cdemo_sk INT,ss_hdemo_sk INT,ss_addr_sk INT,ss_store_sk INT,ss_promo_sk INT,ss_ticket_number BIGINT,ss_quantity INT,ss_wholesale_cost numeric(7, 2),ss_list_price numeric(7, 2),ss_sales_price numeric(7, 2),ss_ext_discount_amt numeric(7, 2),ss_ext_sales_price numeric(7, 2),ss_ext_wholesale_cost numeric(7, 2),ss_ext_list_price numeric(7, 2),ss_ext_tax numeric(7, 2),ss_coupon_amt numeric(7, 2),ss_net_paid numeric(7, 2),ss_net_paid_inc_tax numeric(7, 2),ss_net_profit numeric(7, 2)) AS [r]\nGO\n\nCREATE VIEW TPCDS.time_dim AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/time_dim/*.parquet', FORMAT='PARQUET') WITH (t_time_sk INT,t_time_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,t_time INT,t_hour INT,t_minute INT,t_second INT,t_am_pm CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,t_shift CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,t_sub_shift CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,t_meal_time CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.warehouse AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/warehouse/*.parquet', FORMAT='PARQUET') WITH (w_warehouse_sk INT,w_warehouse_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,w_warehouse_name VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,w_warehouse_sq_ft INT,w_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,w_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,w_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,w_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,w_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,w_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,w_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,w_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,w_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,w_gmt_offset numeric(5, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.web_page AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/web_page/*.parquet', FORMAT='PARQUET') WITH (wp_web_page_sk INT,wp_web_page_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,wp_rec_start_date DATE,wp_rec_end_date DATE,wp_creation_date_sk INT,wp_access_date_sk INT,wp_autogen_flag CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,wp_customer_sk INT,wp_url VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,wp_type CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,wp_char_count INT,wp_link_count INT,wp_image_count INT,wp_max_ad_count INT) AS [r]\nGO\nCREATE VIEW TPCDS.web_returns AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/web_returns/*.parquet', FORMAT='PARQUET') WITH (wr_returned_date_sk INT, wr_returned_time_sk INT,wr_item_sk INT,wr_refunded_customer_sk INT,wr_refunded_cdemo_sk INT,wr_refunded_hdemo_sk INT,wr_refunded_addr_sk INT,wr_returning_customer_sk INT,wr_returning_cdemo_sk INT,wr_returning_hdemo_sk INT,wr_returning_addr_sk INT,wr_web_page_sk INT,wr_reason_sk INT,wr_order_number BIGINT,wr_return_quantity INT,wr_return_amt numeric(7, 2),wr_return_tax numeric(7, 2),wr_return_amt_inc_tax numeric(7, 2),wr_fee numeric(7, 2),wr_return_ship_cost numeric(7, 2),wr_refunded_cash numeric(7, 2),wr_reversed_charge numeric(7, 2),wr_account_credit numeric(7, 2),wr_net_loss numeric(7, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.web_sales AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/web_sales/*.parquet', FORMAT='PARQUET') WITH (ws_sold_date_sk INT, ws_sold_time_sk INT,ws_ship_date_sk INT,ws_item_sk INT,ws_bill_customer_sk INT,ws_bill_cdemo_sk INT,ws_bill_hdemo_sk INT,ws_bill_addr_sk INT,ws_ship_customer_sk INT,ws_ship_cdemo_sk INT,ws_ship_hdemo_sk INT,ws_ship_addr_sk INT,ws_web_page_sk INT,ws_web_site_sk INT,ws_ship_mode_sk INT,ws_warehouse_sk INT,ws_promo_sk INT,ws_order_number BIGINT,ws_quantity INT,ws_wholesale_cost numeric(7, 2),ws_list_price numeric(7, 2),ws_sales_price numeric(7, 2),ws_ext_discount_amt numeric(7, 2),ws_ext_sales_price numeric(7, 2),ws_ext_wholesale_cost numeric(7, 2),ws_ext_list_price numeric(7, 2),ws_ext_tax numeric(7, 2),ws_coupon_amt numeric(7, 2),ws_ext_ship_cost numeric(7, 2),ws_net_paid numeric(7, 2),ws_net_paid_inc_tax numeric(7, 2),ws_net_paid_inc_ship numeric(7, 2),ws_net_paid_inc_ship_tax numeric(7, 2),ws_net_profit numeric(7, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.web_site AS SELECT * FROM OPENROWSET(BULK 'https://dataairawdls.dfs.core.windows.net/tpcds/raw/tpc-ds/source_files_001GB_parquet/web_site/*.parquet', FORMAT='PARQUET') WITH (web_site_sk INT,web_site_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,web_rec_start_date DATE,web_rec_end_date DATE,web_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,web_open_date_sk INT,web_close_date_sk INT,web_class VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,web_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,web_mkt_id INT,web_mkt_class VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,web_mkt_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,web_market_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,web_company_id INT,web_company_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,web_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,web_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,web_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,web_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,web_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,web_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,web_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,web_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,web_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,web_gmt_offset numeric(5, 2),web_tax_percentage numeric(5, 2)) AS [r]\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TPCDSDBDemo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_serverless views_original')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "-- Run against built serverless - TPCDSDBDemo\n\nUSE TPCDSDBDemo\nGO\n\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.call_center') DROP VIEW TPCDS.call_center\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.catalog_page') DROP VIEW TPCDS.catalog_page\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.catalog_returns') DROP VIEW TPCDS.catalog_returns\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.catalog_sales') DROP VIEW TPCDS.catalog_sales\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.customer') DROP VIEW TPCDS.customer\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.customer_address') DROP VIEW TPCDS.customer_address\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.customer_demographics') DROP VIEW TPCDS.customer_demographics\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.date_dim') DROP VIEW TPCDS.date_dim\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.household_demographics') DROP VIEW TPCDS.household_demographics\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.income_band') DROP VIEW TPCDS.income_band\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.inventory') DROP VIEW TPCDS.inventory\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.item') DROP VIEW TPCDS.item\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.promotion') DROP VIEW TPCDS.promotion\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.reason') DROP VIEW TPCDS.reason\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.ship_mode') DROP VIEW TPCDS.ship_mode\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.store') DROP VIEW TPCDS.store\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.store_returns') DROP VIEW TPCDS.store_returns\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.store_sales') DROP VIEW TPCDS.store_sales\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.time_dim') DROP VIEW TPCDS.time_dim\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.warehouse') DROP VIEW TPCDS.warehouse\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_page') DROP VIEW TPCDS.web_page\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_returns') DROP VIEW TPCDS.web_returns\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_sales') DROP VIEW TPCDS.web_sales\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'VIEW' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_site') DROP VIEW TPCDS.web_site\nGO\n\n\nCREATE VIEW TPCDS.call_center AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/call_center/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (cc_call_center_sk INT,cc_call_center_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,cc_rec_start_date DATE,cc_rec_end_date DATE,cc_closed_date_sk INT,cc_open_date_sk INT,cc_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cc_class VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cc_employees INT,cc_sq_ft INT,cc_hours CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,cc_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,cc_mkt_id INT,cc_mkt_class CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cc_mkt_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,cc_market_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,cc_division INT,cc_division_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cc_company INT,cc_company_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cc_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,cc_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,cc_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,cc_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,cc_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,cc_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,cc_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,cc_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,cc_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,cc_gmt_offset numeric(5, 2),cc_tax_percentage numeric(5, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.catalog_page AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/catalog_page/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (cp_catalog_page_sk INT,cp_catalog_page_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,cp_start_date_sk INT,cp_end_date_sk INT,cp_department VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,cp_catalog_number INT,cp_catalog_page_number INT,cp_description VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,cp_type VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.catalog_returns AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/catalog_returns/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (cr_returned_date_sk INT, cr_returned_time_sk INT,cr_item_sk INT,cr_refunded_customer_sk INT,cr_refunded_cdemo_sk INT,cr_refunded_hdemo_sk INT,cr_refunded_addr_sk INT,cr_returning_customer_sk INT,cr_returning_cdemo_sk INT,cr_returning_hdemo_sk INT,cr_returning_addr_sk INT,cr_call_center_sk INT,cr_catalog_page_sk INT,cr_ship_mode_sk INT,cr_warehouse_sk INT,cr_reason_sk INT,cr_order_number BIGINT,cr_return_quantity INT,cr_return_amount numeric(7, 2),cr_return_tax numeric(7, 2),cr_return_amt_inc_tax numeric(7, 2),cr_fee numeric(7, 2),cr_return_ship_cost numeric(7, 2),cr_refunded_cash numeric(7, 2),cr_reversed_charge numeric(7, 2),cr_store_credit numeric(7, 2),cr_net_loss numeric(7, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.catalog_sales AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/catalog_sales/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (cs_sold_date_sk INT, cs_sold_time_sk INT,cs_ship_date_sk INT,cs_bill_customer_sk INT,cs_bill_cdemo_sk INT,cs_bill_hdemo_sk INT,cs_bill_addr_sk INT,cs_ship_customer_sk INT,cs_ship_cdemo_sk INT,cs_ship_hdemo_sk INT,cs_ship_addr_sk INT,cs_call_center_sk INT,cs_catalog_page_sk INT,cs_ship_mode_sk INT,cs_warehouse_sk INT,cs_item_sk INT,cs_promo_sk INT,cs_order_number BIGINT,cs_quantity INT,cs_wholesale_cost numeric(7, 2),cs_list_price numeric(7, 2),cs_sales_price numeric(7, 2),cs_ext_discount_amt numeric(7, 2),cs_ext_sales_price numeric(7, 2),cs_ext_wholesale_cost numeric(7, 2),cs_ext_list_price numeric(7, 2),cs_ext_tax numeric(7, 2),cs_coupon_amt numeric(7, 2),cs_ext_ship_cost numeric(7, 2),cs_net_paid numeric(7, 2),cs_net_paid_inc_tax numeric(7, 2),cs_net_paid_inc_ship numeric(7, 2),cs_net_paid_inc_ship_tax numeric(7, 2),cs_net_profit numeric(7, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.customer AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/customer/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (c_customer_sk INT,c_customer_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,c_current_cdemo_sk INT,c_current_hdemo_sk INT,c_current_addr_sk INT,c_first_shipto_date_sk INT,c_first_sales_date_sk INT,c_salutation CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,c_first_name CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,c_last_name CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,c_preferred_cust_flag CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,c_birth_day INT,c_birth_month INT,c_birth_year INT,c_birth_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,c_login CHAR(13) COLLATE Latin1_General_100_BIN2_UTF8,c_email_address CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,c_last_review_date VARCHAR(7) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.customer_address AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/customer_address/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (ca_address_sk INT,ca_address_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,ca_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,ca_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,ca_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,ca_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,ca_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,ca_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,ca_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,ca_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,ca_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,ca_gmt_offset numeric(5, 2),ca_location_type CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.customer_demographics AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/customer_demographics/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (cd_demo_sk INT,cd_gender CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,cd_marital_status CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,cd_education_status CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,cd_purchase_estimate INT,cd_credit_rating CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,cd_dep_count INT,cd_dep_employed_count INT,cd_dep_college_count INT) AS [r]\nGO\nCREATE VIEW TPCDS.date_dim AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/date_dim/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (d_date_sk INT,d_date_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,d_date DATE,d_month_seq INT,d_week_seq INT,d_quarter_seq INT,d_year INT,d_dow INT,d_moy INT,d_dom INT,d_qoy INT,d_fy_year INT,d_fy_quarter_seq INT,d_fy_week_seq INT,d_day_name CHAR(9) COLLATE Latin1_General_100_BIN2_UTF8,d_quarter_name CHAR(6) COLLATE Latin1_General_100_BIN2_UTF8,d_holiday CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_weekend CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_following_holiday CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_first_dom INT,d_last_dom INT,d_same_day_ly INT,d_same_day_lq INT,d_current_day CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_current_week CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_current_month CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_current_quarter CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,d_current_year CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.household_demographics AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/household_demographics/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (hd_demo_sk INT,hd_income_band_sk INT,hd_buy_potential CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,hd_dep_count INT,hd_vehicle_count INT) AS [r]\nGO\nCREATE VIEW TPCDS.income_band AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/income_band/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (ib_income_band_sk INT,ib_lower_bound INT,ib_upper_bound INT) AS [r]\nGO\nCREATE VIEW TPCDS.inventory AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/inventory/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (inv_date_sk INT, inv_item_sk INT,inv_warehouse_sk INT,inv_quantity_on_hand INT) AS [r]\nGO\nCREATE VIEW TPCDS.item AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/item/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (i_item_sk INT,i_item_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,i_rec_start_date DATE,i_rec_end_date DATE,i_item_desc VARCHAR(200) COLLATE Latin1_General_100_BIN2_UTF8,i_current_price numeric(7, 2),i_wholesale_cost numeric(7, 2),i_brand_id INT,i_brand CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,i_class_id INT,i_class CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,i_category_id INT,i_category CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,i_manufact_id INT,i_manufact CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,i_size CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,i_formulation CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,i_color CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,i_units CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,i_container CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,i_manager_id INT,i_product_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.promotion AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/promotion/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (p_promo_sk INT,p_promo_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,p_start_date_sk INT,p_end_date_sk INT,p_item_sk INT,p_cost numeric(15, 2),p_response_target INT,p_promo_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_dmail CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_email CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_catalog CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_tv CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_radio CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_press CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_event CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_demo CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,p_channel_details VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,p_purpose CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,p_discount_active CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.reason AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/reason/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (r_reason_sk INT,r_reason_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,r_reason_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.ship_mode AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/ship_mode/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (sm_ship_mode_sk INT,sm_ship_mode_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,sm_type CHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,sm_code CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,sm_carrier CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,sm_contract CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.store AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/store/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (s_store_sk INT,s_store_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,s_rec_start_date DATE,s_rec_end_date DATE,s_closed_date_sk INT,s_store_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,s_number_employees INT,s_floor_space INT,s_hours CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,s_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,s_market_id INT,s_geography_class VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,s_market_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,s_market_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,s_division_id INT,s_division_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,s_company_id INT,s_company_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,s_street_number VARCHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,s_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,s_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,s_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,s_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,s_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,s_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,s_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,s_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,s_gmt_offset numeric(5, 2),s_tax_precentage numeric(5, 2)) AS [r]\nGO\n--CREATE VIEW TPCDS.store_returns AS SELECT CONVERT(INT, REPLACE(r.filepath(1), 'sr_returned_date_sk=', '')) AS sr_returned_date_sk, * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/store_returns/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (sr_return_time_sk INT,sr_item_sk INT,sr_customer_sk INT,sr_cdemo_sk INT,sr_hdemo_sk INT,sr_addr_sk INT,sr_store_sk INT,sr_reason_sk INT,sr_ticket_number BIGINT,sr_return_quantity INT,sr_return_amt numeric(7, 2),sr_return_tax numeric(7, 2),sr_return_amt_inc_tax numeric(7, 2),sr_fee numeric(7, 2),sr_return_ship_cost numeric(7, 2),sr_refunded_cash numeric(7, 2),sr_reversed_charge numeric(7, 2),sr_store_credit numeric(7, 2),sr_net_loss numeric(7, 2)) AS [r]\nCREATE VIEW TPCDS.store_returns AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/store_returns/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (sr_returned_date_sk INT,sr_return_time_sk INT,sr_item_sk INT,sr_customer_sk INT,sr_cdemo_sk INT,sr_hdemo_sk INT,sr_addr_sk INT,sr_store_sk INT,sr_reason_sk INT,sr_ticket_number BIGINT,sr_return_quantity INT,sr_return_amt numeric(7, 2),sr_return_tax numeric(7, 2),sr_return_amt_inc_tax numeric(7, 2),sr_fee numeric(7, 2),sr_return_ship_cost numeric(7, 2),sr_refunded_cash numeric(7, 2),sr_reversed_charge numeric(7, 2),sr_store_credit numeric(7, 2),sr_net_loss numeric(7, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.store_sales AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/store_sales/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (ss_sold_date_sk INT, ss_sold_time_sk INT,ss_item_sk INT,ss_customer_sk INT,ss_cdemo_sk INT,ss_hdemo_sk INT,ss_addr_sk INT,ss_store_sk INT,ss_promo_sk INT,ss_ticket_number BIGINT,ss_quantity INT,ss_wholesale_cost numeric(7, 2),ss_list_price numeric(7, 2),ss_sales_price numeric(7, 2),ss_ext_discount_amt numeric(7, 2),ss_ext_sales_price numeric(7, 2),ss_ext_wholesale_cost numeric(7, 2),ss_ext_list_price numeric(7, 2),ss_ext_tax numeric(7, 2),ss_coupon_amt numeric(7, 2),ss_net_paid numeric(7, 2),ss_net_paid_inc_tax numeric(7, 2),ss_net_profit numeric(7, 2)) AS [r]\nGO\n\nCREATE VIEW TPCDS.time_dim AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/time_dim/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (t_time_sk INT,t_time_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,t_time INT,t_hour INT,t_minute INT,t_second INT,t_am_pm CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,t_shift CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,t_sub_shift CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,t_meal_time CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8) AS [r]\nGO\nCREATE VIEW TPCDS.warehouse AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/warehouse/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (w_warehouse_sk INT,w_warehouse_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,w_warehouse_name VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,w_warehouse_sq_ft INT,w_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,w_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,w_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,w_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,w_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,w_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,w_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,w_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,w_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,w_gmt_offset numeric(5, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.web_page AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/web_page/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (wp_web_page_sk INT,wp_web_page_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,wp_rec_start_date DATE,wp_rec_end_date DATE,wp_creation_date_sk INT,wp_access_date_sk INT,wp_autogen_flag CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8,wp_customer_sk INT,wp_url VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,wp_type CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,wp_char_count INT,wp_link_count INT,wp_image_count INT,wp_max_ad_count INT) AS [r]\nGO\nCREATE VIEW TPCDS.web_returns AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/web_returns/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (wr_returned_date_sk INT, wr_returned_time_sk INT,wr_item_sk INT,wr_refunded_customer_sk INT,wr_refunded_cdemo_sk INT,wr_refunded_hdemo_sk INT,wr_refunded_addr_sk INT,wr_returning_customer_sk INT,wr_returning_cdemo_sk INT,wr_returning_hdemo_sk INT,wr_returning_addr_sk INT,wr_web_page_sk INT,wr_reason_sk INT,wr_order_number BIGINT,wr_return_quantity INT,wr_return_amt numeric(7, 2),wr_return_tax numeric(7, 2),wr_return_amt_inc_tax numeric(7, 2),wr_fee numeric(7, 2),wr_return_ship_cost numeric(7, 2),wr_refunded_cash numeric(7, 2),wr_reversed_charge numeric(7, 2),wr_account_credit numeric(7, 2),wr_net_loss numeric(7, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.web_sales AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/web_sales/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (ws_sold_date_sk INT, ws_sold_time_sk INT,ws_ship_date_sk INT,ws_item_sk INT,ws_bill_customer_sk INT,ws_bill_cdemo_sk INT,ws_bill_hdemo_sk INT,ws_bill_addr_sk INT,ws_ship_customer_sk INT,ws_ship_cdemo_sk INT,ws_ship_hdemo_sk INT,ws_ship_addr_sk INT,ws_web_page_sk INT,ws_web_site_sk INT,ws_ship_mode_sk INT,ws_warehouse_sk INT,ws_promo_sk INT,ws_order_number BIGINT,ws_quantity INT,ws_wholesale_cost numeric(7, 2),ws_list_price numeric(7, 2),ws_sales_price numeric(7, 2),ws_ext_discount_amt numeric(7, 2),ws_ext_sales_price numeric(7, 2),ws_ext_wholesale_cost numeric(7, 2),ws_ext_list_price numeric(7, 2),ws_ext_tax numeric(7, 2),ws_coupon_amt numeric(7, 2),ws_ext_ship_cost numeric(7, 2),ws_net_paid numeric(7, 2),ws_net_paid_inc_tax numeric(7, 2),ws_net_paid_inc_ship numeric(7, 2),ws_net_paid_inc_ship_tax numeric(7, 2),ws_net_profit numeric(7, 2)) AS [r]\nGO\nCREATE VIEW TPCDS.web_site AS SELECT * FROM OPENROWSET(BULK 'raw/tpc-ds/source_files_001GB_parquet/web_site/*.parquet', FORMAT='PARQUET', DATA_SOURCE = 'TPCDataSource') WITH (web_site_sk INT,web_site_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8,web_rec_start_date DATE,web_rec_end_date DATE,web_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,web_open_date_sk INT,web_close_date_sk INT,web_class VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,web_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,web_mkt_id INT,web_mkt_class VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,web_mkt_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8,web_market_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8,web_company_id INT,web_company_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,web_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,web_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,web_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8,web_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,web_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8,web_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8,web_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8,web_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8,web_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,web_gmt_offset numeric(5, 2),web_tax_percentage numeric(5, 2)) AS [r]\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TPCDSDBDemo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_serverless external table source and format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "-- Run against built serverless - TPCDSDBExternal\n\nUSE TPCDSDBExternal\nGO\n\nIF NOT EXISTS (SELECT 1 FROM sys.symmetric_keys WHERE symmetric_key_id = 101)\nBEGIN\n\tCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'P2ssw0rd2903$';\nEND\nGO\n\nCREATE DATABASE SCOPED CREDENTIAL [SasADLSDemoDatabaseScoped]\nWITH IDENTITY = 'SHARED ACCESS SIGNATURE',\n     SECRET = '?sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupyx&se=2099-09-07T05:53:48Z&st=2022-09-06T21:53:48Z&spr=https&sig=IhkV0ds%2BMpkJs3B9u49l2lWo8jp1ADTnCJg05lE6WAw%3D'\nGO\n\nCREATE EXTERNAL DATA SOURCE [TPCDataSource] WITH (\n    LOCATION = 'https://azrawdatalakeash.blob.core.windows.net/tpcds', CREDENTIAL = [SasADLSDemoDatabaseScoped]\n);\nGO\n\nCREATE EXTERNAL FILE FORMAT [FF_Parquet] WITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\nGO\n\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.call_center') DROP EXTERNAL TABLE TPCDS.call_center\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.catalog_page') DROP EXTERNAL TABLE TPCDS.catalog_page\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.catalog_returns') DROP EXTERNAL TABLE TPCDS.catalog_returns\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.catalog_sales') DROP EXTERNAL TABLE TPCDS.catalog_sales\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.customer') DROP EXTERNAL TABLE TPCDS.customer\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.customer_address') DROP EXTERNAL TABLE TPCDS.customer_address\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.customer_demographics') DROP EXTERNAL TABLE TPCDS.customer_demographics\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.date_dim') DROP EXTERNAL TABLE TPCDS.date_dim\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.household_demographics') DROP EXTERNAL TABLE TPCDS.household_demographics\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.income_band') DROP EXTERNAL TABLE TPCDS.income_band\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.inventory') DROP EXTERNAL TABLE TPCDS.inventory\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.item') DROP EXTERNAL TABLE TPCDS.item\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.promotion') DROP EXTERNAL TABLE TPCDS.promotion\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.reason') DROP EXTERNAL TABLE TPCDS.reason\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.ship_mode') DROP EXTERNAL TABLE TPCDS.ship_mode\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.store') DROP EXTERNAL TABLE TPCDS.store\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.store_returns') DROP EXTERNAL TABLE TPCDS.store_returns\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.store_sales') DROP EXTERNAL TABLE TPCDS.store_sales\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.time_dim') DROP EXTERNAL TABLE TPCDS.time_dim\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.warehouse') DROP EXTERNAL TABLE TPCDS.warehouse\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_page') DROP EXTERNAL TABLE TPCDS.web_page\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_returns') DROP EXTERNAL TABLE TPCDS.web_returns\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_sales') DROP EXTERNAL TABLE TPCDS.web_sales\nIF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) = 'TPCDS.web_site') DROP EXTERNAL TABLE TPCDS.web_site\nGO\n\nCREATE EXTERNAL TABLE TPCDS.call_center ( cc_call_center_sk INT, cc_call_center_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, cc_rec_start_date DATE, cc_rec_end_date DATE, cc_closed_date_sk INT, cc_open_date_sk INT, cc_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, cc_class VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, cc_employees INT, cc_sq_ft INT, cc_hours CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, cc_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8, cc_mkt_id INT, cc_mkt_class CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, cc_mkt_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8, cc_market_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8, cc_division INT, cc_division_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, cc_company INT, cc_company_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, cc_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, cc_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8, cc_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8, cc_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, cc_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8, cc_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8, cc_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8, cc_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, cc_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, cc_gmt_offset numeric(5, 2), cc_tax_percentage numeric(5, 2) ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/call_center/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.catalog_page ( cp_catalog_page_sk INT, cp_catalog_page_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, cp_start_date_sk INT, cp_end_date_sk INT, cp_department VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, cp_catalog_number INT, cp_catalog_page_number INT, cp_description VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8, cp_type VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8 ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/catalog_page/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.catalog_returns ( cr_returned_date_sk INT, cr_returned_time_sk INT, cr_item_sk INT, cr_refunded_customer_sk INT, cr_refunded_cdemo_sk INT, cr_refunded_hdemo_sk INT, cr_refunded_addr_sk INT, cr_returning_customer_sk INT, cr_returning_cdemo_sk INT, cr_returning_hdemo_sk INT, cr_returning_addr_sk INT, cr_call_center_sk INT, cr_catalog_page_sk INT, cr_ship_mode_sk INT, cr_warehouse_sk INT, cr_reason_sk INT, cr_order_number BIGINT, cr_return_quantity INT, cr_return_amount numeric(7, 2), cr_return_tax numeric(7, 2), cr_return_amt_inc_tax numeric(7, 2), cr_fee numeric(7, 2), cr_return_ship_cost numeric(7, 2), cr_refunded_cash numeric(7, 2), cr_reversed_charge numeric(7, 2), cr_store_credit numeric(7, 2), cr_net_loss numeric(7, 2) ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/catalog_returns/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.catalog_sales ( cs_sold_date_sk INT, cs_sold_time_sk INT, cs_ship_date_sk INT, cs_bill_customer_sk INT, cs_bill_cdemo_sk INT, cs_bill_hdemo_sk INT, cs_bill_addr_sk INT, cs_ship_customer_sk INT, cs_ship_cdemo_sk INT, cs_ship_hdemo_sk INT, cs_ship_addr_sk INT, cs_call_center_sk INT, cs_catalog_page_sk INT, cs_ship_mode_sk INT, cs_warehouse_sk INT, cs_item_sk INT, cs_promo_sk INT, cs_order_number BIGINT, cs_quantity INT, cs_wholesale_cost numeric(7, 2), cs_list_price numeric(7, 2), cs_sales_price numeric(7, 2), cs_ext_discount_amt numeric(7, 2), cs_ext_sales_price numeric(7, 2), cs_ext_wholesale_cost numeric(7, 2), cs_ext_list_price numeric(7, 2), cs_ext_tax numeric(7, 2), cs_coupon_amt numeric(7, 2), cs_ext_ship_cost numeric(7, 2), cs_net_paid numeric(7, 2), cs_net_paid_inc_tax numeric(7, 2), cs_net_paid_inc_ship numeric(7, 2), cs_net_paid_inc_ship_tax numeric(7, 2), cs_net_profit numeric(7, 2) ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/catalog_sales/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.customer ( c_customer_sk INT, c_customer_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, c_current_cdemo_sk INT, c_current_hdemo_sk INT, c_current_addr_sk INT, c_first_shipto_date_sk INT, c_first_sales_date_sk INT, c_salutation CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, c_first_name CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, c_last_name CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, c_preferred_cust_flag CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, c_birth_day INT, c_birth_month INT, c_birth_year INT, c_birth_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, c_login CHAR(13) COLLATE Latin1_General_100_BIN2_UTF8, c_email_address CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, c_last_review_date VARCHAR(7) COLLATE Latin1_General_100_BIN2_UTF8 ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/customer/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.customer_address ( ca_address_sk INT, ca_address_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, ca_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, ca_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8, ca_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8, ca_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, ca_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8, ca_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8, ca_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8, ca_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, ca_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, ca_gmt_offset numeric(5, 2), ca_location_type CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8 ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/customer_address/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.customer_demographics ( cd_demo_sk INT, cd_gender CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, cd_marital_status CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, cd_education_status CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, cd_purchase_estimate INT, cd_credit_rating CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, cd_dep_count INT, cd_dep_employed_count INT, cd_dep_college_count INT ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/customer_demographics/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.date_dim ( d_date_sk INT, d_date_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, d_date DATE, d_month_seq INT, d_week_seq INT, d_quarter_seq INT, d_year INT, d_dow INT, d_moy INT, d_dom INT, d_qoy INT, d_fy_year INT, d_fy_quarter_seq INT, d_fy_week_seq INT, d_day_name CHAR(9) COLLATE Latin1_General_100_BIN2_UTF8, d_quarter_name CHAR(6) COLLATE Latin1_General_100_BIN2_UTF8, d_holiday CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, d_weekend CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, d_following_holiday CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, d_first_dom INT, d_last_dom INT, d_same_day_ly INT, d_same_day_lq INT, d_current_day CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, d_current_week CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, d_current_month CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, d_current_quarter CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, d_current_year CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8 ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/date_dim/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.household_demographics ( hd_demo_sk INT, hd_income_band_sk INT, hd_buy_potential CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8, hd_dep_count INT, hd_vehicle_count INT ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/household_demographics/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.income_band ( ib_income_band_sk INT, ib_lower_bound INT, ib_upper_bound INT ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/income_band/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.inventory ( inv_date_sk INT, inv_item_sk INT, inv_warehouse_sk INT, inv_quantity_on_hand INT ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/inventory/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.item ( i_item_sk INT, i_item_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, i_rec_start_date DATE, i_rec_end_date DATE, i_item_desc VARCHAR(200) COLLATE Latin1_General_100_BIN2_UTF8, i_current_price numeric(7, 2), i_wholesale_cost numeric(7, 2), i_brand_id INT, i_brand CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, i_class_id INT, i_class CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, i_category_id INT, i_category CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, i_manufact_id INT, i_manufact CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, i_size CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, i_formulation CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, i_color CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, i_units CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, i_container CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, i_manager_id INT, i_product_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8 ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/item/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.promotion ( p_promo_sk INT, p_promo_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, p_start_date_sk INT, p_end_date_sk INT, p_item_sk INT, p_cost numeric(15, 2), p_response_target INT, p_promo_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, p_channel_dmail CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, p_channel_email CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, p_channel_catalog CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, p_channel_tv CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, p_channel_radio CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, p_channel_press CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, p_channel_event CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, p_channel_demo CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, p_channel_details VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8, p_purpose CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8, p_discount_active CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8 ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/promotion/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.reason ( r_reason_sk INT, r_reason_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, r_reason_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8 ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/reason/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.ship_mode ( sm_ship_mode_sk INT, sm_ship_mode_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, sm_type CHAR(30) COLLATE Latin1_General_100_BIN2_UTF8, sm_code CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, sm_carrier CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, sm_contract CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8 ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/ship_mode/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.store ( s_store_sk INT, s_store_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, s_rec_start_date DATE, s_rec_end_date DATE, s_closed_date_sk INT, s_store_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, s_number_employees INT, s_floor_space INT, s_hours CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, s_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8, s_market_id INT, s_geography_class VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8, s_market_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8, s_market_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8, s_division_id INT, s_division_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, s_company_id INT, s_company_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, s_street_number VARCHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, s_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8, s_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8, s_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, s_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8, s_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8, s_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8, s_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, s_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, s_gmt_offset numeric(5, 2), s_tax_precentage numeric(5, 2) ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/store/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.store_returns ( sr_returned_date_sk INT, sr_return_time_sk INT, sr_item_sk INT, sr_customer_sk INT, sr_cdemo_sk INT, sr_hdemo_sk INT, sr_addr_sk INT, sr_store_sk INT, sr_reason_sk INT, sr_ticket_number BIGINT, sr_return_quantity INT, sr_return_amt numeric(7, 2), sr_return_tax numeric(7, 2), sr_return_amt_inc_tax numeric(7, 2), sr_fee numeric(7, 2), sr_return_ship_cost numeric(7, 2), sr_refunded_cash numeric(7, 2), sr_reversed_charge numeric(7, 2), sr_store_credit numeric(7, 2), sr_net_loss numeric(7, 2) ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/store_returns/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.store_sales ( ss_sold_date_sk INT, ss_sold_time_sk INT, ss_item_sk INT, ss_customer_sk INT, ss_cdemo_sk INT, ss_hdemo_sk INT, ss_addr_sk INT, ss_store_sk INT, ss_promo_sk INT, ss_ticket_number BIGINT, ss_quantity INT, ss_wholesale_cost numeric(7, 2), ss_list_price numeric(7, 2), ss_sales_price numeric(7, 2), ss_ext_discount_amt numeric(7, 2), ss_ext_sales_price numeric(7, 2), ss_ext_wholesale_cost numeric(7, 2), ss_ext_list_price numeric(7, 2), ss_ext_tax numeric(7, 2), ss_coupon_amt numeric(7, 2), ss_net_paid numeric(7, 2), ss_net_paid_inc_tax numeric(7, 2), ss_net_profit numeric(7, 2) ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/store_sales/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.time_dim ( t_time_sk INT, t_time_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, t_time INT, t_hour INT, t_minute INT, t_second INT, t_am_pm CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8, t_shift CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, t_sub_shift CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, t_meal_time CHAR(20) COLLATE Latin1_General_100_BIN2_UTF8 ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/time_dim/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.warehouse ( w_warehouse_sk INT, w_warehouse_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, w_warehouse_name VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, w_warehouse_sq_ft INT, w_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, w_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8, w_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8, w_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, w_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8, w_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8, w_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8, w_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, w_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, w_gmt_offset numeric(5, 2) ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/warehouse/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.web_page ( wp_web_page_sk INT, wp_web_page_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, wp_rec_start_date DATE, wp_rec_end_date DATE, wp_creation_date_sk INT, wp_access_date_sk INT, wp_autogen_flag CHAR(1) COLLATE Latin1_General_100_BIN2_UTF8, wp_customer_sk INT, wp_url VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8, wp_type CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, wp_char_count INT, wp_link_count INT, wp_image_count INT, wp_max_ad_count INT ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/web_page/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.web_returns ( wr_returned_date_sk INT, wr_returned_time_sk INT, wr_item_sk INT, wr_refunded_customer_sk INT, wr_refunded_cdemo_sk INT, wr_refunded_hdemo_sk INT, wr_refunded_addr_sk INT, wr_returning_customer_sk INT, wr_returning_cdemo_sk INT, wr_returning_hdemo_sk INT, wr_returning_addr_sk INT, wr_web_page_sk INT, wr_reason_sk INT, wr_order_number BIGINT, wr_return_quantity INT, wr_return_amt numeric(7, 2), wr_return_tax numeric(7, 2), wr_return_amt_inc_tax numeric(7, 2), wr_fee numeric(7, 2), wr_return_ship_cost numeric(7, 2), wr_refunded_cash numeric(7, 2), wr_reversed_charge numeric(7, 2), wr_account_credit numeric(7, 2), wr_net_loss numeric(7, 2) ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/web_returns/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.web_sales ( ws_sold_date_sk INT, ws_sold_time_sk INT, ws_ship_date_sk INT, ws_item_sk INT, ws_bill_customer_sk INT, ws_bill_cdemo_sk INT, ws_bill_hdemo_sk INT, ws_bill_addr_sk INT, ws_ship_customer_sk INT, ws_ship_cdemo_sk INT, ws_ship_hdemo_sk INT, ws_ship_addr_sk INT, ws_web_page_sk INT, ws_web_site_sk INT, ws_ship_mode_sk INT, ws_warehouse_sk INT, ws_promo_sk INT, ws_order_number BIGINT, ws_quantity INT, ws_wholesale_cost numeric(7, 2), ws_list_price numeric(7, 2), ws_sales_price numeric(7, 2), ws_ext_discount_amt numeric(7, 2), ws_ext_sales_price numeric(7, 2), ws_ext_wholesale_cost numeric(7, 2), ws_ext_list_price numeric(7, 2), ws_ext_tax numeric(7, 2), ws_coupon_amt numeric(7, 2), ws_ext_ship_cost numeric(7, 2), ws_net_paid numeric(7, 2), ws_net_paid_inc_tax numeric(7, 2), ws_net_paid_inc_ship numeric(7, 2), ws_net_paid_inc_ship_tax numeric(7, 2), ws_net_profit numeric(7, 2) ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/web_sales/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nCREATE EXTERNAL TABLE TPCDS.web_site ( web_site_sk INT, web_site_id CHAR(16) COLLATE Latin1_General_100_BIN2_UTF8, web_rec_start_date DATE, web_rec_end_date DATE, web_name VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, web_open_date_sk INT, web_close_date_sk INT, web_class VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, web_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8, web_mkt_id INT, web_mkt_class VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, web_mkt_desc VARCHAR(100) COLLATE Latin1_General_100_BIN2_UTF8, web_market_manager VARCHAR(40) COLLATE Latin1_General_100_BIN2_UTF8, web_company_id INT, web_company_name CHAR(50) COLLATE Latin1_General_100_BIN2_UTF8, web_street_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, web_street_name VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8, web_street_type CHAR(15) COLLATE Latin1_General_100_BIN2_UTF8, web_suite_number CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, web_city VARCHAR(60) COLLATE Latin1_General_100_BIN2_UTF8, web_county VARCHAR(30) COLLATE Latin1_General_100_BIN2_UTF8, web_state CHAR(2) COLLATE Latin1_General_100_BIN2_UTF8, web_zip CHAR(10) COLLATE Latin1_General_100_BIN2_UTF8, web_country VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8, web_gmt_offset numeric(5, 2), web_tax_percentage numeric(5, 2) ) WITH ( LOCATION = 'raw/tpc-ds/source_files_001GB_parquet/web_site/*.parquet', DATA_SOURCE = [TPCDataSource], FILE_FORMAT = [FF_Parquet])\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TPCDSDBExternal",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/_Reference NycTaxi')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NycTaxi"
				},
				"content": {
					"query": "-- Custom built solution\n-- https://github.com/akshata29/msdaie2e",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/_Reference Tpc')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TpcBenchmark"
				},
				"content": {
					"query": "-- https://github.com/swanguni/Azure-Synapse-TPC-DS-Benchmark-Testing",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/_Reference')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport"
				},
				"content": {
					"query": "-- https://github.com/solliancenet/azure-synapse-analytics-workshop-400\n-- All folders except 99_",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/00_check libraries')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "beaf2b56-87cf-4e7a-b080-f83d14ea6815"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import pip #needed to use the pip functions\n",
							"for i in pip.get_installed_distributions(local_only=True):print(i)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01 - Using Azure Open Datasets in Synapse')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"metadata": {
					"save_output": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"50b52121-74c2-4b97-933b-557c2cee5a3d": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "count",
												"1": "923257",
												"2": "923257",
												"3": "923257",
												"4": "923257",
												"5": "923257",
												"6": "923257",
												"7": "923257",
												"8": "923257",
												"9": "923257",
												"10": "923257",
												"11": "923257",
												"12": "923257",
												"13": "923257",
												"14": "17606",
												"15": "17606",
												"16": "17606",
												"17": "0",
												"18": "923257",
												"19": "923257",
												"20": "923257"
											},
											{
												"0": "mean",
												"1": "null",
												"2": "1.833860994284365",
												"3": "1.357852688904606",
												"4": "3.2325295231988496",
												"5": "1.0264538909534444",
												"6": "16.112515713388373",
												"7": "1.0154323227443713",
												"8": "2018.0",
												"9": "5.1364462982679795",
												"10": "5.1364462982679795",
												"11": "13.844344532454127",
												"12": "4.137266221647927",
												"13": "13.697660564718166",
												"14": "null",
												"15": "null",
												"16": "null",
												"17": "null",
												"18": "18.58190665884031",
												"19": "19.26542663635369",
												"20": "4213.8777393510145"
											},
											{
												"0": "stddev",
												"1": "null",
												"2": "0.372205570280615",
												"3": "1.0397434350543042",
												"4": "3.7213549381277544",
												"5": "2.074783792187912",
												"6": "13.492789079321522",
												"7": "0.12326468519506639",
												"8": "0.0",
												"9": "0.3432620479749415",
												"10": "0.3432620479749415",
												"11": "9.330046641186325",
												"12": "1.982096526293111",
												"13": "5.987036976846423",
												"14": "null",
												"15": "null",
												"16": "null",
												"17": "null",
												"18": "3.6046653323635867",
												"19": "8.120658513433671",
												"20": "4389.942208506073"
											},
											{
												"0": "min",
												"1": "US",
												"2": "1",
												"3": "0",
												"4": "0.0",
												"5": "-2.0",
												"6": "-235.0",
												"7": "1",
												"8": "2018",
												"9": "5",
												"10": "5",
												"11": "1",
												"12": "1",
												"13": "0",
												"14": "United States",
												"15": "Memorial Day",
												"16": "Memorial Day",
												"17": "null",
												"18": "11.900000000000006",
												"19": "1.0",
												"20": "0.0"
											},
											{
												"0": "max",
												"1": "US",
												"2": "2",
												"3": "9",
												"4": "621.1",
												"5": "450.0",
												"6": "2704.8",
												"7": "2",
												"8": "2018",
												"9": "6",
												"10": "6",
												"11": "31",
												"12": "7",
												"13": "23",
												"14": "United States",
												"15": "Memorial Day",
												"16": "Memorial Day",
												"17": "null",
												"18": "26.072330097087377",
												"19": "24.0",
												"20": "9999.0"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "summary",
												"type": "string"
											},
											{
												"key": "1",
												"name": "country_code",
												"type": "string"
											},
											{
												"key": "2",
												"name": "vendorID",
												"type": "string"
											},
											{
												"key": "3",
												"name": "passengerCount",
												"type": "string"
											},
											{
												"key": "4",
												"name": "tripDistance",
												"type": "string"
											},
											{
												"key": "5",
												"name": "tipAmount",
												"type": "string"
											},
											{
												"key": "6",
												"name": "totalAmount",
												"type": "string"
											},
											{
												"key": "7",
												"name": "tripType",
												"type": "string"
											},
											{
												"key": "8",
												"name": "puYear",
												"type": "string"
											},
											{
												"key": "9",
												"name": "puMonth",
												"type": "string"
											},
											{
												"key": "10",
												"name": "month_num",
												"type": "string"
											},
											{
												"key": "11",
												"name": "day_of_month",
												"type": "string"
											},
											{
												"key": "12",
												"name": "day_of_week",
												"type": "string"
											},
											{
												"key": "13",
												"name": "hour_of_day",
												"type": "string"
											},
											{
												"key": "14",
												"name": "countryOrRegion",
												"type": "string"
											},
											{
												"key": "15",
												"name": "holidayName",
												"type": "string"
											},
											{
												"key": "16",
												"name": "normalizeHolidayName",
												"type": "string"
											},
											{
												"key": "17",
												"name": "avg_snowDepth",
												"type": "string"
											},
											{
												"key": "18",
												"name": "avg_temperature",
												"type": "string"
											},
											{
												"key": "19",
												"name": "max_precipTime",
												"type": "string"
											},
											{
												"key": "20",
												"name": "max_precipDepth",
												"type": "string"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Using Azure Open Datasets in Synapse - Enrich NYC Green Taxi Data with Holiday and Weather\n",
							"\n",
							"Synapse has [Azure Open Datasets](https://azure.microsoft.com/en-us/services/open-datasets/) package pre-installed. This notebook provides examples of how to enrich NYC Green Taxi Data with Holiday and Weather with focusing on :\n",
							"- read Azure Open Dataset\n",
							"- manipulate the data to prepare for further analysis, including column projection, filtering, grouping and joins etc. \n",
							"- create a Spark table to be used in other notebooks for modeling training"
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data loading \n",
							"Let's first load the [NYC green taxi trip records](https://azure.microsoft.com/en-us/services/open-datasets/catalog/nyc-taxi-limousine-commission-green-taxi-trip-records/). The Open Datasets package contains a class representing each data source (NycTlcGreen for example) to easily filter date parameters before downloading."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.opendatasets import NycTlcGreen\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"end_date = parser.parse('2018-06-06')\n",
							"start_date = parser.parse('2018-05-01')\n",
							"\n",
							"nyc_tlc = NycTlcGreen(start_date=start_date, end_date=end_date)\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# Display 5 rows\n",
							"\n",
							"nyc_tlc_df.show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now that the initial data is loaded. Let's do some projection on the data to \n",
							"- create new columns for the month number, day of month, day of week, and hour of day. These info is going to be used in the training model to factor in time-based seasonality.\n",
							"- add a static feature for the country code to join holiday data. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Extract month, day of month, and day of week from pickup datetime and add a static column for the country code to join holiday data. \n",
							"\n",
							"import pyspark.sql.functions as f\n",
							"\n",
							"nyc_tlc_df_expand = nyc_tlc_df.withColumn('datetime',f.to_date('lpepPickupDatetime'))\\\n",
							"                .withColumn('month_num',f.month(nyc_tlc_df.lpepPickupDatetime))\\\n",
							"                .withColumn('day_of_month',f.dayofmonth(nyc_tlc_df.lpepPickupDatetime))\\\n",
							"                .withColumn('day_of_week',f.dayofweek(nyc_tlc_df.lpepPickupDatetime))\\\n",
							"                .withColumn('hour_of_day',f.hour(nyc_tlc_df.lpepPickupDatetime))\\\n",
							"                .withColumn('country_code',f.lit('US'))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"Remove some of the columns that won't need for modeling or additional feature building.\n",
							"\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Remove unused columns from nyc green taxi data\n",
							"\n",
							"columns_to_remove = [\"lpepDropoffDatetime\", \"puLocationId\", \"doLocationId\", \"pickupLongitude\", \n",
							"                     \"pickupLatitude\", \"dropoffLongitude\",\"dropoffLatitude\" ,\"rateCodeID\", \n",
							"                     \"storeAndFwdFlag\",\"paymentType\", \"fareAmount\", \"extra\", \"mtaTax\",\n",
							"                     \"improvementSurcharge\", \"tollsAmount\", \"ehailFee\", \"tripType \"  \n",
							"                    ]\n",
							"\n",
							"nyc_tlc_df_clean = nyc_tlc_df_expand.select([column for column in nyc_tlc_df_expand.columns if column not in columns_to_remove])"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"# Display 5 rows\n",
							"nyc_tlc_df_clean.show(5)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Enrich with holiday data\n",
							"Now that we have taxi data downloaded and roughly prepared, add in holiday data as additional features. Holiday-specific features will assist model accuracy, as major holidays are times where taxi demand increases dramatically and supply becomes limited. \n",
							"\n",
							"Let's load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) from Azure Open datasets.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.opendatasets import PublicHolidays\n",
							"\n",
							"hol = PublicHolidays(start_date=start_date, end_date=end_date)\n",
							"hol_df = hol.to_spark_dataframe()\n",
							"\n",
							"# Display data\n",
							"hol_df.show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"Rename the countryRegionCode and date columns to match the respective field names from the taxi data, and also normalize the time so it can be used as a key. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"hol_df_clean = hol_df.withColumnRenamed('countryRegionCode','country_code')\\\n",
							"            .withColumn('datetime',f.to_date('date'))\n",
							"\n",
							"hol_df_clean.show(5)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, join the holiday data with the taxi data by performing a left-join. This will preserve all records from taxi data, but add in holiday data where it exists for the corresponding datetime and country_code, which in this case is always \"US\". Preview the data to verify that they were merged correctly."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# enrich taxi data with holiday data\n",
							"nyc_taxi_holiday_df = nyc_tlc_df_clean.join(hol_df_clean, on = ['datetime', 'country_code'] , how = 'left')\n",
							"\n",
							"nyc_taxi_holiday_df.show(5)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"# Create a temp table and filter out non empty holiday rows\n",
							"\n",
							"nyc_taxi_holiday_df.createOrReplaceTempView(\"nyc_taxi_holiday_df\")\n",
							"spark.sql(\"SELECT * from nyc_taxi_holiday_df WHERE holidayName is NOT NULL \").show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Enrich with weather data??\n",
							"\n",
							"Now we append NOAA surface weather data to the taxi and holiday data. Use a similar approach to fetch the [NOAA weather history data](https://azure.microsoft.com/en-us/services/open-datasets/catalog/noaa-integrated-surface-data/) from Azure Open Datasets. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.opendatasets import NoaaIsdWeather\n",
							"\n",
							"isd = NoaaIsdWeather(start_date, end_date)\n",
							"isd_df = isd.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"source": [
							"isd_df.show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"# Filter out weather info for new york city, remove the recording with null temperature \n",
							"\n",
							"weather_df = isd_df.filter(isd_df.latitude >= '40.53')\\\n",
							"                        .filter(isd_df.latitude <= '40.88')\\\n",
							"                        .filter(isd_df.longitude >= '-74.09')\\\n",
							"                        .filter(isd_df.longitude <= '-73.72')\\\n",
							"                        .filter(isd_df.temperature.isNotNull())\\\n",
							"                        .withColumnRenamed('datetime','datetime_full')\n",
							"                         "
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"source": [
							"# Remove unused columns\n",
							"\n",
							"columns_to_remove_weather = [\"usaf\", \"wban\", \"longitude\", \"latitude\"]\n",
							"weather_df_clean = weather_df.select([column for column in weather_df.columns if column not in columns_to_remove_weather])\\\n",
							"                        .withColumn('datetime',f.to_date('datetime_full'))\n",
							"\n",
							"weather_df_clean.show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next group the weather data so that you have daily aggregated weather values. \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Enrich weather data with aggregation statistics\n",
							"\n",
							"aggregations = {\"snowDepth\": \"mean\", \"precipTime\": \"max\", \"temperature\": \"mean\", \"precipDepth\": \"max\"}\n",
							"weather_df_grouped = weather_df_clean.groupby(\"datetime\").agg(aggregations)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"source": [
							"weather_df_grouped.show(5)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"source": [
							"# Rename columns\n",
							"\n",
							"weather_df_grouped = weather_df_grouped.withColumnRenamed('avg(snowDepth)','avg_snowDepth')\\\n",
							"                                       .withColumnRenamed('avg(temperature)','avg_temperature')\\\n",
							"                                       .withColumnRenamed('max(precipTime)','max_precipTime')\\\n",
							"                                       .withColumnRenamed('max(precipDepth)','max_precipDepth')"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"Merge the taxi and holiday data you prepared with the new weather data. This time you only need the datetime key, and again perform a left-join of the data. Run the describe() function on the new dataframe to see summary statistics for each field."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# enrich taxi data with weather\n",
							"nyc_taxi_holiday_weather_df = nyc_taxi_holiday_df.join(weather_df_grouped, on = 'datetime' , how = 'left')\n",
							"nyc_taxi_holiday_weather_df.cache()"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"source": [
							"nyc_taxi_holiday_weather_df.show(5)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"# Run the describe() function on the new dataframe to see summary statistics for each field.\n",
							"\n",
							"display(nyc_taxi_holiday_weather_df.describe())"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"source": [
							"The summary statistics shows that the totalAmount field has negative values, which don't make sense in the context.\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Remove invalid rows with less than 0 taxi fare or tip\n",
							"final_df = nyc_taxi_holiday_weather_df.filter(nyc_taxi_holiday_weather_df.tipAmount > 0)\\\n",
							"                                      .filter(nyc_taxi_holiday_weather_df.totalAmount > 0)"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Cleaning up the existing Database\n",
							"\n",
							"First we need to drop the tables since Spark requires that a database is empty before we can drop the Database.\n",
							"\n",
							"Then we recreate the database and set the default database context to it."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DROP TABLE IF EXISTS NYCTaxi.nyc_taxi_holiday_weather\"); "
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DROP DATABASE IF EXISTS NYCTaxi\"); \n",
							"spark.sql(\"CREATE DATABASE NYCTaxi\"); \n",
							"spark.sql(\"USE NYCTaxi\");"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Creating a new table\n",
							"We create a nyc_taxi_holiday_weather table from the nyc_taxi_holiday_weather dataframe.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"\n",
							"final_df.write.saveAsTable(\"nyc_taxi_holiday_weather\");\n",
							"spark.sql(\"SELECT COUNT(*) FROM nyc_taxi_holiday_weather\").show();"
						],
						"outputs": [],
						"execution_count": 23
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02 - Getting Started with Delta Lake')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"metadata": {
					"kernel_info": {
						"name": "synapse_pyspark"
					},
					"save_output": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Hitchhiker's Guide to Delta Lake (Python)\n",
							"\n",
							"This tutorial has been adapted for more clarity from its original counterpart [here](https://docs.delta.io/latest/quick-start.html). This notebook helps you quickly explore the main features of [Delta Lake](https://github.com/delta-io/delta). It provides code snippets that show how to read from and write to Delta Lake tables from interactive, batch, and streaming queries.\n",
							"\n",
							"Here's what we will cover:\n",
							"* Create a table\n",
							"* Understanding meta-data\n",
							"* Read data\n",
							"* Update table data\n",
							"* Overwrite table data\n",
							"* Conditional update without overwrite\n",
							"* Read older versions of data using Time Travel\n",
							"* Write a stream of data to a table\n",
							"* Read a stream of changes from a table"
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Configuration\n",
							"Make sure you modify this as appropriate."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import random\n",
							"\n",
							"session_id = random.randint(0,1000000)\n",
							"delta_table_path = \"/delta/delta-table-{0}\".format(session_id)\n",
							"\n",
							"delta_table_path"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Create a table\n",
							"To create a Delta Lake table, write a DataFrame out in the **delta** format. You can use existing Spark SQL code and change the format from parquet, csv, json, and so on, to delta.\n",
							"\n",
							"These operations create a new Delta Lake table using the schema that was inferred from your DataFrame. For the full set of options available when you create a new Delta Lake table, see Create a table and Write to a table (subsequent cells in this notebook)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"data = spark.range(0,5)\n",
							"data.show()\n",
							"data.write.format(\"delta\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Understanding Meta-data\n",
							"\n",
							"In Delta Lake, meta-data is no different from data i.e., it is stored next to the data. Therefore, an interesting side-effect here is that you can peek into meta-data using regular Spark APIs. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"[log_line.value for log_line in spark.read.text(delta_table_path + \"/_delta_log/\").collect()]"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read data\n",
							"\n",
							"You read data in your Delta Lake table by specifying the path to the files."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.format(\"delta\").load(delta_table_path)\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Update table data\n",
							"\n",
							"Delta Lake supports several operations to modify tables using standard DataFrame APIs. This example runs a batch job to overwrite the data in the table.\n"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"data = spark.range(5,10)\n",
							"data.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"When you now inspect the meta-data, what you will notice is that the original data is over-written. Well, not in a true sense but appropriate entries are added to Delta's transaction log so it can provide an \"illusion\" that the original data was deleted. We can verify this by re-inspecting the meta-data. You will see several entries indicating reference removal to the original data."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"[log_line.value for log_line in spark.read.text(delta_table_path + \"/_delta_log/\").collect()]"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Save as catalog tables\n",
							"\n",
							"Delta Lake can write to managed or external catalog tables."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Write data to a new managed catalog table.\n",
							"data.write.format(\"delta\").saveAsTable(\"ManagedDeltaTable\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"# Define an external catalog table that points to the existing Delta Lake data in storage.\n",
							"spark.sql(\"CREATE TABLE ExternalDeltaTable USING DELTA LOCATION '{0}'\".format(delta_table_path))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"# List the 2 new tables.\n",
							"spark.sql(\"SHOW TABLES\").show()\n",
							"\n",
							"# Explore their properties.\n",
							"spark.sql(\"DESCRIBE EXTENDED ManagedDeltaTable\").show(truncate=False)\n",
							"spark.sql(\"DESCRIBE EXTENDED ExternalDeltaTable\").show(truncate=False)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Conditional update without overwrite\n",
							"\n",
							"Delta Lake provides programmatic APIs to conditional update, delete, and merge (upsert) data into tables. For more information on these operations, see [Table Deletes, Updates, and Merges](https://docs.delta.io/latest/delta-update.html)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from delta.tables import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"delta_table = DeltaTable.forPath(spark, delta_table_path)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"source": [
							"# Update every even value by adding 100 to it\n",
							"delta_table.update(\n",
							"  condition = expr(\"id % 2 == 0\"),\n",
							"  set = { \"id\": expr(\"id + 100\") })\n",
							"delta_table.toDF().show()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"# Delete every even value\n",
							"delta_table.delete(\"id % 2 == 0\")\n",
							"delta_table.toDF().show()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"source": [
							"# Upsert (merge) new data\n",
							"new_data = spark.range(0,20).alias(\"newData\")\n",
							"\n",
							"delta_table.alias(\"oldData\")\\\n",
							"    .merge(new_data.alias(\"newData\"), \"oldData.id = newData.id\")\\\n",
							"    .whenMatchedUpdate(set = { \"id\": lit(\"-1\")})\\\n",
							"    .whenNotMatchedInsert(values = { \"id\": col(\"newData.id\") })\\\n",
							"    .execute()\n",
							"\n",
							"delta_table.toDF().show(100)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"source": [
							"## History\n",
							"Delta's most powerful feature is the ability to allow looking into history i.e., the changes that were made to the underlying Delta Table. The cell below shows how simple it is to inspect the history."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"delta_table.history().show(20, 1000, False)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read older versions of data using Time Travel\n",
							"\n",
							"You can query previous snapshots of your Delta Lake table by using a feature called Time Travel. If you want to access the data that you overwrote, you can query a snapshot of the table before you overwrote the first set of data using the versionAsOf option.\n",
							"\n",
							"Once you run the cell below, you should see the first set of data, from before you overwrote it. Time Travel is an extremely powerful feature that takes advantage of the power of the Delta Lake transaction log to access data that is no longer in the table. Removing the version 0 option (or specifying version 1) would let you see the newer data again. For more information, see [Query an older snapshot of a table (time travel)](https://docs.delta.io/latest/delta-batch.html#deltatimetravel)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.format(\"delta\").option(\"versionAsOf\", 0).load(delta_table_path)\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write a stream of data to a table\n",
							"\n",
							"You can also write to a Delta Lake table using Spark's Structured Streaming. The Delta Lake transaction log guarantees exactly-once processing, even when there are other streams or batch queries running concurrently against the table. By default, streams run in append mode, which adds new records to the table.\n",
							"\n",
							"For more information about Delta Lake integration with Structured Streaming, see [Table Streaming Reads and Writes](https://docs.delta.io/latest/delta-streaming.html).\n",
							"\n",
							"In the cells below, here's what we are doing:\n",
							"\n",
							"1. *Cell 28* Setup a simple Spark Structured Streaming job to generate a sequence and make the job write into our Delta Table\n",
							"2. *Cell 30* Show the newly appended data\n",
							"3. *Cell 31* Inspect history\n",
							"4. *Cell 32* Stop the structured streaming job\n",
							"5. *Cell 33* Inspect history <-- You'll notice appends have stopped"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"streaming_df = spark.readStream.format(\"rate\").load()\n",
							"stream = streaming_df\\\n",
							"    .selectExpr(\"value as id\")\\\n",
							"    .writeStream\\\n",
							"    .format(\"delta\")\\\n",
							"    .option(\"checkpointLocation\", \"/tmp/checkpoint-{0}\".format(session_id))\\\n",
							"    .start(delta_table_path)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read a stream of changes from a table\n",
							"\n",
							"While the stream is writing to the Delta Lake table, you can also read from that table as streaming source. For example, you can start another streaming query that prints all the changes made to the Delta Lake table."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"delta_table.toDF().sort(col(\"id\").desc()).show(100)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"source": [
							"delta_table.history().drop(\"userId\", \"userName\", \"job\", \"notebook\", \"clusterId\", \"isolationLevel\", \"isBlindAppend\").show(20, 1000, False)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"source": [
							"stream.stop()"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"source": [
							"delta_table.history().drop(\"userId\", \"userName\", \"job\", \"notebook\", \"clusterId\", \"isolationLevel\", \"isBlindAppend\").show(100, 1000, False)"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Compaction\n",
							"\n",
							"If a Delta Table is growing too large, you can compact it by repartitioning into a smaller number of files.\n",
							"\n",
							"The option `dataChange = false` is an optimization that tells Delta Lake to do the repartition without marking the underlying data as \"modified\". This ensures that any other concurrent operations (such as streaming reads/writes) aren't negatively impacted.\n"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"partition_count = 2\n",
							"\n",
							"spark.read\\\n",
							"    .format(\"delta\")\\\n",
							"    .load(delta_table_path)\\\n",
							"    .repartition(partition_count)\\\n",
							"    .write.option(\"dataChange\", \"false\")\\\n",
							"    .format(\"delta\")\\\n",
							"    .mode(\"overwrite\")\\\n",
							"    .save(delta_table_path)    "
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Convert Parquet to Delta\n",
							"You can do an in-place conversion from the Parquet format to Delta."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"parquet_path = \"/parquet/parquet-table-{0}\".format(session_id)\n",
							"\n",
							"data = spark.range(0,5)\n",
							"data.write.parquet(parquet_path)\n",
							"\n",
							"# Confirm that the data isn't in the Delta format\n",
							"DeltaTable.isDeltaTable(spark, parquet_path)"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"source": [
							"DeltaTable.convertToDelta(spark, \"parquet.`{0}`\".format(parquet_path))\n",
							"\n",
							"# Confirm that the converted data is now in the Delta format\n",
							"DeltaTable.isDeltaTable(spark, parquet_path)"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "markdown",
						"source": [
							"## SQL Support\n",
							"Delta supports table utility commands through SQL.  You can use SQL to:\n",
							"* Get a DeltaTable's history\n",
							"* Vacuum a DeltaTable\n",
							"* Convert a Parquet file to Delta\n"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DESCRIBE HISTORY delta.`{0}`\".format(delta_table_path)).show()"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"VACUUM delta.`{0}`\".format(delta_table_path)).show()"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"source": [
							"parquet_id = random.randint(0,1000)\n",
							"parquet_path = \"/parquet/parquet-table-{0}-{1}\".format(session_id, parquet_path)\n",
							"\n",
							"data = spark.range(0,5)\n",
							"data.write.parquet(parquet_path)\n",
							"\n",
							"# Confirm that the data isn't in the Delta format\n",
							"DeltaTable.isDeltaTable(spark, parquet_path)\n",
							"\n",
							"# Use SQL to convert the parquet table to Delta\n",
							"spark.sql(\"CONVERT TO DELTA parquet.`{0}`\".format(parquet_path))\n",
							"\n",
							"DeltaTable.isDeltaTable(spark, parquet_path)"
						],
						"outputs": [],
						"execution_count": 26
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03 - Data Exploration and ML Modeling using NYC Taxi dataset')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"metadata": {
					"save_output": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Predict NYC Taxi Tips using Spark ML and Azure Open Datasets\n",
							"\n",
							"The notebook ingests, visualizes, prepares and then trains a model based on an Open Dataset that tracks NYC Yellow Taxi trips and various attributes around them.\n",
							"The goal is to predict for a given trip whether there will be a tip or not.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import matplotlib.pyplot as plt\n",
							"\n",
							"from pyspark.sql.functions import unix_timestamp\n",
							"\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"from pyspark.ml import Pipeline\n",
							"from pyspark.ml import PipelineModel\n",
							"from pyspark.ml.feature import RFormula\n",
							"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\n",
							"from pyspark.ml.classification import LogisticRegression\n",
							"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
							"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Ingest Data?? \n",
							"\n",
							"Get a sample data of nyc yellow taxi to make it faster/easier to evaluate different approaches to prep for the modelling phase later in the notebook."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Import NYC yellow cab data from Azure Open Datasets\n",
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\n",
							"\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"#To make development easier, faster and less expensive downsample for now\n",
							"sampled_taxi_df = nyc_tlc_df.sample(True, 0.001, seed=1234)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploratory Data Analysis\n",
							"\n",
							"Look at the data and evaluate its suitability for use in a model, do this via some basic charts focussed on tip values and relationships."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"#The charting package needs a Pandas dataframe or numpy array do the conversion\n",
							"sampled_taxi_pd_df = sampled_taxi_df.toPandas()\n",
							"\n",
							"# Look at tips by amount count histogram\n",
							"ax1 = sampled_taxi_pd_df['tipAmount'].plot(kind='hist', bins=25, facecolor='lightblue')\n",
							"ax1.set_title('Tip amount distribution')\n",
							"ax1.set_xlabel('Tip Amount ($)')\n",
							"ax1.set_ylabel('Counts')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# How many passengers tip'd by various amounts\n",
							"ax2 = sampled_taxi_pd_df.boxplot(column=['tipAmount'], by=['passengerCount'])\n",
							"ax2.set_title('Tip amount by Passenger count')\n",
							"ax2.set_xlabel('Passenger count') \n",
							"ax2.set_ylabel('Tip Amount ($)')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# Look at the relationship between fare and tip amounts\n",
							"ax = sampled_taxi_pd_df.plot(kind='scatter', x= 'fareAmount', y = 'tipAmount', c='blue', alpha = 0.10, s=2.5*(sampled_taxi_pd_df['passengerCount']))\n",
							"ax.set_title('Tip amount by Fare amount')\n",
							"ax.set_xlabel('Fare Amount ($)')\n",
							"ax.set_ylabel('Tip Amount ($)')\n",
							"plt.axis([-2, 80, -2, 20])\n",
							"plt.suptitle('')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Prep and Featurization\n",
							"\n",
							"It's clear from the visualizations above that there are a bunch of outliers in the data. These will need to be filtered out in addition there are extra variables that are not going to be useful in the model we build at the end.\n",
							"\n",
							"Finally there is a need to create some new (derived) variables that will work better with the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\n",
							"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\n",
							"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\n",
							"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\n",
							"                                )\\\n",
							"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\n",
							"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\n",
							"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\n",
							"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\n",
							"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\n",
							"                                & (sampled_taxi_df.rateCodeId <= 5)\n",
							"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\n",
							"                                )"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Prep and Featurization Part 2\n",
							"\n",
							"Having created new variables its now possible to drop the columns they were derived from so that the dataframe that goes into the model is the smallest in terms of number of variables, that is required.\n",
							"\n",
							"Also create some more features based on new columns from the first round.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\n",
							"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\n",
							"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\n",
							"                                                .otherwise(0).alias('trafficTimeBins')\n",
							"                                              )\\\n",
							"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Encoding\n",
							"\n",
							"Different ML algorithms support different types of input, for this example Logistic Regression is being used for Binary Classification. This means that any Categorical (string) variables must be converted to numbers.\n",
							"\n",
							"The process is not as simple as a \"map\" style function as the relationship between the numbers can introduce a bias in the resulting model, the approach is to index the variable and then encode using a std approach called One Hot Encoding.\n",
							"\n",
							"This approach requires the encoder to \"learn\"/fit a model over the data in the Spark instance and then transform based on what was learnt.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# The sample uses an algorithm that only works with numeric features convert them so they can be consumed\n",
							"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\"); \n",
							"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\");\n",
							"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\"); \n",
							"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\");\n",
							"\n",
							"# Create a new dataframe that has had the encodings applied\n",
							"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Generation of Testing and Training Data Sets\n",
							"Simple split, 70% for training and 30% for testing the model. Playing with this ratio may result in different models.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Decide on the split between training and testing data from the dataframe \n",
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 1234\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train the Model\n",
							"\n",
							"Train the Logistic Regression model and then evaluate it using Area under ROC as the metric."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"## Create a new LR object for the model\n",
							"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\n",
							"\n",
							"## The formula for the model\n",
							"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\n",
							"\n",
							"## Undertake training and create an LR model\n",
							"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\n",
							"\n",
							"## Saving the model is optional but its another for of inter session cache\n",
							"datestamp = datetime.now().strftime('%m-%d-%Y-%s');\n",
							"fileName = \"lrModel_\" + datestamp;\n",
							"logRegDirfilename = fileName;\n",
							"lrModel.save(logRegDirfilename)\n",
							"\n",
							"## Predict tip 1/0 (yes/no) on the test dataset, evaluation using AUROC\n",
							"predictions = lrModel.transform(test_data_df)\n",
							"predictionAndLabels = predictions.select(\"prediction\", \"label\").rdd\n",
							"metrics = BinaryClassificationMetrics(predictionAndLabels)\n",
							"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Evaluate and Visualize\n",
							"\n",
							"Plot the actual curve to develop a better understanding of the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"## Plot the ROC curve, no need for pandas as this uses the modelSummary object\n",
							"modelSummary = lrModel.stages[-1].summary\n",
							"\n",
							"plt.plot([0, 1], [0, 1], 'r--')\n",
							"plt.plot(modelSummary.roc.select('FPR').collect(),\n",
							"         modelSummary.roc.select('TPR').collect())\n",
							"plt.xlabel('False Positive Rate')\n",
							"plt.ylabel('True Positive Rate')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04 - Getting Started with Hyperspace Indexing')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"metadata": {
					"save_output": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Hitchhiker's Guide to Hyperspace (Python)\n",
							"## An Indexing Subsystem for Apache Spark???\n",
							"\n",
							"<img src=\"https://raw.githubusercontent.com/rapoth/hyperspace/master/docs/assets/images/hyperspace-small-banner.png\" alt=\"Hyperspace Indexing Sub-System Logo\" width=\"1000\"/>\n",
							"\n",
							"[Hyperspace](https://github.com/microsoft/hyperspace) introduces the ability for Apache Spark??? users to create indexes on their datasets (e.g., CSV, JSON, Parquet etc.) and leverage them for potential query and workload acceleration.\n",
							"\n",
							"In this notebook, we highlight the basics of Hyperspace, emphasizing on its simplicity and show how it can be used by just anyone.\n",
							"\n",
							"**Disclaimer**: Hyperspace helps accelerate your workloads/queries under two circumstances:\n",
							"\n",
							"  1. Queries contain filters on predicates with high selectivity (e.g., you want to select 100 matching rows from a million candidate rows)\n",
							"  2. Queries contain a join that requires heavy-shuffles (e.g., you want to join a 100 GB dataset with a 10 GB dataset)\n",
							"\n",
							"You may want to carefully monitor your workloads and determine whether indexing is helping you on a case-by-case basis."
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Setup\n",
							"To begin with, let's start a new Spark??? session. Since this notebook is a tutorial merely to illustrate what Hyperspace can offer, we will make a configuration change that allow us to highlight what Hyperspace is doing on small datasets. By default, Spark??? uses *broadcast join* to optimize join queries when the data size for one side of join is small (which is the case for the sample data we use in this tutorial). Therefore, we disable broadcast joins so that later when we run join queries, Spark??? uses *sort-merge* join. This is mainly to show how Hyperspace indexes would be used at scale for accelerating join queries.\n",
							"\n",
							"The output of running the cell below shows a reference to the successfully created Spark??? session and prints out '-1' as the value for the modified join config which indicates that broadcast join is successfully disabled."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import random\n",
							"\n",
							"session_id = random.randint(0,1000000)\n",
							"data_path = \"/hyperspace/data-{0}\".format(session_id)\n",
							"index_location = \"/hyperspace/indexes-{0}\".format(session_id)\n",
							"\n",
							"# Please note that you DO NOT need to change this configuration in production.\n",
							"# We store all indexes in the system folder within Synapse.\n",
							"spark.conf.set(\"spark.hyperspace.system.path\", index_location)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# Start your Spark session\n",
							"spark\n",
							"\n",
							"# Disable BroadcastHashJoin, so Spark will use standard SortMergeJoin. Currently Hyperspace indexes utilize SortMergeJoin to speed up query.\n",
							"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\n",
							"\n",
							"# Verify that BroadcastHashJoin is set correctly \n",
							"print(spark.conf.get(\"spark.sql.autoBroadcastJoinThreshold\"))\n",
							"spark.conf.set(\"spark.hyperspace.explain.displayMode\", \"html\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Preparation\n",
							"\n",
							"To prepare our environment, we will create sample data records and save them as parquet data files. While we use Parquet for illustration, you can use other formats such as CSV. In the subsequent cells, we will also demonstrate how you can create several Hyperspace indexes on this sample dataset and how one can make Spark??? use them when running queries. \n",
							"\n",
							"Our example records correspond to two datasets: *department* and *employee*. You should configure \"empLocation\" and \"deptLocation\" paths so that on the storage account they point to your desired location to save generated data files. \n",
							"\n",
							"The output of running below cell shows contents of our datasets as lists of triplets followed by references to dataFrames created to save the content of each dataset in our preferred location."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.types import StructField, StructType, StringType, IntegerType\n",
							"\n",
							"# Sample department records\n",
							"departments = [(10, \"Accounting\", \"New York\"), (20, \"Research\", \"Dallas\"), (30, \"Sales\", \"Chicago\"), (40, \"Operations\", \"Boston\")]\n",
							"\n",
							"# Sample employee records\n",
							"employees = [(7369, \"SMITH\", 20), (7499, \"ALLEN\", 30), (7521, \"WARD\", 30), (7566, \"JONES\", 20), (7698, \"BLAKE\", 30)]\n",
							"\n",
							"# Create a schema for the dataframe\n",
							"dept_schema = StructType([StructField('deptId', IntegerType(), True), StructField('deptName', StringType(), True), StructField('location', StringType(), True)])\n",
							"emp_schema = StructType([StructField('empId', IntegerType(), True), StructField('empName', StringType(), True), StructField('deptId', IntegerType(), True)])\n",
							"\n",
							"departments_df = spark.createDataFrame(departments, dept_schema)\n",
							"employees_df = spark.createDataFrame(employees, emp_schema)\n",
							"\n",
							"emp_Location = data_path + \"/employees.parquet\"\n",
							"dept_Location = data_path + \"/departments.parquet\"\n",
							"\n",
							"employees_df.write.mode(\"overwrite\").parquet(emp_Location)\n",
							"departments_df.write.mode(\"overwrite\").parquet(dept_Location)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"Let's verify the contents of parquet files we created above to make sure they contain expected records in correct format. We later use these data files to create Hyperspace indexes and run sample queries.\n",
							"\n",
							"Running below cell, the output displays the rows in employee and department dataframes in a tabular form. There should be 14 employees and 4 departments, each matching with one of triplets we created in the previous cell."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# emp_Location and dept_Location are the user defined locations above to save parquet files\n",
							"emp_DF = spark.read.parquet(emp_Location)\n",
							"dept_DF = spark.read.parquet(dept_Location)\n",
							"\n",
							"# Verify the data is available and correct\n",
							"emp_DF.show()\n",
							"dept_DF.show()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Hello Hyperspace Index!\n",
							"Hyperspace lets users create indexes on records scanned from persisted data files. Once successfully created, an entry corresponding to the index is added to the Hyperspace's metadata. This metadata is later used by Apache Spark???'s Hyperspace-enabled optimizer during query processing to find and use proper indexes. \n",
							"\n",
							"Once indexes are created, users can perform several actions:\n",
							"  - **Refresh** If the underlying data changes, users can refresh an existing index to capture that. \n",
							"  - **Delete** If the index is not needed, users can perform a soft-delete i.e., index is not physically deleted but is marked as 'deleted' so it is no longer used in your workloads.\n",
							"  - **Vacuum** If an index is no longer required, users can vacuum it which forces a physical deletion of the index contents and associated metadata completely from Hyperspace's metadata.\n",
							"\n",
							"Below sections show how such index management operations can be done in Hyperspace.\n",
							"\n",
							"First, we need to import the required libraries and create an instance of Hyperspace. We later use this instance to invoke different Hyperspace APIs to create indexes on our sample data and modify those indexes.\n",
							"\n",
							"Output of running below cell shows a reference to the created instance of Hyperspace."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from hyperspace import *\n",
							"\n",
							"# Create an instance of Hyperspace\n",
							"hyperspace = Hyperspace(spark)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Create Indexes\n",
							"To create a Hyperspace index, the user needs to provide 2 pieces of information:\n",
							"* An Apache Spark??? DataFrame which references the data to be indexed.\n",
							"* An index configuration object: IndexConfig, which specifies the *index name*, *indexed* and *included* columns of the index. \n",
							"\n",
							"As you might have noticed, in this notebook, we illustrate indexing using the [Covering Index](https://www.red-gate.com/simple-talk/sql/learn-sql-server/using-covering-indexes-to-improve-query-performance/), which are the default index in Hyperspace. In the future, we plan on adding support for other index types. \n",
							"\n",
							"We start by creating three Hyperspace indexes on our sample data: two indexes on the department dataset named \"deptIndex1\" and \"deptIndex2\", and one index on the employee dataset named 'empIndex'. \n",
							"For each index, we need a corresponding IndexConfig to capture the name along with columns lists for the indexed and included columns. Running below cell creates these indexConfigs and its output lists them.\n",
							"\n",
							"**Note**: An *index column* is a column that appears in your filters or join conditions. An *included column* is a column that appears in your select/project.\n",
							"\n",
							"For instance, in the following query:\n",
							"```sql\n",
							"SELECT X\n",
							"FROM Table\n",
							"WHERE Y = 2\n",
							"```\n",
							"X can be an *index column* and Y can be an *included column*."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Create index configurations\n",
							"\n",
							"emp_IndexConfig = IndexConfig(\"empIndex1\", [\"deptId\"], [\"empName\"])\n",
							"dept_IndexConfig1 = IndexConfig(\"deptIndex1\", [\"deptId\"], [\"deptName\"])\n",
							"dept_IndexConfig2 = IndexConfig(\"deptIndex2\", [\"location\"], [\"deptName\"])"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now, we create three indexes using our index configurations. For this purpose, we invoke \"createIndex\" command on our Hyperspace instance. This command requires an index configuration and the dataFrame containing rows to be indexed.\n",
							"Running below cell creates three indexes.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Create indexes from configurations\n",
							"\n",
							"hyperspace.createIndex(emp_DF, emp_IndexConfig)\n",
							"hyperspace.createIndex(dept_DF, dept_IndexConfig1)\n",
							"hyperspace.createIndex(dept_DF, dept_IndexConfig2)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"### List Indexes\n",
							"\n",
							"Below code shows how a user can list all available indexes in a Hyperspace instance. It uses the `indexes` API which returns information about existing indexes as a Spark???'s DataFrame so you can perform additional operations. For instance, you can invoke valid operations on this DataFrame for checking its content or analyzing it further (for example filtering specific indexes or grouping them according to some desired property). \n",
							"\n",
							"Below cell uses DataFrame's `show` action to fully print the rows and show details of our indexes in a tabular form. For each index, we can see all the information Hyperspace has stored about it in its metadata. \n",
							"\n",
							"You will immediately notice the following:\n",
							"  - `config.indexName`, `config.indexedColumns`, `config.includedColumns` are the fields that a user normally provides during index creation.\n",
							"  - `status.status` indicates if the index is being actively used by the Spark's optimizer.\n",
							"  - `dfSignature` is automatically generated by Hyperspace and is unique for each index. Hyperspace uses this signature internally to maintain the index and exploit it at query time. \n",
							"  \n",
							"In the output below, all three indexes should have \"ACTIVE\" as status and their name, indexed columns, and included columns should match with what we defined in index configurations above."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"hyperspace.indexes().show()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Delete Indexes\n",
							"A user can drop an existing index by using the `deleteIndex` API and providing the index name. \n",
							"\n",
							"Index deletion is a **soft-delete** operation i.e., only the index's status in the Hyperspace metadata from is changed from \"ACTIVE\" to \"DELETED\". This will exclude the deleted index from any future query optimization and Hyperspace no longer picks that index for any query. However, index files for a deleted index still remain available (since it is a soft-delete), so if you accidentally deleted the index, you could still restore it.\n",
							"\n",
							"The cell below deletes index with name \"deptIndex2\" and lists Hyperspace metadata after that. The output should be similar to above cell for \"List Indexes\" except for \"deptIndex2\" which now should have its status changed into \"DELETED\"."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"hyperspace.deleteIndex(\"deptIndex2\")\n",
							"\n",
							"hyperspace.indexes().show()"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Restore Indexes\n",
							"A user can use the `restoreIndex` API to restore a deleted index. This will bring back the latest version of index into ACTIVE status and makes it usable again for queries. \n",
							"\n",
							"The cell below shows an example of `restoreIndex` API. We delete \"deptIndex1\" and restore it. The output shows \"deptIndex1\" first went into the \"DELETED\" status after invoking \"deleteIndex\" command and came back to the \"ACTIVE\" status after calling \"restoreIndex\"."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"hyperspace.deleteIndex(\"deptIndex1\")\n",
							"\n",
							"hyperspace.indexes().show()\n",
							"\n",
							"hyperspace.restoreIndex(\"deptIndex1\")\n",
							"\n",
							"hyperspace.indexes().show()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Vacuum Indexes\n",
							"The user can perform a **hard-delete** i.e., fully remove files and the metadata entry for a deleted index using the `vacuumIndex` API. Once done, this action is **irreversible** as it physically deletes all the index files associated with the index.\n",
							"\n",
							"The cell below vacuums the \"deptIndex2\" index and shows Hyperspace metadata after vaccuming. You should see metadata entries for two indexes \"deptIndex1\" and \"empIndex\" both with \"ACTIVE\" status and no entry for \"deptIndex2\"."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"hyperspace.vacuumIndex(\"deptIndex2\")\n",
							"hyperspace.indexes().show()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Enable/Disable Hyperspace\n",
							"\n",
							"Hyperspace provides APIs to enable or disable index usage with Spark???.\n",
							"\n",
							"  - By using `enableHyperspace` API, Hyperspace optimization rules become visible to the Apache Spark??? optimizer and it will exploit existing Hyperspace indexes to optimize user queries.\n",
							"  - By using `disableHyperspace` command, Hyperspace rules no longer apply during query optimization. You should note that disabling Hyperspace has no impact on created indexes as they remain intact.\n",
							"\n",
							"Below cell shows how you can use these commands to enable or disable hyperspace. The output simply shows a reference to the existing Spark??? session whose configuration is updated."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Enable Hyperspace\n",
							"Hyperspace.enable(spark)\n",
							"\n",
							"# Disable Hyperspace\n",
							"Hyperspace.disable(spark)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Index Usage\n",
							"In order to make Spark use Hyperspace indexes during query processing, the user needs to make sure that Hyperspace is enabled. \n",
							"\n",
							"The cell below enables Hyperspace and creates two DataFrames containing our sample data records which we use for running example queries. For each DataFrame, a few sample rows are printed."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Enable Hyperspace\n",
							"Hyperspace.enable(spark)\n",
							"\n",
							"emp_DF = spark.read.parquet(emp_Location)\n",
							"dept_DF = spark.read.parquet(dept_Location)\n",
							"\n",
							"emp_DF.show(5)\n",
							"dept_DF.show(5)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"source": [
							"# Hyperspace's Index Types\n",
							"\n",
							"Currently, Hyperspace can exploit indexes for two groups of queries: \n",
							"* Selection queries with lookup or range selection filtering predicates.\n",
							"* Join queries with an equality join predicate (i.e. Equi-joins)."
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Indexes for Accelerating Filters\n",
							"\n",
							"Our first example query does a lookup on department records (see below cell). In SQL, this query looks as follows:\n",
							"\n",
							"```sql\n",
							"SELECT deptName \n",
							"FROM departments\n",
							"WHERE deptId = 20\n",
							"```\n",
							"\n",
							"The output of running the cell below shows: \n",
							"- query result, which is a single department name.\n",
							"- query plan that Spark??? used to run the query. \n",
							"\n",
							"In the query plan, the \"FileScan\" operator at the bottom of the plan shows the datasource where the records were read from. The location of this file indicates the path to the latest version of the \"deptIndex1\" index. This shows  that according to the query and using Hyperspace optimization rules, Spark??? decided to exploit the proper index at runtime.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Filter with equality predicate\n",
							"\n",
							"eqFilter = dept_DF.filter(\"\"\"deptId = 20\"\"\").select(\"\"\"deptName\"\"\")\n",
							"eqFilter.show()\n",
							"\n",
							"hyperspace.explain(eqFilter, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"source": [
							"Our second example is a range selection query on department records. In SQL, this query looks as follows:\n",
							"\n",
							"```sql\n",
							"SELECT deptName \n",
							"FROM departments\n",
							"WHERE deptId > 20\n",
							"```\n",
							"Similar to our first example, the output of the cell below shows the query results (names of two departments) and the query plan. The location of data file in the FileScan operator shows that 'deptIndex1\" was used to run the query.   \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Filter with range selection predicate\n",
							"\n",
							"rangeFilter = dept_DF.filter(\"\"\"deptId > 20\"\"\").select(\"deptName\")\n",
							"rangeFilter.show()\n",
							"\n",
							"hyperspace.explain(rangeFilter, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"Our third example is a query joining department and employee records on the department id. The equivalent SQL statement is shown below:\n",
							"\n",
							"```sql\n",
							"SELECT employees.deptId, empName, departments.deptId, deptName\n",
							"FROM   employees, departments \n",
							"WHERE  employees.deptId = departments.deptId\n",
							"```\n",
							"\n",
							"The output of running the cell below shows the query results which are the names of 14 employees and the name of department each employee works in. The query plan is also included in the output. Notice how the file locations for two FileScan operators shows that Spark used \"empIndex\" and \"deptIndex1\" indexes to run the query.   \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Join\n",
							"\n",
							"eqJoin = emp_DF.join(dept_DF, emp_DF.deptId == dept_DF.deptId).select(emp_DF.empName, dept_DF.deptName)\n",
							"\n",
							"eqJoin.show()\n",
							"\n",
							"hyperspace.explain(eqJoin, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Support for SQL Semantics\n",
							"\n",
							"The index usage is transparent to whether the user uses DataFrame API or Spark??? SQL. The following example shows the same join example as before but using Spark SQL, showing the use of indexes if applicable."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\n",
							"\n",
							"emp_DF.createOrReplaceTempView(\"EMP\")\n",
							"dept_DF.createOrReplaceTempView(\"DEPT\")\n",
							"\n",
							"joinQuery = spark.sql(\"SELECT EMP.empName, DEPT.deptName FROM EMP, DEPT WHERE EMP.deptId = DEPT.deptId\")\n",
							"\n",
							"joinQuery.show()\n",
							"hyperspace.explain(joinQuery, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Explain API\n",
							"\n",
							"So far, you might have observed we have been using the explain API provided by Hyperspace. The `explain` API from Hyperspace is very similar to Spark's `df.explain` API but allows users to compare their original plan vs the updated index-dependent plan before running their query. You have an option to choose from html/plaintext/console mode to display the command output. \n",
							"\n",
							"The following cell shows an example with HTML. The highlighted section represents the difference between original and updated plans along with the indexes being used."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"eqJoin = emp_DF.join(dept_DF, emp_DF.deptId == dept_DF.deptId).select(emp_DF.empName, dept_DF.deptName)\n",
							"\n",
							"spark.conf.set(\"spark.hyperspace.explain.displayMode\", \"html\")\n",
							"hyperspace.explain(eqJoin, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Refresh Indexes\n",
							"If the original data on which an index was created changes, then the index will no longer capture the latest state of data and hence will not be used by Hyperspace to provide any acceleration. The user can refresh such a stale index using the `refreshIndex` API. This causes the index to be fully rebuilt and updates it according to the latest data records.\n",
							"    \n",
							"    Spoiler alert: if you are worried about fully rebuilding your index every time your data changes, don't worry! We will show you how to *incrementally refresh* your index in subsequent cells below.\n",
							"\n",
							"The two cells below show an example for this scenario:\n",
							"- First cell adds two more departments to the original departments data. It reads and prints list of departments to verify new departments are added correctly. The output shows 6 departments in total: four old ones and two new. Invoking \"refreshIndex\" updates \"deptIndex1\" so index captures new departments.\n",
							"- Second cell runs our range selection query example. The results should now contain four departments: two are the ones, seen before when we ran the query above, and two are the new departments we just added."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"extra_Departments = [(50, \"Inovation\", \"Seattle\"), (60, \"Human Resources\", \"San Francisco\")]\n",
							"\n",
							"extra_departments_df = spark.createDataFrame(extra_Departments, dept_schema)\n",
							"extra_departments_df.write.mode(\"Append\").parquet(dept_Location)\n",
							"\n",
							"\n",
							"dept_DFrame_Updated = spark.read.parquet(dept_Location)\n",
							"\n",
							"dept_DFrame_Updated.show(10)\n",
							"\n",
							"hyperspace.refreshIndex(\"deptIndex1\")"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"source": [
							"newRangeFilter = dept_DFrame_Updated.filter(\"deptId > 20\").select(\"deptName\")\n",
							"newRangeFilter.show()\n",
							"\n",
							"hyperspace.explain(newRangeFilter, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"source": [
							"hyperspace.indexes().show()"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"source": [
							"# Clean-up the remaining indexes\n",
							"hyperspace.deleteIndex(\"empIndex1\")\n",
							"hyperspace.deleteIndex(\"deptIndex1\")\n",
							"\n",
							"hyperspace.vacuumIndex(\"empIndex1\")\n",
							"hyperspace.vacuumIndex(\"deptIndex1\")"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Hybrid Scan for Mutable Datasets\n",
							"\n",
							"Often times, if your underlying source data had some new files appended or existing files deleted, your index will get stale and Hyperspace decides not to use it. However, there are times where you just want to use the index without having to refresh it everytime. There could be multiple reasons for doing so:\n",
							"\n",
							"  1. You do not want to continuosly refresh your index but instead want to do it periodically since you understand your workloads the best.  \n",
							"  2. You added/removed only a few files and do not want to wait for yet another refresh job to finish. \n",
							"\n",
							"To allow you to still use a stale index, Hyperspace introduces **Hybrid Scan**, a novel technique that allows users to utilize outdated or stale indexes (e.g., the underlying source data had some new files appended or existing files deleted), without refreshing indexes. \n",
							"\n",
							"To achieve this, when you set the appropriate configuration to enable Hybrid Scan, Hyperspace modifies the query plan to leverage the changes as following:\n",
							"- Appended files can be merged to index data by using **`Union` or `BucketUnion` (for join)**. Shuffling appended data can also be applied before merging, if needed.\n",
							"- Deleted files can be handled by injecting `Filter-NOT-IN` condition on **lineage column** of index data, so that the indexed rows from the deleted files can be excluded at query time. \n",
							"\n",
							"You can check the transformation of the query plan in below examples.\n",
							"\n",
							"    Note: Hybrid scan is only supported for non-partitioned data. Support for partitioned data is currently being worked upon."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Hybrid Scan for appended files - non-partitioned data\n",
							"\n",
							"Non-partitioned data is used in below example. In this example, we expect Join index can be used for the query and `BucketUnion` is introduced for appended files."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# GENERATE TEST DATA\n",
							"\n",
							"testdata = [\n",
							"    (\"orange\", 3, \"2020-10-01\"),\n",
							"    (\"banana\", 1, \"2020-10-01\"),\n",
							"    (\"carrot\", 5, \"2020-10-02\"),\n",
							"    (\"beetroot\", 12, \"2020-10-02\"),\n",
							"    (\"orange\", 2, \"2020-10-03\"),\n",
							"    (\"banana\", 11, \"2020-10-03\"),\n",
							"    (\"carrot\", 3, \"2020-10-03\"),\n",
							"    (\"beetroot\", 2, \"2020-10-04\"),\n",
							"    (\"cucumber\", 7, \"2020-10-05\"),\n",
							"    (\"pepper\", 20, \"2020-10-06\")\n",
							"]\n",
							"\n",
							"testdata_location = data_path + \"/productTable\"\n",
							"from pyspark.sql.types import StructField, StructType, StringType, IntegerType\n",
							"testdata_schema = StructType([\n",
							"    StructField('name', StringType(), True),\n",
							"    StructField('qty', IntegerType(), True),\n",
							"    StructField('date', StringType(), True)])\n",
							"\n",
							"test_df = spark.createDataFrame(testdata, testdata_schema)\n",
							"test_df.write.mode(\"overwrite\").parquet(testdata_location)\n",
							"test_df = spark.read.parquet(testdata_location)"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# CREATE INDEX\n",
							"hyperspace.createIndex(test_df, IndexConfig(\"productIndex2\", [\"name\"], [\"date\", \"qty\"]))\n",
							"\n",
							"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\n",
							"filter1 = test_df.filter(\"name = 'banana'\")\n",
							"filter2 = test_df.filter(\"qty > 10\")\n",
							"query = filter1.join(filter2, \"name\")\n",
							"\n",
							"# Check Join index rule is applied properly.\n",
							"hyperspace.explain(query, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Append new files.\r\n",
							"append_data = [\r\n",
							"    (\"orange\", 13, \"2020-11-01\"),\r\n",
							"    (\"banana\", 5, \"2020-11-01\")\r\n",
							"]\r\n",
							"append_df = spark.createDataFrame(append_data, testdata_schema)\r\n",
							"append_df.write.mode(\"append\").parquet(testdata_location)"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "markdown",
						"source": [
							"Hybrid scan is disabled by default. Therefore, you will see that since we appended new data, Hyperspace will decide NOT to use the index.\n",
							"\n",
							"In the output, you will see no plan differences (hence no highlighting)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Hybrid Scan configs are false by default.\n",
							"spark.conf.set(\"spark.hyperspace.index.hybridscan.enabled\", \"false\")\n",
							"spark.conf.set(\"spark.hyperspace.index.hybridscan.delete.enabled\", \"false\")\n",
							"\n",
							"test_df_with_append = spark.read.parquet(testdata_location)\n",
							"filter1 = test_df_with_append.filter(\"name = 'banana'\")\n",
							"filter2 = test_df_with_append.filter(\"qty > 10\")\n",
							"query = filter1.join(filter2, \"name\")\n",
							"hyperspace.explain(query, True, displayHTML)\n",
							"query.show()"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Enable Hybrid Scan\r\n",
							"\r\n",
							"In plan with indexes, you can see\r\n",
							"`Exchange hashpartitioning` required only for appended files so that we could still utilize the \"shuffled\" index data with appended files. `BucketUnion` is used to merge \"shuffled\" appended files with the index data."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Enable Hybrid Scan config. \"delete\" config is not necessary.\n",
							"spark.conf.set(\"spark.hyperspace.index.hybridscan.enabled\", \"true\")\n",
							"# spark.conf.set(\"spark.hyperspace.index.hybridscan.delete.enabled\", \"true\")\n",
							"\n",
							"# Need to redefine query to recalculate the query plan.\n",
							"query = filter1.join(filter2, \"name\")\n",
							"hyperspace.explain(query, True, displayHTML)\n",
							"query.show()"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Incremental Index Refresh\n",
							"When you ready to update your indexes but do not want to rebuild your entire index, Hyperspace supports updating indexes in an incremental manner using `hs.refreshIndex(\"name\", \"incremental\")` API. This will allow eliminate the need for a full rebuild of index from scratch, utilizing previously created index files as well as updating indexes on only the newly added data.\n",
							"\n",
							"Of course, please be sure to use the complementary `optimizeIndex` API (shown below) periodically to make sure you do not see performance regressions. We recommend calling `optimize` at least once for every 10 times you call `refreshIndex(..., \"incremental\")`, assuming the data you added/removed is < 10% of the original dataset. For instance, if your original dataset is 100 GB, and you've added/removed data in increments/decrements of 1 GB, you can call `refreshIndex` 10 times before calling `optimizeIndex`. Please note that this example is simply used for illustration and you have to adapt this for your workloads.\n",
							"\n",
							"In the example below, notice the addition of a `Sort` node in the query plan when indexes are used. This is because partial indexes are created on the appended data files, causing Spark to introduce a `Sort`. Please also note that `Shuffle` i.e. `Exchange` is still eliminated from the plan, giving you the appropriate acceleration."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"def query():\n",
							"    test_df_with_append = spark.read.parquet(testdata_location)\n",
							"    filter1 = test_df_with_append.filter(\"name = 'banana'\")\n",
							"    filter2 = test_df_with_append.filter(\"qty > 10\")\n",
							"    return filter1.join(filter2, \"name\")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"source": [
							"hyperspace.refreshIndex(\"productIndex2\", \"incremental\")\n",
							"\n",
							"hyperspace.explain(query(), True, displayHTML)\n",
							"query().show()"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Optimize Index layout\n",
							"After calling incremental refreshes multiple times on newly appended data (e.g. if the user writes to data in small batches or in case of streaming scenarios), the number of index files tend to become large affecting the performance of the index (large number of small files problem). Hyperspace provides `hyperspace.optimizeIndex(\"indexName\")` API to optimize the index layout and reduce the large files problem.\n",
							"\n",
							"In the plan below, notice that Hyperspace has removed the additional `Sort` node in the query plan. Optimize can help avoiding sorting for any index bucket which contains only one file. However, this will only be true if ALL the index buckets have at most 1 file per bucket, after `optimizeIndex`."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Append some more data and call refresh again.\n",
							"append_data = [\n",
							"    (\"orange\", 13, \"2020-11-01\"),\n",
							"    (\"banana\", 5, \"2020-11-01\")\n",
							"]\n",
							"append_df = spark.createDataFrame(append_data, testdata_schema)\n",
							"append_df.write.mode(\"append\").parquet(testdata_location)\n",
							"\n",
							"hyperspace.refreshIndex(\"productIndex2\", \"incremental\")"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"source": [
							"# Call optimize. Ensure that Sort is removed after optimization (This is possible here because after optimize, in this case, every bucket contains only 1 file.).\n",
							"hyperspace.optimizeIndex(\"productIndex2\")\n",
							"\n",
							"hyperspace.explain(query(), True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Optimize modes\n",
							"\n",
							"The default mode for optimization is \"quick\" mode where files smaller than a predefined threshold are picked for optmization. To maximize the effect of optimization, Hyperspace allows another optimize mode \"full\" as shown below. This mode picks ALL index files for optimization irrespective of their file size and creates the best possible layout of the index. This is also slower than the default optimize mode because more data is being processed here.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"hyperspace.optimizeIndex(\"productIndex2\", \"full\")\n",
							"\n",
							"hyperspace.explain(query(), True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Clean Up\n",
							"To make this notebook self-contained and not leave any dangling data, we have some small clean-up code below. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"mssparkutils.fs.rm(data_path, True)\n",
							"mssparkutils.fs.rm(index_location, True)"
						],
						"outputs": [],
						"execution_count": 33
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05 - Read and write data from Azure Data Lake Storage Gen2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"metadata": {
					"save_output": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Access data on Azure Data Lake Storage Gen2 (ADLS Gen2) with Synapse Spark\n",
							"\n",
							"Azure Data Lake Storage Gen2 (ADLS Gen2) is used as the storage account associated with a Synapse workspace. A synapse workspace can have a default ADLS Gen2 storage account and additional linked storage accounts. \n",
							"\n",
							"You can access data on ADLS Gen2 with Synapse Spark via following URL:\n",
							"    \n",
							"    abfss://<container_name>@<storage_account_name>.dfs.core.windows.net/<path>\n",
							"\n",
							"This notebook provides examples of how to read data from ADLS Gen2 account into a Spark context and how to write the output of Spark jobs directly into an ADLS Gen2 location.\n",
							"\n",
							"## Pre-requisites\n",
							"Synapse leverage AAD pass-through to access any ADLS Gen2 account (or folder) to which you have a **Blob Storage Contributor** permission. No credentials or access token is required. "
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Load a sample data\n",
							"\n",
							"Let's first load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) of last 6 months from Azure Open datasets as a sample."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.opendatasets import PublicHolidays\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"from dateutil.relativedelta import relativedelta\n",
							"\n",
							"\n",
							"end_date = datetime.today()\n",
							"start_date = datetime.today() - relativedelta(months=6)\n",
							"hol = PublicHolidays(start_date=start_date, end_date=end_date)\n",
							"hol_df = hol.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# Display 5 rows\n",
							"hol_df.show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write data to the default ADLS Gen2 storage\n",
							"\n",
							"We are going to write the spark dateframe to your default ADLS Gen2 storage account.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"\n",
							"# Primary storage info\n",
							"account_name = 'fill in your primary account name' # fill in your primary account name\n",
							"container_name = 'fill in your container name' # fill in your container name\n",
							"relative_path = 'fill in your relative folder path' # fill in your relative folder path\n",
							"\n",
							"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\n",
							"print('Primary storage account path: ' + adls_path)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Save a dataframe as Parquet, JSON or CSV\n",
							"If you have a dataframe, you can save it to Parquet or JSON with the .write.parquet(), .write.json() and .write.csv() methods respectively.\n",
							"\n",
							"Dataframes can be saved in any format, regardless of the input format.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"parquet_path = adls_path + 'holiday.parquet'\n",
							"json_path = adls_path + 'holiday.json'\n",
							"csv_path = adls_path + 'holiday.csv'\n",
							"print('parquet file path: ' + parquet_path)\n",
							"print('json file path??? ' + json_path)\n",
							"print('csv file path: ' + csv_path)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"hol_df.write.parquet(parquet_path, mode = 'overwrite')\n",
							"hol_df.write.json(json_path, mode = 'overwrite')\n",
							"hol_df.write.csv(csv_path, mode = 'overwrite', header = 'true')"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Save a dataframe as text files\n",
							"If you have a dataframe that you want ot save as text file, you must first covert it to an RDD and then save that RDD as a text file.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Define the text file path\n",
							"text_path = adls_path + 'holiday.txt'\n",
							"print('text file path: ' + text_path)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"# Covert spark dataframe into RDD \n",
							"hol_RDD = hol_df.rdd\n",
							"type(hol_RDD)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"source": [
							"If you have an RDD, you can convert it to a text file like the following:\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							" # Save RDD as text file\n",
							"hol_RDD.saveAsTextFile(text_path)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"source": [
							"# Read data from the default ADLS Gen2 storage\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Create a dataframe from parquet files\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_parquet = spark.read.parquet(parquet_path)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Create a dataframe from JSON files\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_json = spark.read.json(json_path)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Create a dataframe from CSV files\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_csv = spark.read.csv(csv_path, header = 'true')"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Create an RDD from text file\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"text = sc.textFile(text_path)"
						],
						"outputs": [],
						"execution_count": 17
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06 - Charting with Synapse Notebooks')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OpenDatasets"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"metadata": {
					"save_output": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Charting in Synapse Notebook\n",
							"\n",
							"Synapse has common used data visualization packages pre installed, such as **matplotlib**, **bokeh**, **seaborn**, **altair**, **plotly**. This notebook provides examples to do data visualization using charts in Synapse notebook. \n"
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Matplotlib\n"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Line charts\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							" \n",
							"x  = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
							"y1 = [1, 3, 5, 3, 1, 3, 5, 3, 1]\n",
							"y2 = [2, 4, 6, 4, 2, 4, 6, 4, 2]\n",
							"plt.plot(x, y1, label=\"line L\")\n",
							"plt.plot(x, y2, label=\"line H\")\n",
							"plt.plot()\n",
							"\n",
							"plt.xlabel(\"x axis\")\n",
							"plt.ylabel(\"y axis\")\n",
							"plt.title(\"Line Graph Example\")\n",
							"plt.legend()\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# Bar chart\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"\n",
							"# Look at index 4 and 6, which demonstrate overlapping cases.\n",
							"x1 = [1, 3, 4, 5, 6, 7, 9]\n",
							"y1 = [4, 7, 2, 4, 7, 8, 3]\n",
							"\n",
							"x2 = [2, 4, 6, 8, 10]\n",
							"y2 = [5, 6, 2, 6, 2]\n",
							"\n",
							"# Colors: https://matplotlib.org/api/colors_api.html\n",
							"\n",
							"plt.bar(x1, y1, label=\"Blue Bar\", color='b')\n",
							"plt.bar(x2, y2, label=\"Green Bar\", color='g')\n",
							"plt.plot()\n",
							"\n",
							"plt.xlabel(\"bar number\")\n",
							"plt.ylabel(\"bar height\")\n",
							"plt.title(\"Bar Chart Example\")\n",
							"plt.legend()\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# Histogram\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"import numpy as np\n",
							"\n",
							"# Use numpy to generate a bunch of random data in a bell curve around 5.\n",
							"n = 5 + np.random.randn(1000)\n",
							"\n",
							"m = [m for m in range(len(n))]\n",
							"plt.bar(m, n)\n",
							"plt.title(\"Raw Data\")\n",
							"plt.show()\n",
							"\n",
							"plt.hist(n, bins=20)\n",
							"plt.title(\"Histogram\")\n",
							"plt.show()\n",
							"\n",
							"plt.hist(n, cumulative=True, bins=20)\n",
							"plt.title(\"Cumulative Histogram\")\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# Scatter chart\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"\n",
							"x1 = [2, 3, 4]\n",
							"y1 = [5, 5, 5]\n",
							"\n",
							"x2 = [1, 2, 3, 4, 5]\n",
							"y2 = [2, 3, 2, 3, 4]\n",
							"y3 = [6, 8, 7, 8, 7]\n",
							"\n",
							"# Markers: https://matplotlib.org/api/markers_api.html\n",
							"\n",
							"plt.scatter(x1, y1)\n",
							"plt.scatter(x2, y2, marker='v', color='r')\n",
							"plt.scatter(x2, y3, marker='^', color='m')\n",
							"plt.title('Scatter Plot Example')\n",
							"plt.show()\n"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# Stack plots\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"\n",
							"idxes = [ 1,  2,  3,  4,  5,  6,  7,  8,  9]\n",
							"arr1  = [23, 40, 28, 43,  8, 44, 43, 18, 17]\n",
							"arr2  = [17, 30, 22, 14, 17, 17, 29, 22, 30]\n",
							"arr3  = [15, 31, 18, 22, 18, 19, 13, 32, 39]\n",
							"\n",
							"# Adding legend for stack plots is tricky.\n",
							"plt.plot([], [], color='r', label = 'D 1')\n",
							"plt.plot([], [], color='g', label = 'D 2')\n",
							"plt.plot([], [], color='b', label = 'D 3')\n",
							"\n",
							"plt.stackplot(idxes, arr1, arr2, arr3, colors= ['r', 'g', 'b'])\n",
							"plt.title('Stack Plot Example')\n",
							"plt.legend()\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# Pie charts\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"\n",
							"labels = 'S1', 'S2', 'S3'\n",
							"sections = [56, 66, 24]\n",
							"colors = ['c', 'g', 'y']\n",
							"\n",
							"plt.pie(sections, labels=labels, colors=colors,\n",
							"        startangle=90,\n",
							"        explode = (0, 0.1, 0),\n",
							"        autopct = '%1.2f%%')\n",
							"\n",
							"plt.axis('equal') # Try commenting this out.\n",
							"plt.title('Pie Chart Example')\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# fill_between and alpha\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"import numpy as np\n",
							"\n",
							"ys = 200 + np.random.randn(100)\n",
							"x = [x for x in range(len(ys))]\n",
							"\n",
							"plt.plot(x, ys, '-')\n",
							"plt.fill_between(x, ys, 195, where=(ys > 195), facecolor='g', alpha=0.6)\n",
							"\n",
							"plt.title(\"Fills and Alpha Example\")\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# Subplotting using Subplot2grid\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"import numpy as np\n",
							"\n",
							"def random_plots():\n",
							"  xs = []\n",
							"  ys = []\n",
							"  \n",
							"  for i in range(20):\n",
							"    x = i\n",
							"    y = np.random.randint(10)\n",
							"    \n",
							"    xs.append(x)\n",
							"    ys.append(y)\n",
							"  \n",
							"  return xs, ys\n",
							"\n",
							"fig = plt.figure()\n",
							"ax1 = plt.subplot2grid((5, 2), (0, 0), rowspan=1, colspan=2)\n",
							"ax2 = plt.subplot2grid((5, 2), (1, 0), rowspan=3, colspan=2)\n",
							"ax3 = plt.subplot2grid((5, 2), (4, 0), rowspan=1, colspan=1)\n",
							"ax4 = plt.subplot2grid((5, 2), (4, 1), rowspan=1, colspan=1)\n",
							"\n",
							"x, y = random_plots()\n",
							"ax1.plot(x, y)\n",
							"\n",
							"x, y = random_plots()\n",
							"ax2.plot(x, y)\n",
							"\n",
							"x, y = random_plots()\n",
							"ax3.plot(x, y)\n",
							"\n",
							"x, y = random_plots()\n",
							"ax4.plot(x, y)\n",
							"\n",
							"plt.tight_layout()\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# 3D Scatter Plots\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"import numpy as np\n",
							"from mpl_toolkits.mplot3d import axes3d\n",
							"\n",
							"fig = plt.figure()\n",
							"ax = fig.add_subplot(111, projection = '3d')\n",
							"\n",
							"x1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
							"y1 = np.random.randint(10, size=10)\n",
							"z1 = np.random.randint(10, size=10)\n",
							"\n",
							"x2 = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n",
							"y2 = np.random.randint(-10, 0, size=10)\n",
							"z2 = np.random.randint(10, size=10)\n",
							"\n",
							"ax.scatter(x1, y1, z1, c='b', marker='o', label='blue')\n",
							"ax.scatter(x2, y2, z2, c='g', marker='D', label='green')\n",
							"\n",
							"ax.set_xlabel('x axis')\n",
							"ax.set_ylabel('y axis')\n",
							"ax.set_zlabel('z axis')\n",
							"plt.title(\"3D Scatter Plot Example\")\n",
							"plt.legend()\n",
							"plt.tight_layout()\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# 3D Bar Plots\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"import numpy as np\n",
							"\n",
							"fig = plt.figure()\n",
							"ax = fig.add_subplot(111, projection = '3d')\n",
							"\n",
							"x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
							"y = np.random.randint(10, size=10)\n",
							"z = np.zeros(10)\n",
							"\n",
							"dx = np.ones(10)\n",
							"dy = np.ones(10)\n",
							"dz = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
							"\n",
							"ax.bar3d(x, y, z, dx, dy, dz, color='g')\n",
							"\n",
							"ax.set_xlabel('x axis')\n",
							"ax.set_ylabel('y axis')\n",
							"ax.set_zlabel('z axis')\n",
							"plt.title(\"3D Bar Chart Example\")\n",
							"plt.tight_layout()\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# Wireframe Plots\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"\n",
							"fig = plt.figure()\n",
							"ax = fig.add_subplot(111, projection = '3d')\n",
							"\n",
							"x, y, z = axes3d.get_test_data()\n",
							"\n",
							"ax.plot_wireframe(x, y, z, rstride = 2, cstride = 2)\n",
							"\n",
							"plt.title(\"Wireframe Plot Example\")\n",
							"plt.tight_layout()\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Seaborn\n",
							"Seaborn is a library layered on top of Matplotlib that you can use."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Scatterplot with a nice regression line fit to it, all with just one call to Seaborn's regplot.\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"import numpy as np\n",
							"import seaborn as sns\n",
							"\n",
							"# Generate some random data\n",
							"num_points = 20\n",
							"# x will be 5, 6, 7... but also twiddled randomly\n",
							"x = 5 + np.arange(num_points) + np.random.randn(num_points)\n",
							"# y will be 10, 11, 12... but twiddled even more randomly\n",
							"y = 10 + np.arange(num_points) + 5 * np.random.randn(num_points)\n",
							"sns.regplot(x=x, y=y)\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# Seanborn heatmap\n",
							"\n",
							"import matplotlib.pyplot as plt\n",
							"import numpy as np\n",
							"\n",
							"# Make a 10 x 10 heatmap of some random data\n",
							"side_length = 10\n",
							"# Start with a 10 x 10 matrix with values randomized around 5\n",
							"data = 5 + np.random.randn(side_length, side_length)\n",
							"# The next two lines make the values larger as we get closer to (9, 9)\n",
							"data += np.arange(side_length)\n",
							"data += np.reshape(np.arange(side_length), (side_length, 1))\n",
							"# Generate the heatmap\n",
							"fig = plt.figure()\n",
							"ax = fig.add_subplot(111)\n",
							"sns.heatmap(data, ax=ax)\n",
							"plt.show()"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Bokeh\n",
							"You can render HTML or interactive libraries, like **bokeh**, using the **displayHTML()**.\n"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import numpy as np\n",
							"from bokeh.plotting import figure, show\n",
							"from bokeh.io import output_notebook\n",
							"from bokeh.embed import file_html\n",
							"from bokeh.resources import CDN\n",
							"\n",
							"N = 4000\n",
							"x = np.random.random(size=N) * 100\n",
							"y = np.random.random(size=N) * 100\n",
							"radii = np.random.random(size=N) * 1.5\n",
							"colors = [\"#%02x%02x%02x\" % (r, g, 150) for r, g in zip(np.floor(50+2*x).astype(int), np.floor(30+2*y).astype(int))]\n",
							"\n",
							"p = figure()\n",
							"p.circle(x, y, radius=radii, fill_color=colors, fill_alpha=0.6, line_color=None)\n",
							"show(p)\n",
							"\n",
							"# create an html document that embeds the Bokeh plot\n",
							"html = file_html(p, CDN, \"my plot1\")\n",
							"\n",
							"# display this html\n",
							"displayHTML(html)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# Plotting glyphs over a map using bokeh.\n",
							"\n",
							"from bokeh.plotting import figure, output_file\n",
							"from bokeh.tile_providers import get_provider, Vendors\n",
							"from bokeh.embed import file_html\n",
							"from bokeh.resources import CDN\n",
							"from bokeh.models import ColumnDataSource\n",
							"\n",
							"tile_provider = get_provider(Vendors.CARTODBPOSITRON)\n",
							"\n",
							"# range bounds supplied in web mercator coordinates\n",
							"p = figure(x_range=(-9000000,-8000000), y_range=(4000000,5000000),\n",
							"           x_axis_type=\"mercator\", y_axis_type=\"mercator\")\n",
							"p.add_tile(tile_provider)\n",
							"\n",
							"# plot datapoints on the map\n",
							"source = ColumnDataSource(\n",
							"    data=dict(x=[ -8800000, -8500000 , -8800000],\n",
							"              y=[4200000, 4500000, 4900000])\n",
							")\n",
							"\n",
							"p.circle(x=\"x\", y=\"y\", size=15, fill_color=\"blue\", fill_alpha=0.8, source=source)\n",
							"\n",
							"# create an html document that embeds the Bokeh plot\n",
							"html = file_html(p, CDN, \"my plot1\")\n",
							"\n",
							"# display this html\n",
							"displayHTML(html)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Plotly\r\n",
							"You can render HTML or interactive libraries like **Plotly**, using the **displayHTML()**."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from urllib.request import urlopen\r\n",
							"import json\r\n",
							"with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\r\n",
							"    counties = json.load(response)\r\n",
							"\r\n",
							"import pandas as pd\r\n",
							"df = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\",\r\n",
							"                   dtype={\"fips\": str})\r\n",
							"\r\n",
							"import plotly\r\n",
							"import plotly.express as px\r\n",
							"\r\n",
							"fig = px.choropleth(df, geojson=counties, locations='fips', color='unemp',\r\n",
							"                           color_continuous_scale=\"Viridis\",\r\n",
							"                           range_color=(0, 12),\r\n",
							"                           scope=\"usa\",\r\n",
							"                           labels={'unemp':'unemployment rate'}\r\n",
							"                          )\r\n",
							"fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\r\n",
							"\r\n",
							"# create an html document that embeds the Plotly plot\r\n",
							"h = plotly.offline.plot(fig, output_type='div')\r\n",
							"\r\n",
							"# display this html\r\n",
							"displayHTML(h)"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_find top products')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/02_other data"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "93fc7c96-f210-4c26-9591-23c7b6fa8067"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"val df = spark.read.synapsesql(\"dataaidw.wwi.UserTopProductPurchases\") "
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.head(10)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.createTempView(\"df\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Notice that the language for this notebook is Spark Scala. We want to use Python to explore the data. To do this, we load the data into a temporary view, then we can load the view's contents into a DataFrame in a new PySpark cell. To do this, execute the following in a new cell:\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"# Calling the DataFrame df created in Scala to Python\r\n",
							"df = sqlContext.table(\"df\")\r\n",
							"# *********************\r\n",
							"\r\n",
							"topPurchases = df.select(\r\n",
							"    \"UserId\", \"ProductId\",\r\n",
							"    \"ItemsPurchasedLast12Months\", \"IsTopProduct\",\r\n",
							"    \"IsPreferredProduct\")\r\n",
							"\r\n",
							"topPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Execute the following in a new cell to create a new DataFrame to hold only top preferred products where IsTopProduct is true:"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"topPreferredProducts = (topPurchases\r\n",
							"    #.filter( col(\"IsTopProduct\") == True)       \r\n",
							"    .orderBy( col(\"ItemsPurchasedLast12Months\").desc() ))\r\n",
							"\r\n",
							"topPreferredProducts.show(100)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Execute the following in a new cell to create a new temporary view by using SQL:"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE OR REPLACE TEMPORARY VIEW top_5_products\r\n",
							"AS\r\n",
							"    select UserId, ProductId, ItemsPurchasedLast12Months\r\n",
							"    from (select *,\r\n",
							"                row_number() over (partition by UserId order by ItemsPurchasedLast12Months desc) as seqnum\r\n",
							"        from df\r\n",
							"        ) a\r\n",
							"    where seqnum <= 5 and IsTopProduct == true\r\n",
							"    order by a.UserId"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Note that there is no output for the above query. The query uses the df temporary view as a source and applies a row_number() over method to apply a row number for the records for each user where ItemsPurchasedLast12Months is greatest. The where clause filters the results so we only retrieve up to five products where both IsTopProduct and IsPreferredProduct are set to true. This gives us the top five most purchased products for each user where those products are also identified as their favorite products, according to their user profile stored in Azure Cosmos DB."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Execute the following in a new cell to create and display a new DataFrame that stores the results of the top_5_products temporary view you created in the previous cell:"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"top5Products = sqlContext.table(\"top_5_products\")\r\n",
							"\r\n",
							"top5Products.show(100)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"print('before filter: ', topPreferredProducts.count(), ', after filter: ', top5Products.count())"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Finally, let's calculate the top five products overall, based on those that are both preferred by customers and purchased the most. To do this, execute the following in a new cell:\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"top5ProductsOverall = (top5Products.select(\"ProductId\",\"ItemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"ProductId\")\r\n",
							"    .agg( sum(\"ItemsPurchasedLast12Months\").alias(\"Total\") )\r\n",
							"    .orderBy( col(\"Total\").desc() )\r\n",
							"    .limit(5))\r\n",
							"\r\n",
							"top5ProductsOverall.show()"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_historical esg reports')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7b24a2e3-037c-42c2-ad3d-3e411481c101"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import requests"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Company"
									],
									"values": [
										"Company"
									],
									"yLabel": "Company",
									"xLabel": "Company",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"Company\":{\"aberdeen standard\":1,\"abri capital\":1,\"apollo\":1,\"bank of america\":1,\"barclays\":1,\"bluebay\":1,\"bmogan\":1,\"cerberus\":1,\"cinven\":1,\"citi\":1,\"coller capital\":1,\"credit suisse\":1,\"exponent\":1,\"goldman sachs\":1,\"hermes investments\":1,\"hsbc\":1,\"jp morgan chase\":1,\"kkr\":1,\"lasalle\":1,\"lazard\":1,\"lloyds\":1,\"macquarie\":1,\"morgan stanley\":1,\"northern trust\":1,\"rbc\":1,\"riverstone\":1,\"ruffer\":1,\"santander\":1,\"schroders\":1,\"silverfleet capital\":1,\"standard chartered\":1,\"td bank\":1,\"vanguard\":1,\"warburg pircus\":1}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Esg/Esg.csv', \n",
							"    format='csv', \n",
							"    sep=\",\",\n",
							"    header=True)\n",
							"\n",
							"EsgData = nqSdf.toPandas()\n",
							"display(EsgData)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import (\n",
							"    BlockBlobService\n",
							")\n",
							"\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"\n",
							"blobService = BlockBlobService(account_name=accountName, account_key=accountKey)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"from urllib.parse import urlparse\n",
							"from pathlib import Path\n",
							"\n",
							"for index, esg in EsgData.iterrows():\n",
							"    url = esg['Url']\n",
							"    r = requests.get(url, allow_redirects=True)\n",
							"    a = urlparse(url)\n",
							"    blobName = 'EsgReports/' + Path(a.path).name\n",
							"    blobService.create_blob_from_text(containerName, blobName, r.content)\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_historical news and sentiment')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3dcad88a-95de-47b6-a4b7-940f3f6695bb"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Portfolio"
									],
									"values": [
										"Portfolio"
									],
									"yLabel": "Portfolio",
									"xLabel": "Portfolio",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"Portfolio\":{\"Covid\":15,\"LongTerm\":9}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Read out CSV file with list of all tickers\n",
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioCik.csv', \n",
							"    format='csv', \n",
							"    sep=\",\",\n",
							"    header=True)\n",
							"\n",
							"portfolioData = nqSdf.toPandas()\n",
							"display(portfolioData)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlobServiceClient, ContainerClient\n",
							"from azure.storage.blob import BlobClient\n",
							"\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"connectionString = \"DefaultEndpointsProtocol=https;AccountName=marketriskdl;AccountKey=2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==;EndpointSuffix=core.windows.net\""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"import urllib.parse, base64\n",
							"import json\n",
							"import requests\n",
							"import pandas as pd\n",
							"import datetime\n",
							"import pytz\n",
							"from azure.core.credentials import AzureKeyCredential\n",
							"from azure.ai.textanalytics import TextAnalyticsClient\n",
							"\n",
							"search_url = \"https://southcentralus.api.cognitive.microsoft.com/bing/v7.0/news/search\"\n",
							"#sentiment_url = 'https://southcentralus.api.cognitive.microsoft.com/text/analytics/v3.0/sentiment' # service address \n",
							"sentiment_url = 'https://southcentralus.api.cognitive.microsoft.com'\n",
							"api_key = 'c62e1aa4119b4803a86a93f3a6062d42'          # Azure Cognitive API Key, replace with your own key\n",
							"\n",
							"\n",
							"credential = AzureKeyCredential(api_key)\n",
							"text_analytics_client = TextAnalyticsClient(endpoint=sentiment_url, credential=credential)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"#for row in nqDf.rdd.collect():\n",
							"for index, ticker in portfolioData.iterrows():\n",
							"\n",
							"    dfObj = pd.DataFrame(columns=['Symbol', 'Name', 'Url', 'Date_Published', 'Description', 'Sentiment', 'Positive_Score', 'Negative_Score', 'Neutral_Score'])\n",
							"\n",
							"    headers = {'Ocp-Apim-Subscription-Key':api_key, \\\n",
							"                'Content-type': 'application/json',\\\n",
							"                'Accept': 'application/json'}\n",
							"\n",
							"    symbol = ticker['Ticker']\n",
							"\n",
							"    params = urllib.parse.urlencode({\n",
							"        # Request parameters\n",
							"        'q': ticker['Ticker'],\n",
							"        'offset': '0',\n",
							"        'mkt': 'en-us',\n",
							"        'freshness': 'Month',\n",
							"        'count' : 100\n",
							"    })\n",
							"\n",
							"    response = requests.get(search_url, headers=headers, params=params)\n",
							"    response.raise_for_status()\n",
							"    search_results = response.json()\n",
							"    #print(json.dumps(search_results['value'], indent=2, sort_keys=True))\n",
							"    for value in search_results['value']:\n",
							"        description = value['description']\n",
							"        url = value['url']\n",
							"        name = value['name']\n",
							"        publishedDate = value['datePublished']\n",
							"    \n",
							"        documents = [\"'\" + description + \"'\"]\n",
							"\n",
							"        response = text_analytics_client.analyze_sentiment(documents, language=\"en\")\n",
							"        result = [doc for doc in response if not doc.is_error]\n",
							"        #print(result)\n",
							"\n",
							"        for doc in result:\n",
							"            #print(\"Overall sentiment: {}\".format(doc.sentiment))\n",
							"            #print(\"Scores: positive={}; neutral={}; negative={} \\n\".format(\n",
							"            #    doc.confidence_scores.positive,\n",
							"            #    doc.confidence_scores.neutral,\n",
							"            #    doc.confidence_scores.negative,\n",
							"            #))\n",
							"            dfObj = dfObj.append({'Symbol': symbol, 'Name': name, 'Url': url, 'Date_Published': publishedDate, 'Description' : description, 'Sentiment': doc.sentiment, 'Positive_Score':doc.confidence_scores.positive, 'Negative_Score': doc.confidence_scores.negative, 'Neutral_Score': doc.confidence_scores.neutral}, ignore_index=True)\n",
							"    \n",
							"    currDate = datetime.datetime.now(pytz.timezone('US/Central'))\n",
							"    output = dfObj.to_csv (index=False, header=True, encoding = \"utf-8\")\n",
							"    blobName = \"News/HistoricalData/\" + ticker['Ticker'] + \".csv\"\n",
							"    blob = BlobClient.from_connection_string(conn_str=connectionString, container_name=containerName, blob_name=blobName)\n",
							"    blob.upload_blob(output)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_historical sec 10k reports')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fca4b6dd-b1bd-45ee-8d5c-66ecb32428e4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Importing built-in libraries (no need to install these)\n",
							"import re\n",
							"import os\n",
							"from time import gmtime, strftime\n",
							"from datetime import datetime, timedelta\n",
							"import unicodedata\n",
							"\n",
							"# Importing libraries you need to install\n",
							"import pandas as pd\n",
							"import numpy as np\n",
							"from sklearn.metrics.pairwise import cosine_similarity\n",
							"import requests\n",
							"import bs4 as bs\n",
							"from lxml import html\n",
							"from tqdm import tqdm\n",
							"\n",
							"from ratelimit import limits, sleep_and_retry\n",
							"from bs4 import BeautifulSoup\n",
							"\n",
							"import pprint"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Portfolio"
									],
									"values": [
										"Portfolio"
									],
									"yLabel": "Portfolio",
									"xLabel": "Portfolio",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"Portfolio\":{\"Covid\":15,\"LongTerm\":9}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioCik.csv', \n",
							"    format='csv', \n",
							"    sep=\",\",\n",
							"    header=True)\n",
							"\n",
							"portfolioData = nqSdf.toPandas()\n",
							"display(portfolioData)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"# Common methods to define SEC API endpoint and Getting SEC Data based on the document type and CIK\n",
							"class SecAPI(object):\n",
							"    SecCallLimit = {'calls': 10, 'seconds': 1}\n",
							"\n",
							"    @staticmethod\n",
							"    @sleep_and_retry\n",
							"    # Dividing the call limit by half to avoid coming close to the limit\n",
							"    @limits(calls=SecCallLimit['calls'] / 2, period=SecCallLimit['seconds'])\n",
							"    def _call_sec(url):\n",
							"        return requests.get(url)\n",
							"\n",
							"    def get(self, url):\n",
							"        return self._call_sec(url).text\n",
							"    \n",
							"def GetSecData(cik, ticker, doc_type, start=0, count=60):\n",
							"    rss_url = 'https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany' \\\n",
							"        '&CIK={}&type={}&start={}&count={}&owner=exclude&output=atom' \\\n",
							"        .format(cik, doc_type, start, count)\n",
							"    sec_data = sec_api.get(rss_url)\n",
							"    feed = BeautifulSoup(sec_data.encode('ascii'), 'xml').feed\n",
							"    entries = [\n",
							"        (\n",
							"            entry.content.find('filing-href').getText(),\n",
							"            entry.content.find('filing-type').getText(),\n",
							"            entry.content.find('filing-date').getText(),\n",
							"            cik,\n",
							"            ticker)\n",
							"        for entry in feed.find_all('entry', recursive=False)]\n",
							"\n",
							"    return entries"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"sec_api = SecAPI()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"# Get the URL and list of all reports for 10K \n",
							"sec_data = {}\n",
							"\n",
							"for index, ticker in portfolioData.iterrows():\n",
							"    sec_data[ticker['Ticker']] = GetSecData(ticker['CIK'], ticker['Ticker'], '10-K')\n",
							"    "
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"# Define the path to save 10K and 10Q\n",
							"path10K = 'SecReports/10K/'"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import (\n",
							"    BlockBlobService\n",
							")\n",
							"\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"\n",
							"blobService = BlockBlobService(account_name=accountName, account_key=accountKey)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"source": [
							"# Download all 10K Reports\n",
							"import time\n",
							"for ticker, data in sec_data.items():\n",
							"    #raw_fillings_by_ticker[ticker] = {}\n",
							"    for index_url, file_type, file_date, cik, tckr in tqdm(data, desc='Downloading {} Fillings'.format(ticker), unit='filling'):\n",
							"        if (file_type == '10-K'):\n",
							"            file_url = index_url.replace('-index.htm', '.txt').replace('.txtl', '.txt')       \n",
							"            secData = sec_api.get(file_url)\n",
							"            blobName = path10K + tckr + '/' + cik + '_' + file_date + '.txt'\n",
							"            blobService.create_blob_from_text(containerName, blobName, secData)\n",
							"            time.sleep(5)\n",
							"            "
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"# Get the URL and list of all reports for 10Q\n",
							"sec_data = {}\n",
							"\n",
							"for index, ticker in tickerDataTop10.iterrows():\n",
							"    sec_data[ticker['Nasdaq_Symbol']] = GetSecData(ticker['CIK'], ticker['Nasdaq_Symbol'], '10-Q')\n",
							"    "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# Download all 10Q Reports\n",
							"for ticker, data in sec_data.items():\n",
							"    #raw_fillings_by_ticker[ticker] = {}\n",
							"    for index_url, file_type, file_date, cik, tckr in tqdm(data, desc='Downloading {} Fillings'.format(ticker), unit='filling'):\n",
							"        if (file_type == '10-Q'):\n",
							"            file_url = index_url.replace('-index.htm', '.txt').replace('.txtl', '.txt')       \n",
							"            #raw_fillings_by_ticker[ticker][file_date] = sec_api.get(file_url)\n",
							"            secData = sec_api.get(file_url)\n",
							"            blobName = path10Q + tckr + '/' + cik + '_' + file_date + '.txt'\n",
							"            blobService.create_blob_from_text(containerName, blobName, secData)\n",
							"            #os.makedirs(os.path.dirname(blobName), exist_ok=True)\n",
							"            #html_file = open(fileName, 'w+')\n",
							"            #html_file.write(secData)\n",
							"            #html_file.close()\n",
							"            "
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_historical sec 10q reports')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "199d8cb2-e790-4fb8-8171-f8e718771152"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Importing built-in libraries (no need to install these)\n",
							"import re\n",
							"import os\n",
							"from time import gmtime, strftime\n",
							"from datetime import datetime, timedelta\n",
							"import unicodedata\n",
							"\n",
							"# Importing libraries you need to install\n",
							"import pandas as pd\n",
							"import numpy as np\n",
							"from sklearn.metrics.pairwise import cosine_similarity\n",
							"import requestst\n",
							"import bs4 as bs\n",
							"from lxml import html\n",
							"from tqdm import tqdm\n",
							"\n",
							"from ratelimit import limits, sleep_and_retry\n",
							"from bs4 import BeautifulSoup\n",
							"\n",
							"import pprint"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Portfolio"
									],
									"values": [
										"Portfolio"
									],
									"yLabel": "Portfolio",
									"xLabel": "Portfolio",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"Portfolio\":{\"Covid\":15,\"LongTerm\":9}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioCik.csv', \n",
							"    format='csv', \n",
							"    sep=\",\",\n",
							"    header=True)\n",
							"\n",
							"portfolioData = nqSdf.toPandas()\n",
							"display(portfolioData)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"# Common methods to define SEC API endpoint and Getting SEC Data based on the document type and CIK\n",
							"class SecAPI(object):\n",
							"    SecCallLimit = {'calls': 10, 'seconds': 1}\n",
							"\n",
							"    @staticmethod\n",
							"    @sleep_and_retry\n",
							"    # Dividing the call limit by half to avoid coming close to the limit\n",
							"    @limits(calls=SecCallLimit['calls'] / 2, period=SecCallLimit['seconds'])\n",
							"    def _call_sec(url):\n",
							"        return requests.get(url)\n",
							"\n",
							"    def get(self, url):\n",
							"        return self._call_sec(url).text\n",
							"    \n",
							"def GetSecData(cik, ticker, doc_type, start=0, count=60):\n",
							"    rss_url = 'https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany' \\\n",
							"        '&CIK={}&type={}&start={}&count={}&owner=exclude&output=atom' \\\n",
							"        .format(cik, doc_type, start, count)\n",
							"    sec_data = sec_api.get(rss_url)\n",
							"    feed = BeautifulSoup(sec_data.encode('ascii'), 'xml').feed\n",
							"    entries = [\n",
							"        (\n",
							"            entry.content.find('filing-href').getText(),\n",
							"            entry.content.find('filing-type').getText(),\n",
							"            entry.content.find('filing-date').getText(),\n",
							"            cik,\n",
							"            ticker)\n",
							"        for entry in feed.find_all('entry', recursive=False)]\n",
							"\n",
							"    return entries"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"sec_api = SecAPI()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"# Get the URL and list of all reports for 10Q \n",
							"sec_data = {}\n",
							"\n",
							"for index, ticker in portfolioData.iterrows():\n",
							"    sec_data[ticker['Ticker']] = GetSecData(ticker['CIK'], ticker['Ticker'], '10-Q')\n",
							"    "
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"# Define the path to save 10K and 10Q\n",
							"path10Q = 'SecReports/10Q/'"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import (\n",
							"    BlockBlobService\n",
							")\n",
							"\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"\n",
							"blobService = BlockBlobService(account_name=accountName, account_key=accountKey)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"# Download all 10Q Reports\n",
							"import time\n",
							"\n",
							"for ticker, data in sec_data.items():\n",
							"    #raw_fillings_by_ticker[ticker] = {}\n",
							"    for index_url, file_type, file_date, cik, tckr in tqdm(data, desc='Downloading {} Fillings'.format(ticker), unit='filling'):\n",
							"        if (file_type == '10-Q'):\n",
							"            file_url = index_url.replace('-index.htm', '.txt').replace('.txtl', '.txt')       \n",
							"            secData = sec_api.get(file_url)\n",
							"            blobName = path10Q + tckr + '/' + cik + '_' + file_date + '.txt'\n",
							"            blobService.create_blob_from_text(containerName, blobName, secData)\n",
							"            time.sleep(2)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_historical stock prices')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ded25954-a11a-49d1-86dc-fbe25e3cfdbb"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"#Import the required libraries\n",
							"import pandas as pd\n",
							"import yfinance as yf\n",
							"#from yahoofinancials import YahooFinancials\n",
							"from datetime import datetime"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Portfolio"
									],
									"values": [
										"Portfolio"
									],
									"yLabel": "Portfolio",
									"xLabel": "Portfolio",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"Portfolio\":{\"Covid\":15,\"LongTerm\":9}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Read out CSV file with list of all tickers\n",
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioCik.csv', \n",
							"    format='csv', \n",
							"    sep=\",\",\n",
							"    header=True)\n",
							"\n",
							"portfolioData = nqSdf.toPandas()\n",
							"display(portfolioData)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlobServiceClient, ContainerClient\n",
							"from azure.storage.blob import BlobClient\n",
							"\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"connectionString = \"DefaultEndpointsProtocol=https;AccountName=marketriskdl;AccountKey=2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==;EndpointSuffix=core.windows.net\""
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"# Get the stock price for all tickers and write it to CSV file\n",
							"#yahoo_financials = YahooFinancials(tickerTop10)\n",
							"\n",
							"#data = yahoo_financials.get_historical_price_data(start_date='2019-01-01', \n",
							"#                                                  end_date='2019-01-31', \n",
							"#                                                  time_interval='daily')\n",
							"finalColNames = [\"Portfolio\", \"Sector\", \"Cik\", \"Date\", \"Ticker\", \"AdjClose\"]\n",
							"\n",
							"for index, ticker in portfolioData.iterrows():\n",
							"    finalDf = pd.DataFrame(columns = finalColNames)\n",
							"    stockData = yf.download(ticker['Ticker'], period=\"max\", interval='1d', group_by='ticker', threads=True, progress=True)\n",
							"    for index, row in stockData.iterrows():\n",
							"        finalDf = finalDf.append({'Portfolio' : str(ticker['Portfolio']), 'Sector' : ticker['Sector'], 'Cik' : ticker['CIK'], 'Date' : index.date() , 'Ticker' : ticker['Ticker'], 'AdjClose' : row['Adj Close'] } , ignore_index=True)\n",
							"    output = finalDf.to_csv (index=False, header=True, encoding = \"utf-8\")\n",
							"    blobName = \"PortfolioQuotes/HistoricalData/\" + ticker['Ticker'] + \".csv\"\n",
							"    blob = BlobClient.from_connection_string(conn_str=connectionString, container_name=containerName, blob_name=blobName)\n",
							"    blob.upload_blob(output)\n",
							"    #blobService.create_blob_from_text(containerName, blobName, output)\n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_model training')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_machine learning"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6fe63cb9-392c-456c-9bd2-33eb178e1d94"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Model training and registration\n",
							"This notebook show the process for training the model, converting the model to ONNX and uploading the ONNX model to Azure Storage."
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Explore the training data\n",
							"The following cells load the source CSV file into a Spark DataFrame and create a temporary view that can be used to query the data with Spark SQL.\n",
							"\n",
							"WWI has provided a small CSV file you can use for showing the process of training a simple model.\n",
							"\n",
							"They have already loaded for you in the data lake. \n",
							"It is located under the `wwi-02` container with the path `/sale-csv/wwi-factsale.csv`.\n",
							"You need to build the correct path to the file and the run the cells that follow to load and query the data.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.load('abfss://wwi-02@dataairawdls.dfs.core.windows.net/sale-csv/wwi-factsale.csv', format=\"csv\"\n",
							", header=True, sep=\"|\"\n",
							")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, WWI would like you to show them how create a temporary view over the loaded dataframe.\n",
							"\n",
							"The view should be named `facts`.\n",
							"\n",
							"Complete the code in the cell and run it.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df.createOrReplaceTempView(\"facts\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"In the next cell, WWI would like you to explore the data with an initial query.\n",
							"\n",
							"You want to preview all of the sales having the `Customer Key` of `11`.\n",
							"\n",
							"You should order the results by `Stock Item Key`.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"SELECT * FROM facts WHERE `Customer Key` == '11' ORDER BY `Stock Item Key`\").show()"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Predict Quantity given Customer Key and Stock Item Key\n",
							"In the following cells we load a subset of the data that just contains the fields needed for training. \n",
							"\n",
							"WWI's data scientists have already provided some of the code for you. \n",
							"\n",
							"Read thru and run the following cells.\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.functions import col\n",
							"df3 = spark.sql(\"SELECT double(`Customer Key`) as customerkey, double(`Stock Item Key`) as stockitemkey, double(`Quantity`) as quantity FROM facts\").where(col(\"quantity\").isNotNull())\n",
							"df3.cache()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, we package the data into the format expected by Spark ML's LinearRegression. It requires a DataFrame with two columns- `features` and a column with the labels to predict (`quantity` in this case).\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.ml.feature import VectorAssembler\n",
							"\n",
							"vectorAssembler = VectorAssembler(inputCols = ['customerkey', 'stockitemkey'], outputCol = 'features')\n",
							"df4 = vectorAssembler.transform(df3)\n",
							"df5 = df4.select(['features', 'quantity'])\n",
							"df5.show(10)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now, we split our DataFrame into training and testing DataFrames.\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"A best practice is to split data into training and test sets.\n",
							"\n",
							"WWI would like you to complete the final line that produces the train and test dataframes. \n",
							"\n",
							"Once you have completed the cell, run it.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 42\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"df_train, df_test = df5.randomSplit([trainingFraction, testingFraction], seed=seed)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"In the following cell, you will train your LinearRegression model.\n",
							"\n",
							"The goal of this regressor is to predict the `quantity` field given all of the features. \n",
							"\n",
							"Complete the missing parameters and the last line to train the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.ml.regression import LinearRegression\n",
							"\n",
							"lin_reg = LinearRegression(featuresCol = 'features', labelCol='quantity', maxIter = 10, regParam=0.3)\n",
							"lin_reg_model = lin_reg.fit(df_train)\n",
							"\n",
							"print(\"Coefficients: \" + str(lin_reg_model.coefficients))\n",
							"print(\"Intercept: \" + str(lin_reg_model.intercept))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now that you have a trained model in hand, WWI wants to verify you can use it to make predictions against the test DataFrame.\n",
							"\n",
							"Complete the first line to use your trained model to make predictions against the `df_test` dataframe.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"df_pred = lin_reg_model.transform(df_test)\n",
							"display(df_pred)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Convert model to ONNX\n",
							"In the cells that follow, WWI wants you to show how you convert the model to ONNX and show how an output of how ONNX represents the Spark ML model.\n",
							"\n",
							"They have already provided you the code, you just need to run the cells.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from onnxmltools import convert_sparkml\n",
							"from onnxmltools.convert.common.data_types import FloatTensorType\n",
							"\n",
							"initial_types = [ \n",
							"    (\"features\", FloatTensorType([1, lin_reg_model.numFeatures])),\n",
							"    # (repeat for the required inputs)\n",
							"]"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"source": [
							"model_onnx = convert_sparkml(lin_reg_model, 'sparkml GeneralizedLinearRegression', initial_types)\n",
							"model_onnx"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Upload the model to Azure Storage\n",
							"\n",
							"In order for an ONNX model to be used by the T-SQL predict statement, it must be uploaded to Azure Storage.\n",
							"\n",
							"WWI wants you to show them how they would serialize the model to disk and then upload the model file to Azure Storage.\n",
							"\n",
							"Run the following cell to save  the ONNX model to the storage of the Spark driver node temporarily. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"with open(\"model.onnx\", \"wb\") as f:\n",
							"    f.write(model_onnx.SerializeToString())"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, you need to show WWI how to use the Azure Storage Python SDK to upload the ONNX model to Azure Storage.\n",
							"\n",
							"Complete the connection string with the correct values for your non-hierarchical Storage Account.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"modelPath = 'abfss://wwi-02@dataairawdls.dfs.core.windows.net/ml/onnx/product_seasonality_classifier.onnx'\n",
							"modelString = str(model_onnx.SerializeToString())\n",
							"mssparkutils.fs.put(modelPath, modelString)\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_portfolio cik')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6a62321b-2406-4ab6-8f0e-8f9060fbe3a3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Required packages\n",
							"import re\n",
							"import requests\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"#Define the secURL and the regex to be used\n",
							"secUrl = 'http://www.sec.gov/cgi-bin/browse-edgar?CIK={}&Find=Search&owner=exclude&action=getcompany'\n",
							"cikRegEx = re.compile(r'.CIK=(\\d{10}).')"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"# Load our data into Dataframe\n",
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/Portfolio.csv', \n",
							"    format='csv', \n",
							"    sep=\",\",\n",
							"    header=True)\n",
							"\n",
							"nqPdf = nqSdf.toPandas()"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Portfolio"
									],
									"values": [
										"Portfolio"
									],
									"yLabel": "Portfolio",
									"xLabel": "Portfolio",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"Portfolio\":{\"Covid\":15,\"LongTerm\":9}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"display(nqPdf)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"from time import sleep\n",
							"from azure.storage.blob import (\n",
							"    BlockBlobService\n",
							")\n",
							"\n",
							"# Create empty data frame\n",
							"finalColNames = [\"Portfolio\", \"Sector\", \"Ticker\", \"CreatedDate\", \"CIK\"]\n",
							"finalDf = pd.DataFrame(columns = finalColNames)\n",
							"\n",
							"# Iterate through all ticker data to find out the CIK from sec website\n",
							"for index, ticker in nqPdf.iterrows():\n",
							"    sleep(2)\n",
							"    f = requests.get(secUrl.format(ticker['Ticker']), stream=True);\n",
							"    results = cikRegEx.findall(f.text)\n",
							"    if len(results):\n",
							"        finalDf = finalDf.append({'Portfolio' : str(ticker['Portfolio']) , 'Sector' : ticker['Sector'], 'Ticker' : ticker['Ticker'], 'CreatedDate' : ticker['CreatedDate'], 'CIK' : str(results[0]) } , ignore_index=True)\n",
							"\n",
							"# Write CSV file \n",
							"# storage_path = 'abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioCik.csv'\n",
							"# sDf = spark.createDataFrame(finalDf)\n",
							"# sDf.coalesce(1).write.mode(\"overwrite\").csv(storage_path, header=\"true\")\n",
							"output = finalDf.to_csv(index=False, encoding = \"utf-8\")\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"blobName = \"Portfolio/PortfolioCik.csv\"\n",
							"\n",
							"blobService = BlockBlobService(account_name=accountName, account_key=accountKey)\n",
							"\n",
							"# Delete existing blob\n",
							"blobService.delete_blob(containerName,blobName,snapshot=None)\n",
							"\n",
							"blobService.create_blob_from_text(containerName, blobName, output)\n",
							""
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_query sales parquet data')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/01_sales data"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7cc02e69-ad5b-4b28-b7ef-15f7f0e663a5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load(\"abfss://wwi-02@dataairawdls.dfs.core.windows.net/sale-small/Year=2010/Quarter=Q4/Month=12\")\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.types import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"profitByDateProduct = (df.groupBy(\"TransactionDate\",\"ProductId\")\r\n",
							"    .agg(\r\n",
							"        sum(\"ProfitAmount\").alias(\"(sum)ProfitAmount\"),\r\n",
							"        round(avg(\"Quantity\"), 4).alias(\"(avg)Quantity\"),\r\n",
							"        sum(\"Quantity\").alias(\"(sum)Quantity\"))\r\n",
							"    .orderBy(\"TransactionDate\"))\r\n",
							"profitByDateProduct.show(100)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"In addition to the sales data, we have customer profile data from an e-commerce system that provides top product purchases for each visitor of the site (customer) over the past 12 months. This data is stored within JSON files in the data lake. We will import this data in the next lab, but let's explore it while we're in the Spark notebook."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = (spark.read \\\r\n",
							"        .option(\"inferSchema\", \"true\") \\\r\n",
							"        .json(\"abfss://wwi-02@dataairawdls.dfs.core.windows.net/online-user-profiles-02/*.json\", multiLine=True)\r\n",
							"    )\r\n",
							"\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# create a view called user_profiles\r\n",
							"df.createOrReplaceTempView(\"user_profiles\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Notice that we are selecting all JSON files within the online-user-profiles-02 directory. Each JSON file contains several rows, which is why we specified the multiLine=True option. Also, we set the inferSchema option to true, which instructs the Spark engine to review the files and create a schema based on the nature of the data."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"We have been using Python code in these cells up to this point. If we want to query the files using SQL syntax, one option is to create a temporary view of the data within the dataframe. Execute the following in a new cell to create a view named user_profiles:"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT * FROM user_profiles LIMIT 10"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Notice that the output shows nested data for topProductPurchases, which includes an array of productId and itemsPurchasedLast12Months values. You can expand the fields by clicking the right triangle in each row."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"PySpark contains a special explode function, which returns a new row for each element of the array. This will help flatten the topProductPurchases column for better readability or for easier querying. Execute the following in a new cell:"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import udf, explode\r\n",
							"\r\n",
							"flat=df.select('visitorId',explode('topProductPurchases').alias('topProductPurchases_flat'))\r\n",
							"flat.show(100)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"topPurchases = (flat.select('visitorId','topProductPurchases_flat.productId','topProductPurchases_flat.itemsPurchasedLast12Months')\r\n",
							"    .orderBy('visitorId'))\r\n",
							"\r\n",
							"topPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"In the output, notice that we now have multiple rows for each visitorId."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Let's order by the number of items purchased in the last 12 months\r\n",
							"sortedTopPurchases = topPurchases.orderBy(\"itemsPurchasedLast12Months\")\r\n",
							"\r\n",
							"sortedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"topPurchases.orderBy(\"itemsPurchasedLast12Months desc\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Notice that there is an AnalysisException error, because itemsPurchasedLast12Months desc does not match up with a column name.\r\n",
							"\r\n",
							"Why does this not work?\r\n",
							"\r\n",
							"- The DataFrames API is built upon an SQL engine.\r\n",
							"- There is a lot of familiarity with this API and SQL syntax in general.\r\n",
							"- The problem is that orderBy(..) expects the name of the column.\r\n",
							"- What we specified was an SQL expression in the form of requests desc.\r\n",
							"- What we need is a way to programmatically express such an expression.\r\n",
							"- This leads us to the second variant, orderBy(Column) and more specifically, the class Column"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sortedTopPurchases = (topPurchases\r\n",
							"    .orderBy( col(\"itemsPurchasedLast12Months\").desc() ))\r\n",
							"\r\n",
							"sortedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(count(\"*\").alias(\"total\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"groupedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\",\"itemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(sum(\"itemsPurchasedLast12Months\").alias(\"totalItemsPurchased\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"groupedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_daily stock price')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f2110779-c8f7-4a2d-a74e-b1ffda1cfd83"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"#Import the required libraries\n",
							"import pandas as pd\n",
							"import yfinance as yf\n",
							"#from yahoofinancials import YahooFinancials\n",
							"from datetime import datetime"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Portfolio"
									],
									"values": [
										"Portfolio"
									],
									"yLabel": "Portfolio",
									"xLabel": "Portfolio",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"Portfolio\":{\"Covid\":15,\"LongTerm\":9}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"# Read out CSV file with list of all tickers\n",
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioCik.csv', \n",
							"    format='csv', \n",
							"    sep=\",\",\n",
							"    header=True)\n",
							"\n",
							"portfolioData = nqSdf.toPandas()\n",
							"display(portfolioData)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlobServiceClient, ContainerClient\n",
							"from azure.storage.blob import BlobClient\n",
							"\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"connectionString = \"DefaultEndpointsProtocol=https;AccountName=marketriskdl;AccountKey=2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==;EndpointSuffix=core.windows.net\""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"# Get the stock price for all tickers and write it to CSV file\n",
							"#yahoo_financials = YahooFinancials(tickerTop10)\n",
							"\n",
							"#data = yahoo_financials.get_historical_price_data(start_date='2019-01-01', \n",
							"#                                                  end_date='2019-01-31', \n",
							"#                                                  time_interval='daily')\n",
							"import datetime\n",
							"\n",
							"finalColNames = [\"Portfolio\", \"Sector\", \"Cik\", \"Date\", \"Ticker\", \"AdjClose\"]\n",
							"\n",
							"for index, ticker in portfolioData.iterrows():\n",
							"    finalDf = pd.DataFrame(columns = finalColNames)\n",
							"    #stockData = yf.download(ticker['Ticker'], start='1994-01-01', end='2020-03-31', time_interval='daily', progress=True)\n",
							"    #stockData = yf.download(ticker['Ticker'], start='2020-10-20', end='2020-10-21', time_interval='daily', progress=True)\n",
							"    stockData = yf.Ticker(ticker['Ticker']).history(period=\"1d\", interval=\"1d\").tail(1)\n",
							"    totalRows = len(stockData.index)\n",
							"    if (totalRows > 0):\n",
							"        for index, row in stockData.iterrows():\n",
							"            finalDf = finalDf.append({'Portfolio' : str(ticker['Portfolio']), 'Sector' : ticker['Sector'], 'Cik' : ticker['CIK'], 'Date' : index.date() , 'Ticker' : ticker['Ticker'], 'AdjClose' : row['Close'] } , ignore_index=True)\n",
							"            date = datetime.datetime.strptime(str(index.date()), \"%Y-%m-%d\")\n",
							"        output = finalDf.to_csv (index=False, header=True, encoding = \"utf-8\")\n",
							"        blobName = \"PortfolioQuotes/DailyData/\" + str(date.year) + \"/\" + str(date.month) + \"/\" + str(date.day) + \"/\" + ticker['Ticker'] + \".csv\"\n",
							"        blob = BlobClient.from_connection_string(conn_str=connectionString, container_name=containerName, blob_name=blobName)\n",
							"        blob.upload_blob(output)\n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_news and sentiment')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b2f5428e-3c57-47b7-a51f-b5a418ba6646"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Portfolio"
									],
									"values": [
										"Portfolio"
									],
									"yLabel": "Portfolio",
									"xLabel": "Portfolio",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"Portfolio\":{\"Covid\":15,\"LongTerm\":9}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Read out CSV file with list of all tickers\n",
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioCik.csv', \n",
							"    format='csv', \n",
							"    sep=\",\",\n",
							"    header=True)\n",
							"\n",
							"portfolioData = nqSdf.toPandas()\n",
							"display(portfolioData)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlobServiceClient, ContainerClient\n",
							"from azure.storage.blob import BlobClient\n",
							"\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"connectionString = \"DefaultEndpointsProtocol=https;AccountName=marketriskdl;AccountKey=2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==;EndpointSuffix=core.windows.net\""
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"import urllib.parse, base64\n",
							"import json\n",
							"import requests\n",
							"import pandas as pd\n",
							"import datetime\n",
							"import pytz\n",
							"from azure.core.credentials import AzureKeyCredential\n",
							"from azure.ai.textanalytics import TextAnalyticsClient\n",
							"\n",
							"search_url = \"https://southcentralus.api.cognitive.microsoft.com/bing/v7.0/news/search\"\n",
							"#sentiment_url = 'https://southcentralus.api.cognitive.microsoft.com/text/analytics/v3.0/sentiment' # service address \n",
							"sentiment_url = 'https://southcentralus.api.cognitive.microsoft.com'\n",
							"api_key = 'c62e1aa4119b4803a86a93f3a6062d42'          # Azure Cognitive API Key, replace with your own key\n",
							"\n",
							"\n",
							"credential = AzureKeyCredential(api_key)\n",
							"text_analytics_client = TextAnalyticsClient(endpoint=sentiment_url, credential=credential)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"#for row in nqDf.rdd.collect():\n",
							"for index, ticker in portfolioData.iterrows():\n",
							"\n",
							"    dfObj = pd.DataFrame(columns=['Symbol', 'Name', 'Url', 'Date_Published', 'Description', 'Sentiment', 'Positive_Score', 'Negative_Score', 'Neutral_Score'])\n",
							"\n",
							"    headers = {'Ocp-Apim-Subscription-Key':api_key, \\\n",
							"                'Content-type': 'application/json',\\\n",
							"                'Accept': 'application/json'}\n",
							"\n",
							"    symbol = ticker['Ticker']\n",
							"\n",
							"    params = urllib.parse.urlencode({\n",
							"        # Request parameters\n",
							"        'q': ticker['Ticker'],\n",
							"        'offset': '0',\n",
							"        'mkt': 'en-us',\n",
							"        'freshness': 'Day',\n",
							"        'count' : 100\n",
							"    })\n",
							"\n",
							"    response = requests.get(search_url, headers=headers, params=params)\n",
							"    response.raise_for_status()\n",
							"    search_results = response.json()\n",
							"    #print(json.dumps(search_results['value'], indent=2, sort_keys=True))\n",
							"    for value in search_results['value']:\n",
							"        description = value['description']\n",
							"        url = value['url']\n",
							"        name = value['name']\n",
							"        publishedDate = value['datePublished']\n",
							"    \n",
							"        documents = [\"'\" + description + \"'\"]\n",
							"\n",
							"        response = text_analytics_client.analyze_sentiment(documents, language=\"en\")\n",
							"        result = [doc for doc in response if not doc.is_error]\n",
							"        #print(result)\n",
							"\n",
							"        for doc in result:\n",
							"            #print(\"Overall sentiment: {}\".format(doc.sentiment))\n",
							"            #print(\"Scores: positive={}; neutral={}; negative={} \\n\".format(\n",
							"            #    doc.confidence_scores.positive,\n",
							"            #    doc.confidence_scores.neutral,\n",
							"            #    doc.confidence_scores.negative,\n",
							"            #))\n",
							"            dfObj = dfObj.append({'Symbol': symbol, 'Name': name, 'Url': url, 'Date_Published': publishedDate, 'Description' : description, 'Sentiment': doc.sentiment, 'Positive_Score':doc.confidence_scores.positive, 'Negative_Score': doc.confidence_scores.negative, 'Neutral_Score': doc.confidence_scores.neutral}, ignore_index=True)\n",
							"    \n",
							"    currDate = datetime.datetime.now(pytz.timezone('US/Central'))\n",
							"    output = dfObj.to_csv (index=False, header=True, encoding = \"utf-8\")\n",
							"    blobName = \"News/DailyData/\" + str(currDate.year) + \"/\" + str(currDate.month) + \"/\" + str(currDate.day) + \"/\" + ticker['Ticker'] + \".csv\"\n",
							"    blob = BlobClient.from_connection_string(conn_str=connectionString, container_name=containerName, blob_name=blobName)\n",
							"    blob.upload_blob(output)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_synapse machine learning')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_machine learning"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "47065312-bb7e-4223-9db2-cbe2893017ae"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"85f06203-f53f-4c03-a053-108b0029e611": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "84fa61f6",
												"1": "84fdf5e6",
												"2": "1",
												"3": "1007.3703074960509",
												"4": "100.96380068432816",
												"5": "1504.0231375425865",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.89371017777",
												"10": "199993.30455927135"
											},
											{
												"0": "84fa61f7",
												"1": "84fdf5e7",
												"2": "1",
												"3": "1009.0165993860892",
												"4": "96.59174824100965",
												"5": "1518.7985456646848",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100003.62001368884",
												"10": "199996.44033653763"
											},
											{
												"0": "84fa61f8",
												"1": "84fdf5e8",
												"2": "1",
												"3": "1017.6356795795646",
												"4": "101.38067630056376",
												"5": "1501.3119027109806",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.04629461098",
												"10": "199989.20031100875"
											},
											{
												"0": "84fa61f9",
												"1": "84fdf5e9",
												"2": "1",
												"3": "1016.6712169423425",
												"4": "79.58174744809645",
												"5": "1508.114820588185",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.76828826875",
												"10": "199992.02201807586"
											},
											{
												"0": "84fa61fa",
												"1": "84fdf5ea",
												"2": "0",
												"3": "1013.7909772121608",
												"4": "91.33996840809115",
												"5": "1517.5457928925623",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100005.97362876785",
												"10": "199996.4210598991"
											},
											{
												"0": "84fa61fb",
												"1": "84fdf5eb",
												"2": "0",
												"3": "1006.5798773466613",
												"4": "115.14108135868779",
												"5": "1502.5461750505765",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.80125926025",
												"10": "199993.94838620344"
											},
											{
												"0": "84fa61fc",
												"1": "84fdf5ec",
												"2": "1",
												"3": "1000.5136432788325",
												"4": "80.51395571255301",
												"5": "1497.9178336575956",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.92190675237",
												"10": "200000.39192579014"
											},
											{
												"0": "84fa61fd",
												"1": "84fdf5ed",
												"2": "0",
												"3": "1003.758183775668",
												"4": "105.46639996026579",
												"5": "1519.8563854945417",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.68122153166",
												"10": "199995.81658039338"
											},
											{
												"0": "84fa61fe",
												"1": "84fdf5ee",
												"2": "1",
												"3": "1010.8742438074745",
												"4": "82.881543368899",
												"5": "1496.1631885981394",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.8829138568",
												"10": "199993.9386832266"
											},
											{
												"0": "84fa61ff",
												"1": "84fdf5ef",
												"2": "1",
												"3": "1006.5953469343162",
												"4": "117.9262499309015",
												"5": "1490.3738639911314",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.42810358423",
												"10": "199990.92090442116"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "CustomerId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "string"
											},
											{
												"key": "2",
												"name": "Rating",
												"type": "string"
											},
											{
												"key": "3",
												"name": "Cost",
												"type": "string"
											},
											{
												"key": "4",
												"name": "Size",
												"type": "string"
											},
											{
												"key": "5",
												"name": "Price",
												"type": "string"
											},
											{
												"key": "6",
												"name": "PrimaryBrandId",
												"type": "string"
											},
											{
												"key": "7",
												"name": "GenderId",
												"type": "string"
											},
											{
												"key": "8",
												"name": "MaritalStatus",
												"type": "string"
											},
											{
												"key": "9",
												"name": "LowerIncomeBound",
												"type": "string"
											},
											{
												"key": "10",
												"name": "UpperIncomeBound",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"dc12336e-3b26-4953-b317-df2cdc0c7d08": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "1",
												"1": "2021"
											},
											{
												"0": "0",
												"1": "2021"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "Rating",
												"type": "int"
											},
											{
												"key": "1",
												"name": "count",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"d0e800ac-580b-4dc4-991b-2d940891893c": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "1",
												"1": {
													"type": 1,
													"values": [
														1013.1693458073678,
														81.48396248120595,
														1510.8065660915163,
														0,
														1,
														1,
														99993.97956663521,
														199995.70871892222
													]
												},
												"2": {
													"type": 1,
													"values": [
														-6.364184072986553,
														6.364184072986553
													]
												},
												"3": {
													"type": 1,
													"values": [
														0.0017191853435571947,
														0.9982808146564428
													]
												},
												"4": "1.0"
											},
											{
												"0": "1",
												"1": {
													"type": 1,
													"values": [
														1006.572581053828,
														96.89892809136968,
														1512.9349488618368,
														0,
														1,
														1,
														99999.66735298479,
														199992.23736098956
													]
												},
												"2": {
													"type": 1,
													"values": [
														-2.7822262284724566,
														2.7822262284724566
													]
												},
												"3": {
													"type": 1,
													"values": [
														0.058292228173575045,
														0.941707771826425
													]
												},
												"4": "1.0"
											},
											{
												"0": "1",
												"1": {
													"type": 1,
													"values": [
														1019.0877455784694,
														87.55956439146641,
														1512.7248840200587,
														1,
														1,
														1,
														100001.98976262085,
														199988.69290662097
													]
												},
												"2": {
													"type": 1,
													"values": [
														-2.224423774389368,
														2.224423774389368
													]
												},
												"3": {
													"type": 1,
													"values": [
														0.09757856596859005,
														0.90242143403141
													]
												},
												"4": "1.0"
											},
											{
												"0": "1",
												"1": {
													"type": 1,
													"values": [
														1011.4020471519617,
														95.88854759865906,
														1516.9994677197067,
														0,
														1,
														1,
														99992.29215023812,
														199992.53579323663
													]
												},
												"2": {
													"type": 1,
													"values": [
														-7.560978415083746,
														7.560978415083746
													]
												},
												"3": {
													"type": 1,
													"values": [
														0.0005200952211268373,
														0.9994799047788732
													]
												},
												"4": "1.0"
											},
											{
												"0": "1",
												"1": {
													"type": 1,
													"values": [
														1013.2124357520984,
														98.04187478550648,
														1507.695687496717,
														0,
														0,
														1,
														99993.47759114974,
														199994.30247329685
													]
												},
												"2": {
													"type": 1,
													"values": [
														-6.145069551959311,
														6.145069551959311
													]
												},
												"3": {
													"type": 1,
													"values": [
														0.002139439749379135,
														0.9978605602506209
													]
												},
												"4": "1.0"
											},
											{
												"0": "1",
												"1": {
													"type": 1,
													"values": [
														1008.4329658579697,
														91.21030848978025,
														1501.8971381852189,
														1,
														1,
														1,
														99994.71856935644,
														199999.71482615347
													]
												},
												"2": {
													"type": 1,
													"values": [
														-5.32153801315326,
														5.32153801315326
													]
												},
												"3": {
													"type": 1,
													"values": [
														0.004861484896355184,
														0.9951385151036448
													]
												},
												"4": "1.0"
											},
											{
												"0": "0",
												"1": {
													"type": 1,
													"values": [
														1014.5020575176037,
														95.23975845909365,
														1519.5559004004217,
														0,
														1,
														0,
														100010.21601772199,
														199987.49531176878
													]
												},
												"2": {
													"type": 1,
													"values": [
														8.697291434037677,
														-8.697291434037677
													]
												},
												"3": {
													"type": 1,
													"values": [
														0.9998329902656491,
														0.00016700973435093905
													]
												},
												"4": "0.0"
											},
											{
												"0": "0",
												"1": {
													"type": 1,
													"values": [
														1009.4020560701326,
														102.1023996553157,
														1507.9379387060353,
														0,
														1,
														0,
														100002.78159339169,
														199995.17197619507
													]
												},
												"2": {
													"type": 1,
													"values": [
														2.6905695752210304,
														-2.6905695752210304
													]
												},
												"3": {
													"type": 1,
													"values": [
														0.9364678774194245,
														0.06353212258057547
													]
												},
												"4": "0.0"
											},
											{
												"0": "1",
												"1": {
													"type": 1,
													"values": [
														1015.7743107044632,
														94.54243601228647,
														1510.225206452774,
														0,
														0,
														0,
														99994.06289895604,
														199993.8310820084
													]
												},
												"2": {
													"type": 1,
													"values": [
														-4.083268940585532,
														4.083268940585532
													]
												},
												"3": {
													"type": 1,
													"values": [
														0.016572993556286497,
														0.9834270064437135
													]
												},
												"4": "1.0"
											},
											{
												"0": "1",
												"1": {
													"type": 1,
													"values": [
														1010.5804746871684,
														102.5344682637609,
														1508.3690153477446,
														0,
														1,
														1,
														99990.7784189871,
														199990.50782652057
													]
												},
												"2": {
													"type": 1,
													"values": [
														-7.42813493916687,
														7.42813493916687
													]
												},
												"3": {
													"type": 1,
													"values": [
														0.0005939418984050038,
														0.999406058101595
													]
												},
												"4": "1.0"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "Rating",
												"type": "int"
											},
											{
												"key": "1",
												"name": "features",
												"type": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7"
											},
											{
												"key": "2",
												"name": "rawPrediction",
												"type": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7"
											},
											{
												"key": "3",
												"name": "probability",
												"type": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7"
											},
											{
												"key": "4",
												"name": "prediction",
												"type": "double"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"4"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"34027e82-ad48-456e-a2ca-6b01581885e5": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "Classification",
												"1": {
													"numCols": 2,
													"isTransposed": false,
													"values": [
														448,
														77,
														31,
														402
													],
													"type": 1,
													"numRows": 2
												},
												"2": "0.8872651356993737",
												"3": "0.9284064665127021",
												"4": "0.8392484342379958",
												"5": "0.8872651356993737"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "evaluation_type",
												"type": "string"
											},
											{
												"key": "1",
												"name": "confusion_matrix",
												"type": "org.apache.spark.ml.linalg.MatrixUDT@e59e0c69"
											},
											{
												"key": "2",
												"name": "accuracy",
												"type": "double"
											},
											{
												"key": "3",
												"name": "precision",
												"type": "double"
											},
											{
												"key": "4",
												"name": "recall",
												"type": "double"
											},
											{
												"key": "5",
												"name": "AUC",
												"type": "double"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"2"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Install Synapse ML in the Apache Spark session"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# %%configure -f\n",
							"# {\n",
							"#     \"name\": \"synapseml\",\n",
							"#     \"conf\": {\n",
							"#         \"spark.jars.packages\": \"com.microsoft.azure:synapseml_2.12:0.9.4\",\n",
							"#         \"spark.jars.repositories\": \"https://mmlspark.azureedge.net/maven\",\n",
							"#         \"spark.jars.excludes\": \"org.scala-lang:scala-reflect,org.apache.spark:spark-tags_2.12,org.scalactic:scalactic_2.12,org.scalatest:scalatest_2.12\",\n",
							"#         \"spark.yarn.user.classpath.first\": \"true\"\n",
							"#     }\n",
							"# }"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Part 1 - Entity detection with Cognitive Services\n",
							"\n",
							"Detect entities in text using the Cognitive Services entity detector transformer from Synapse ML."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Retrieve the Cognitive Services credentials and create the test dataset."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"key = mssparkutils.credentials.getSecret('dataaikeyvault', 'dataaitextanalytics-Key')\n",
							"location = 'southcentralus'\n",
							"\n",
							"df = spark.createDataFrame(data=[\n",
							"        [1, \"Muad'Dib learned rapidly because his first training was in how to learn. And the first lesson of all was the basic trust that he could learn. It's shocking to find how many people do not believe they can learn, and how many more believe learning to be difficult. Muad'Dib knew that every experience carries its lesson.\"],\n",
							"        [2, \"It's the ship that made the Kessel run in less than twelve parsecs. I've outrun Imperial starships. Not the local bulk cruisers, mind you. I'm talking about the big Corellian ships, now. She's fast enough for you, old man.\"]\n",
							"    ], \n",
							"    schema=[\"id\",\"text\"])"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Define the transformer to detect the entities mentioned in text."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from synapse.ml.cognitive import *\n",
							"\n",
							"entity = (EntityDetector()\n",
							"      .setSubscriptionKey(key)\n",
							"      .setLocation(location)\n",
							"      .setLanguage(\"en\")\n",
							"      .setOutputCol(\"entities\")\n",
							"      .setErrorCol(\"error\"))\n",
							"\n",
							"df_entities = entity.transform(df)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check out the entities identified from the first phrase."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(df_entities.head(1)[0].entities[0].entities[0].id)\n",
							"print(df_entities.head(1)[0].entities[0].entities[0].url)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check out the entities identified from the second phrase."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(df_entities.tail(1)[0].entities[0].entities[0].id)\n",
							"print(df_entities.tail(1)[0].entities[0].entities[0].url)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Part 2 - Train a customer recommendation model\n",
							"\n",
							"Use the LightGBM Synapse ML algorithm to train a model for retail product recommendation."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Configure\n",
							"\n",
							"Reference the required libraries and check Synapse ML version (shoudl be 0.9.4)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import logging\n",
							"logging.getLogger(\"py4j\").setLevel(logging.ERROR)\n",
							"\n",
							"import pandas as pd\n",
							"import seaborn as sns\n",
							"from matplotlib import pyplot as plt\n",
							"\n",
							"from pyspark.version import __version__ as pyspark_version\n",
							"\n",
							"from synapse.ml.core import __spark_package_version__\n",
							"from synapse.ml.train import ComputeModelStatistics\n",
							"from synapse.ml.lightgbm import LightGBMClassifier\n",
							"from pyspark.ml.feature import VectorAssembler\n",
							"\n",
							"pd.set_option('display.max_columns', 50)\n",
							"\n",
							"print(f\"PySpark version: {pyspark_version}\")\n",
							"print(f\"SynapseML version: {__spark_package_version__}\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"source": [
							"Set the data preparation and model training parameters. \n",
							"\n",
							"Check the [Synapse ML LightGBM documentation](https://microsoft.github.io/SynapseML/docs/features/lightgbm/LightGBM%20-%20Overview/) for more details on setting the parameters of the ML model."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Blob url\n",
							"# Original blob: \"https://recodatasets.z20.web.core.windows.net/random-dataset/PersonalizedData.csv\"\n",
							"url = \"abfss://wwi-02@dataairawdls.dfs.core.windows.net/data/PersonalizedData.csv\"\n",
							"\n",
							"# Data parameters\n",
							"LABEL_COL = \"Rating\"\n",
							"FEATURE_COL = \"features\"\n",
							"RATIO = 0.8\n",
							"SEED = 42\n",
							"\n",
							"# Model parameters\n",
							"OBJECTIVE = \"binary\"\n",
							"BOOSTING = \"gbdt\"\n",
							"NUM_LEAVES = 32\n",
							"NUM_ITERATIONS = 100\n",
							"LEARNING_RATE = 0.1\n",
							"FEATURE_FRACTION = 0.8\n",
							"EARLY_STOPPING_ROUND = 10\n",
							"MODEL_NAME = \"lgb-quickstart\"\n",
							""
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Prepare and analyze data\n",
							"\n",
							"\n",
							"Load the data from the source and observe the schema."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Added the file to linked ADLSv2\n",
							"raw_data = spark.read.csv(url, header=True, inferSchema=True)\n",
							"print(\"Schema: \")\n",
							"# raw_data.printSchema()\n",
							"\n",
							"df = raw_data.toPandas()\n",
							"print(\"Shape: \", df.shape)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"Take a look at some of the items in the dataset. Notice the two-class ratings (0 vs. 1) provided by customers to products.\n",
							"The goal of this exercise is to build a Machine Learning classification model capable of predicting the rating based on Cost, Size, Price, PrimaryBrandId, GenderId, MaritalStatus, LowerIncomeBound, and UpperIncomeBound. To achieve the goal, you will use Azure Machine Learning (AML) automated machine learning (Auto ML)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"display(df.iloc[:10, :])"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check out the statistical properties of the dataset."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.describe()\n",
							""
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Calculate and display the dataset fratures correlation matrix."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# calculate the correlation matrix\n",
							"corr = df.corr()\n",
							"\n",
							"# plot the correlation heatmap\n",
							"fig, ax = plt.subplots(figsize=(10,10))         # Sample figsize in inches\n",
							"\n",
							"sns.heatmap(corr, \n",
							"            xticklabels=corr.columns, \n",
							"            yticklabels=corr.columns, \n",
							"            cmap='RdBu', \n",
							"            vmin=-1, \n",
							"            vmax=1, \n",
							"            ax=ax, \n",
							"            annot=True,\n",
							"            fmt='.2f', \n",
							"            annot_kws={'size': 10})\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Display the paiwise feature correlations as scatterplots."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"#scatterplot\n",
							"sns.set()\n",
							"sns.pairplot(df, height=2.5)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Train the ML model\n",
							"\n",
							"Split the dataset into train and test subsets."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"raw_train, raw_test = raw_data.randomSplit([RATIO, 1 - RATIO], seed=SEED)\n",
							"print(\"Train: (rows, columns) = {}\".format((raw_train.count(), len(raw_train.columns))))\n",
							"print(\"Test: (rows, columns) = {}\".format((raw_test.count(), len(raw_test.columns))))"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Perform feature engineering - transform the original data feature columns into feature vectors."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"columns = raw_data.columns[3:]\n",
							"featurizer = VectorAssembler(inputCols=columns, outputCol=FEATURE_COL)\n",
							"train = featurizer.transform(raw_train)[LABEL_COL, FEATURE_COL]\n",
							"test = featurizer.transform(raw_test)[LABEL_COL, FEATURE_COL]"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check if data is unbalanced."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(train.groupBy(LABEL_COL).count())\n",
							""
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Define the LBGM model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"lgbm = LightGBMClassifier(\n",
							"    labelCol=LABEL_COL,\n",
							"    featuresCol=FEATURE_COL,\n",
							"    objective=OBJECTIVE,\n",
							"    isUnbalance=False,\n",
							"    boostingType=BOOSTING,\n",
							"    boostFromAverage=True,\n",
							"    baggingSeed=SEED,\n",
							"    numLeaves=NUM_LEAVES,\n",
							"    numIterations=NUM_ITERATIONS,\n",
							"    learningRate=LEARNING_RATE,\n",
							"    featureFraction=FEATURE_FRACTION,\n",
							"    earlyStoppingRound=EARLY_STOPPING_ROUND\n",
							")\n",
							""
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Train the LGBM model."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"model = lgbm.fit(train)"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "markdown",
						"source": [
							"Display the relative feature importance as it results from the training process."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"feature_importances = model.getFeatureImportances()\n",
							"fi = pd.Series(feature_importances,index = columns)\n",
							"fi = fi.sort_values(ascending = True)\n",
							"f_index = fi.index\n",
							"f_values = fi.values\n",
							" \n",
							"# print feature importances \n",
							"print ('f_index:',f_index)\n",
							"print ('f_values:',f_values)\n",
							"\n",
							"# plot\n",
							"x_index = list(range(len(fi)))\n",
							"x_index = [x/len(fi) for x in x_index]\n",
							"plt.rcParams['figure.figsize'] = (10,10)\n",
							"plt.barh(x_index,f_values,height = 0.028 ,align=\"center\",color = 'tan',tick_label=f_index)\n",
							"plt.xlabel('importances')\n",
							"plt.ylabel('features')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Perform predictions with the model"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"predictions = model.transform(test)\n",
							""
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"display(predictions.limit(10))"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Evaluate the performance of the model."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"evaluator = (\n",
							"    ComputeModelStatistics()\n",
							"    .setScoredLabelsCol(\"prediction\")\n",
							"    .setLabelCol(LABEL_COL)\n",
							"    .setEvaluationMetric(\"classification\")\n",
							")\n",
							"\n",
							"metrics = evaluator.transform(predictions)"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Observe the main performance metrics of a classification model:\n",
							"\n",
							"- Confision matrix\n",
							"- Accuracy\n",
							"- Precision\n",
							"- Recall\n",
							"- AUC (Area Under the Curve)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(metrics)"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Save the model\n",
							"\n",
							"Save the model to storage."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print(MODEL_NAME)"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# (model\r\n",
							"#  .write()\r\n",
							"#  .overwrite()\r\n",
							"#  .save(MODEL_NAME))"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##"
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_synapse ml')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_machine learning"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6159a2b2-1c11-4796-9491-057f83b3a415"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Install Synapse ML in the Apache Spark session"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"%%configure -f\n",
							"{\n",
							"  \"name\": \"synapseml\",\n",
							"  \"conf\": {\n",
							"      \"spark.jars.packages\": \"com.microsoft.azure:synapseml_2.12:0.10.1\",\n",
							"      \"spark.jars.repositories\": \"https://mmlspark.azureedge.net/maven\",\n",
							"      \"spark.jars.excludes\": \"org.scala-lang:scala-reflect,org.apache.spark:spark-tags_2.12,org.scalactic:scalactic_2.12,org.scalatest:scalatest_2.12,com.fasterxml.jackson.core:jackson-databind\",\n",
							"      \"spark.yarn.user.classpath.first\": \"true\"\n",
							"  }\n",
							"}"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Part 1 - Entity detection with Cognitive Services\n",
							"\n",
							"Detect entities in text using the Cognitive Services entity detector transformer from Synapse ML."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Retrieve the Cognitive Services credentials and create the test dataset."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"key = mssparkutils.credentials.getSecret('azkeyvaultash', 'CognitiveKey')\n",
							"location = 'westus2'\n",
							"\n",
							"df = spark.createDataFrame(data=[\n",
							"        [1, \"Muad'Dib learned rapidly because his first training was in how to learn. And the first lesson of all was the basic trust that he could learn. It's shocking to find how many people do not believe they can learn, and how many more believe learning to be difficult. Muad'Dib knew that every experience carries its lesson.\"],\n",
							"        [2, \"It's the ship that made the Kessel run in less than twelve parsecs. I've outrun Imperial starships. Not the local bulk cruisers, mind you. I'm talking about the big Corellian ships, now. She's fast enough for you, old man.\"]\n",
							"    ], \n",
							"    schema=[\"id\",\"text\"])"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Define the transformer to detect the entities mentioned in text."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from synapse.ml.cognitive import *\n",
							"\n",
							"entity = (EntityDetector()\n",
							"      .setSubscriptionKey(key)\n",
							"      .setLocation(location)\n",
							"      .setLanguage(\"en\")\n",
							"      .setOutputCol(\"entities\")\n",
							"      .setErrorCol(\"error\"))\n",
							"\n",
							"df_entities = entity.transform(df)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check out the entities identified from the first phrase."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(df_entities.head(1)[0].entities[0].entities[0].id)\n",
							"print(df_entities.head(1)[0].entities[0].entities[0].url)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check out the entities identified from the second phrase."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(df_entities.tail(1)[0].entities[0].entities[0].id)\n",
							"print(df_entities.tail(1)[0].entities[0].entities[0].url)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Part 2 - Train a customer recommendation model\n",
							"\n",
							"Use the LightGBM Synapse ML algorithm to train a model for retail product recommendation."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Configure\n",
							"\n",
							"Reference the required libraries and check Synapse ML version (shoudl be 0.9.4)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import logging\n",
							"logging.getLogger(\"py4j\").setLevel(logging.ERROR)\n",
							"\n",
							"import pandas as pd\n",
							"import seaborn as sns\n",
							"from matplotlib import pyplot as plt\n",
							"\n",
							"from pyspark.version import __version__ as pyspark_version\n",
							"\n",
							"from synapse.ml.core import __spark_package_version__\n",
							"from synapse.ml.train import ComputeModelStatistics\n",
							"from synapse.ml.lightgbm import LightGBMClassifier\n",
							"from pyspark.ml.feature import VectorAssembler\n",
							"\n",
							"pd.set_option('display.max_columns', 50)\n",
							"\n",
							"print(f\"PySpark version: {pyspark_version}\")\n",
							"print(f\"SynapseML version: {__spark_package_version__}\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"Set the data preparation and model training parameters. \n",
							"\n",
							"Check the [Synapse ML LightGBM documentation](https://microsoft.github.io/SynapseML/docs/features/lightgbm/LightGBM%20-%20Overview/) for more details on setting the parameters of the ML model."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Blob url\n",
							"# Original blob: \"https://recodatasets.z20.web.core.windows.net/random-dataset/PersonalizedData.csv\"\n",
							"url = \"wasbs://files@synapsemlpublic.blob.core.windows.net/PersonalizedData.csv\"\n",
							"\n",
							"# Data parameters\n",
							"LABEL_COL = \"Rating\"\n",
							"FEATURE_COL = \"features\"\n",
							"RATIO = 0.8\n",
							"SEED = 42\n",
							"\n",
							"# Model parameters\n",
							"OBJECTIVE = \"binary\"\n",
							"BOOSTING = \"gbdt\"\n",
							"NUM_LEAVES = 32\n",
							"NUM_ITERATIONS = 100\n",
							"LEARNING_RATE = 0.1\n",
							"FEATURE_FRACTION = 0.8\n",
							"EARLY_STOPPING_ROUND = 10\n",
							"MODEL_NAME = \"lgb-quickstart\"\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Prepare and analyze data\n",
							"\n",
							"\n",
							"Load the data from the source and observe the schema."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Added the file to linked ADLSv2\n",
							"raw_data = spark.read.csv(url, header=True, inferSchema=True)\n",
							"print(\"Schema: \")\n",
							"# raw_data.printSchema()\n",
							"\n",
							"df = raw_data.toPandas()\n",
							"print(\"Shape: \", df.shape)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"Take a look at some of the items in the dataset. Notice the two-class ratings (0 vs. 1) provided by customers to products.\n",
							"The goal of this exercise is to build a Machine Learning classification model capable of predicting the rating based on Cost, Size, Price, PrimaryBrandId, GenderId, MaritalStatus, LowerIncomeBound, and UpperIncomeBound. To achieve the goal, you will use Azure Machine Learning (AML) automated machine learning (Auto ML)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"display(df.iloc[:10, :])"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check out the statistical properties of the dataset."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.describe()\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Calculate and display the dataset fratures correlation matrix."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# calculate the correlation matrix\n",
							"corr = df.corr()\n",
							"\n",
							"# plot the correlation heatmap\n",
							"fig, ax = plt.subplots(figsize=(10,10))         # Sample figsize in inches\n",
							"\n",
							"sns.heatmap(corr, \n",
							"            xticklabels=corr.columns, \n",
							"            yticklabels=corr.columns, \n",
							"            cmap='RdBu', \n",
							"            vmin=-1, \n",
							"            vmax=1, \n",
							"            ax=ax, \n",
							"            annot=True,\n",
							"            fmt='.2f', \n",
							"            annot_kws={'size': 10})\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Display the paiwise feature correlations as scatterplots."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"#scatterplot\n",
							"sns.set()\n",
							"sns.pairplot(df, height=2.5)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Train the ML model\n",
							"\n",
							"Split the dataset into train and test subsets."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"raw_train, raw_test = raw_data.randomSplit([RATIO, 1 - RATIO], seed=SEED)\n",
							"print(\"Train: (rows, columns) = {}\".format((raw_train.count(), len(raw_train.columns))))\n",
							"print(\"Test: (rows, columns) = {}\".format((raw_test.count(), len(raw_test.columns))))"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Perform feature engineering - transform the original data feature columns into feature vectors."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"columns = raw_data.columns[3:]\n",
							"featurizer = VectorAssembler(inputCols=columns, outputCol=FEATURE_COL)\n",
							"train = featurizer.transform(raw_train)[LABEL_COL, FEATURE_COL]\n",
							"test = featurizer.transform(raw_test)[LABEL_COL, FEATURE_COL]"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check if data is unbalanced."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(train.groupBy(LABEL_COL).count())\n",
							""
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Define the LBGM model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"lgbm = LightGBMClassifier(\n",
							"    labelCol=LABEL_COL,\n",
							"    featuresCol=FEATURE_COL,\n",
							"    objective=OBJECTIVE,\n",
							"    isUnbalance=False,\n",
							"    boostingType=BOOSTING,\n",
							"    boostFromAverage=True,\n",
							"    baggingSeed=SEED,\n",
							"    numLeaves=NUM_LEAVES,\n",
							"    numIterations=NUM_ITERATIONS,\n",
							"    learningRate=LEARNING_RATE,\n",
							"    featureFraction=FEATURE_FRACTION,\n",
							"    earlyStoppingRound=EARLY_STOPPING_ROUND\n",
							")\n",
							""
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Train the LGBM model."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"model = lgbm.fit(train)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"source": [
							"Display the relative feature importance as it results from the training process."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"feature_importances = model.getFeatureImportances()\n",
							"fi = pd.Series(feature_importances,index = columns)\n",
							"fi = fi.sort_values(ascending = True)\n",
							"f_index = fi.index\n",
							"f_values = fi.values\n",
							" \n",
							"# print feature importances \n",
							"print ('f_index:',f_index)\n",
							"print ('f_values:',f_values)\n",
							"\n",
							"# plot\n",
							"x_index = list(range(len(fi)))\n",
							"x_index = [x/len(fi) for x in x_index]\n",
							"plt.rcParams['figure.figsize'] = (10,10)\n",
							"plt.barh(x_index,f_values,height = 0.028 ,align=\"center\",color = 'tan',tick_label=f_index)\n",
							"plt.xlabel('importances')\n",
							"plt.ylabel('features')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Perform predictions with the model"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"predictions = model.transform(test)\n",
							""
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"display(predictions.limit(10))"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Evaluate the performance of the model."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"evaluator = (\n",
							"    ComputeModelStatistics()\n",
							"    .setScoredLabelsCol(\"prediction\")\n",
							"    .setLabelCol(LABEL_COL)\n",
							"    .setEvaluationMetric(\"classification\")\n",
							")\n",
							"\n",
							"metrics = evaluator.transform(predictions)"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Observe the main performance metrics of a classification model:\n",
							"\n",
							"- Confision matrix\n",
							"- Accuracy\n",
							"- Precision\n",
							"- Recall\n",
							"- AUC (Area Under the Curve)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(metrics)"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Save the model\n",
							"\n",
							"Save the model to storage."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print(MODEL_NAME)"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# (model\r\n",
							"#  .write()\r\n",
							"#  .overwrite()\r\n",
							"#  .save(MODEL_NAME))"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##"
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_automated machine learning')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_machine learning"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataai24spk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "89275d74-5da9-43ae-8f6e-713d71a20860"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"f8355226-2dff-40b9-a035-ad27bc8b837f": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "84fa61f6",
												"1": "84fdf5e6",
												"2": "1",
												"3": "1007.3703002929688",
												"4": "100.96379852294922",
												"5": "1504.023193359375",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.890625",
												"10": "199993.296875"
											},
											{
												"0": "84fa61f7",
												"1": "84fdf5e7",
												"2": "1",
												"3": "1009.0166015625",
												"4": "96.59175109863281",
												"5": "1518.798583984375",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100003.6171875",
												"10": "199996.4375"
											},
											{
												"0": "84fa61f8",
												"1": "84fdf5e8",
												"2": "1",
												"3": "1017.6356811523438",
												"4": "101.38067626953125",
												"5": "1501.3118896484375",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.046875",
												"10": "199989.203125"
											},
											{
												"0": "84fa61f9",
												"1": "84fdf5e9",
												"2": "1",
												"3": "1016.6712036132812",
												"4": "79.58174896240234",
												"5": "1508.1148681640625",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.765625",
												"10": "199992.015625"
											},
											{
												"0": "84fa61fa",
												"1": "84fdf5ea",
												"2": "0",
												"3": "1013.7909545898438",
												"4": "91.3399658203125",
												"5": "1517.5457763671875",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100005.9765625",
												"10": "199996.421875"
											},
											{
												"0": "84fa61fb",
												"1": "84fdf5eb",
												"2": "0",
												"3": "1006.5798950195312",
												"4": "115.14108276367188",
												"5": "1502.546142578125",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.8046875",
												"10": "199993.953125"
											},
											{
												"0": "84fa61fc",
												"1": "84fdf5ec",
												"2": "1",
												"3": "1000.513671875",
												"4": "80.51395416259766",
												"5": "1497.9178466796875",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.921875",
												"10": "200000.390625"
											},
											{
												"0": "84fa61fd",
												"1": "84fdf5ed",
												"2": "0",
												"3": "1003.7581787109375",
												"4": "105.46640014648438",
												"5": "1519.8564453125",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.6796875",
												"10": "199995.8125"
											},
											{
												"0": "84fa61fe",
												"1": "84fdf5ee",
												"2": "1",
												"3": "1010.874267578125",
												"4": "82.88154602050781",
												"5": "1496.1632080078125",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.8828125",
												"10": "199993.9375"
											},
											{
												"0": "84fa61ff",
												"1": "84fdf5ef",
												"2": "1",
												"3": "1006.5953369140625",
												"4": "117.9262466430664",
												"5": "1490.3739013671875",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.4296875",
												"10": "199990.921875"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "CustomerId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "string"
											},
											{
												"key": "2",
												"name": "Rating",
												"type": "string"
											},
											{
												"key": "3",
												"name": "Cost",
												"type": "string"
											},
											{
												"key": "4",
												"name": "Size",
												"type": "string"
											},
											{
												"key": "5",
												"name": "Price",
												"type": "string"
											},
											{
												"key": "6",
												"name": "PrimaryBrandId",
												"type": "string"
											},
											{
												"key": "7",
												"name": "GenderId",
												"type": "string"
											},
											{
												"key": "8",
												"name": "MaritalStatus",
												"type": "string"
											},
											{
												"key": "9",
												"name": "LowerIncomeBound",
												"type": "string"
											},
											{
												"key": "10",
												"name": "UpperIncomeBound",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataai24spk",
						"name": "dataai24spk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataai24spk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Analyze and prepare the customer ratings dataset\n",
							"\n",
							"Use `spark.read.csv()` to load the data from the source public blob storage account and display its schema and shape."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.types import *\r\n",
							"import numpy as np\r\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"manualSchema = StructType([\r\n",
							"  StructField(\"CustomerId\", StringType(), True),\r\n",
							"  StructField(\"ProductId\", StringType(), True),\r\n",
							"  StructField(\"Rating\", LongType(), True),\r\n",
							"  StructField(\"Cost\", FloatType(), True),\r\n",
							"  StructField(\"Size\", FloatType(), True),\r\n",
							"  StructField(\"Price\", FloatType(), True),\r\n",
							"  StructField(\"PrimaryBrandId\", LongType(), True),\r\n",
							"  StructField(\"GenderId\", LongType(), True),\r\n",
							"  StructField(\"MaritalStatus\", LongType(), True),\r\n",
							"  StructField(\"LowerIncomeBound\", FloatType(), True),\r\n",
							"  StructField(\"UpperIncomeBound\", FloatType(), True)\r\n",
							"])"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# url = \"wasbs://files@synapsemlpublic.blob.core.windows.net/PersonalizedData.csv\"\n",
							"# raw_data = spark.read.csv(url, header=True, schema=manualSchema)\n",
							"# print(\"Schema: \")\n",
							"# raw_data.printSchema()\n",
							"\n",
							"# df = raw_data.toPandas()\n",
							"# print(\"Shape: \", df.shape)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url = \"abfss://wwi-02@dataairawdls.dfs.core.windows.net/data/PersonalizedData.csv\"\r\n",
							"raw_data = spark.read.csv(url, header=True, schema=manualSchema)\r\n",
							"print(\"Schema: \")\r\n",
							"raw_data.printSchema()\r\n",
							"\r\n",
							"df = raw_data.toPandas()\r\n",
							"print(\"Shape: \", df.shape)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Take a look at some of the items in the dataset. Notice the two-class ratings (0 vs. 1) provided by customers to products.\n",
							"\n",
							"The goal of this exercise is to build a Machine Learning classification model capable of predicting the rating based on Cost, Size, Price, PrimaryBrandId, GenderId, MaritalStatus, LowerIncomeBound, and UpperIncomeBound. To achieve the goal, you will use Azure Machine Learning (AML) automated machine learning (Auto ML)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"display(df.iloc[:10, :])"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Split the data into the train and test parts using a ratio of 80% train to 20% test.\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"split_ratio = 0.8\n",
							"seed = 42\n",
							"raw_train, raw_test = raw_data.randomSplit([split_ratio, 1 - split_ratio], seed=seed)\n",
							"print(\"Train: (rows, columns) = {}\".format((raw_train.count(), len(raw_train.columns))))\n",
							"print(\"Test: (rows, columns) = {}\".format((raw_test.count(), len(raw_test.columns))))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Use the subscription id, resource group name, AML workspace name, and AML workspace region from your environment to connect to the AML workspace. Make sure the values are identical to the ones displayed in the Azure portal."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# from notebookutils.mssparkutils import azureML\r\n",
							"\r\n",
							"# # getWorkspace() takes the linked service name,\r\n",
							"# # not the Azure Machine Learning workspace name.\r\n",
							"# ws = azureML.getWorkspace(\"dataaimlwks\")\r\n",
							"\r\n",
							"# print(ws.name)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from azureml.core import Workspace, Experiment\n",
							"\n",
							"# Enter your workspace subscription, resource group, name, and region.\n",
							"subscription_id = \"e2171f6d-2650-45e6-af7e-6d6e44ca92b1\"\n",
							"resource_group = \"dataai\"\n",
							"workspace_name = \"dataaimlwks\"\n",
							"workspace_region = \"southcentralus\"\n",
							"\n",
							"ws = Workspace(workspace_name = workspace_name,\n",
							"               subscription_id = subscription_id,\n",
							"               resource_group = resource_group)\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"experiment_name = \"aml-synapse-classification\"\r\n",
							"experiment = Experiment(ws, experiment_name)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Persist the train and test datasets as CSV files and upload them to the AML data store.\n",
							"\n",
							"Load the train dataset as an AML tabular dataset (this format is used by the AutoML run)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas \n",
							"from azureml.core import Dataset\n",
							"\n",
							"# Get the Azure Machine Learning default datastore\n",
							"datastore = ws.get_default_datastore()\n",
							"\n",
							"train_pd = raw_train.toPandas()\n",
							"train_pd[train_pd.columns[2:]].to_csv('train.csv', index=False)\n",
							"test_pd = raw_test.toPandas()\n",
							"test_pd[test_pd.columns[2:]].to_csv('test.csv', index=False)\n",
							"\n",
							"# Convert into an Azure Machine Learning tabular dataset\n",
							"datastore.upload_files(files = ['train.csv', 'test.csv'],\n",
							"                       target_path = 'train-dataset/tabular/',\n",
							"                       overwrite = True,\n",
							"                       show_progress = True)\n",
							"ds_train = Dataset.Tabular.from_delimited_files(path = [(datastore, 'train-dataset/tabular/train.csv')])"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Use AML Auto ML to train the classification model"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Configure the AutoML run to use at most 20 iterations (combinations of ML algorithms and hyper-parameter values). This limitation will ensure the AutoML run will not exceed a total run time of 7-8 minutes.\n",
							"\n",
							"The `enable_onnx_compatible_models` ensures the run produces a model that is ONNX compatible. This will make the model available for inference directly on dedicated SQL pool tables, via the AML linked service configured in Synapse."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"import logging\n",
							"\n",
							"automl_settings = {\n",
							"    \"iterations\": 20,\n",
							"    \"iteration_timeout_minutes\": 5,\n",
							"    \"experiment_timeout_minutes\": 15,\n",
							"    \"max_concurrent_iterations\": 2,\n",
							"    \"enable_early_stopping\": True,\n",
							"    \"enable_onnx_compatible_models\": True,\n",
							"    \"primary_metric\": 'accuracy',\n",
							"    \"featurization\": 'auto',\n",
							"    \"verbosity\": logging.INFO,\n",
							"    \"n_cross_validations\": 2}"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Finalize the configuration of the AutoML run. Specify the task type (`classification`), the data to train on, and the compute resource to use. In this case, `spark_context = sc` specifies that the AutoML run will use the local Spark pool as the compute resource to run the entire process. \n",
							"The AML workspace is still coordinating the whole process, but the compute being used is local."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from azureml.train.automl import AutoMLConfig\n",
							"\n",
							"automl_config = AutoMLConfig(task='classification',\n",
							"                             debug_log='automated_ml_errors.log',\n",
							"                             training_data = ds_train,\n",
							"                             spark_context = sc,\n",
							"                             model_explainability = True, \n",
							"                             label_column_name =\"Rating\",**automl_settings)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Submit the AutoML run and wait for its completion. The settings were chosen in a way that the total run time should not exceed 7-8 minutes. While the experiment is running, go ahead and open the Azure Machine Learning Studio in the Azure portal and check out the details of the AutoML run.\n",
							"\n",
							"Once the run completes, check the list of trained models and their performance metric (`accuracy` in our case)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from azureml.core.experiment import Experiment\n",
							"\n",
							"# Start an experiment in Azure Machine Learning\n",
							"tags = {\"Synapse\": \"classification\"}\n",
							"local_run = experiment.submit(automl_config, tags = tags)\n",
							"local_run.wait_for_completion(show_output=True)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Register the best model in the AML workspace"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Retrieve the best model and its associated child run from the AutoML run. Retrieve all the files associated with the child run and inspect its properties."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Get best model\n",
							"best_run, fitted_model = local_run.get_output()\n",
							"best_run.download_files(output_directory='./best_run')\n",
							"best_run.properties"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Use MLFlow to define the signature of the model and inspect it.\n",
							"\n",
							"The signature will be later used to generate the MLFlow model file. This file is important because it is used by the UI for the integration of the AML experience in Synapse Studio."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import mlflow\n",
							"from mlflow.types import DataType, ColSpec, TensorSpec, Schema\n",
							"from mlflow.models import ModelSignature\n",
							"\n",
							"model_signature = ModelSignature(\n",
							"    Schema([\n",
							"        ColSpec(DataType.float, 'Cost'),\n",
							"        ColSpec(DataType.float, 'Size'),\n",
							"        ColSpec(DataType.float, 'Price'),\n",
							"        ColSpec(DataType.long, 'PrimaryBrandId'),\n",
							"        ColSpec(DataType.long, 'GenderId'),\n",
							"        ColSpec(DataType.long, 'MaritalStatus'),\n",
							"        ColSpec(DataType.float, 'LowerIncomeBound'),\n",
							"        ColSpec(DataType.float, 'UpperIncomeBound')\n",
							"    ]),\n",
							"    Schema([\n",
							"        ColSpec(DataType.long, 'label_out')\n",
							"    ])\n",
							")\n",
							"\n",
							"model_signature"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Use MLFlow to register the model into the AML model registry.\n",
							"\n",
							"Using MLFlow instead of the standard model registration feature of the AML SDK ensures that all requirements are met for an optimal experience in the UI (when using the integration of AML into Synapse Studio).\n",
							"\n",
							"Note how we are registering the ONNX version of the best model (the user experience integration of AML into Synapse Studio only supports ONNX models)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import onnx\n",
							"\n",
							"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\n",
							"mlflow.set_experiment(experiment_name)\n",
							"artifact_path = 'outputs'\n",
							"\n",
							"xmodel = onnx.load('./best_run/outputs/model.onnx')\n",
							"\n",
							"with mlflow.start_run() as run:\n",
							"    # Save the model to the outputs directory for capture\n",
							"    mlflow.onnx.log_model(xmodel, artifact_path, signature=model_signature)\n",
							"    # Register the model to AML model registry\n",
							"    mlflow.register_model(\"runs:/\" + run.info.run_id + \"/\" + artifact_path, \"aml-synapse-classifier\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Persist test data to the dedicated SQL pool\n",
							"\n",
							"Create a temporary view in PySpark on top of the `raw_test` dataset. This is required to allow the `synapsesql` extension in Scala to read the data that will be persisted into a dedicated Synapse SQL pool."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"raw_test.createOrReplaceTempView(\"TestData\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Persist the data to the dedicated SQL pool using `synapsesql`."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"microsoft": {
								"language": "scala"
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%%spark\n",
							"\n",
							"import com.microsoft.spark.sqlanalytics.utils.Constants\n",
							"\n",
							"val df = spark.sqlContext.sql(\"select * from TestData\")\n",
							"\n",
							"// df.write.synapsesql(\"azsynapsedw.wwi_ml.CustomerTest\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_automl with spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_machine learning"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataai24spk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "cf69a78a-31c6-442a-926b-918f236a1c76"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataai24spk",
						"name": "dataai24spk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataai24spk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Analyze and prepare the customer ratings dataset\n",
							"\n",
							"Use `spark.read.csv()` to load the data from the source public blob storage account and display its schema and shape."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.types import *\n",
							"import numpy as np\n",
							"import pandas as pd\n",
							"\n",
							"manualSchema = StructType([\n",
							"  StructField(\"CustomerId\", StringType(), True),\n",
							"  StructField(\"ProductId\", StringType(), True),\n",
							"  StructField(\"Rating\", LongType(), True),\n",
							"  StructField(\"Cost\", FloatType(), True),\n",
							"  StructField(\"Size\", FloatType(), True),\n",
							"  StructField(\"Price\", FloatType(), True),\n",
							"  StructField(\"PrimaryBrandId\", LongType(), True),\n",
							"  StructField(\"GenderId\", LongType(), True),\n",
							"  StructField(\"MaritalStatus\", LongType(), True),\n",
							"  StructField(\"LowerIncomeBound\", FloatType(), True),\n",
							"  StructField(\"UpperIncomeBound\", FloatType(), True)\n",
							"])\n",
							"\n",
							"url = \"wasbs://files@synapsemlpublic.blob.core.windows.net/PersonalizedData.csv\"\n",
							"raw_data = spark.read.csv(url, header=True, schema=manualSchema)\n",
							"print(\"Schema: \")\n",
							"raw_data.printSchema()\n",
							"\n",
							"df = raw_data.toPandas()\n",
							"print(\"Shape: \", df.shape)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Take a look at some of the items in the dataset. Notice the two-class ratings (0 vs. 1) provided by customers to products.\n",
							"\n",
							"The goal of this exercise is to build a Machine Learning classification model capable of predicting the rating based on Cost, Size, Price, PrimaryBrandId, GenderId, MaritalStatus, LowerIncomeBound, and UpperIncomeBound. To achieve the goal, you will use Azure Machine Learning (AML) automated machine learning (Auto ML)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"display(df.iloc[:10, :])"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Split the data into the train and test parts using a ratio of 80% train to 20% test.\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"split_ratio = 0.8\n",
							"seed = 42\n",
							"raw_train, raw_test = raw_data.randomSplit([split_ratio, 1 - split_ratio], seed=seed)\n",
							"print(\"Train: (rows, columns) = {}\".format((raw_train.count(), len(raw_train.columns))))\n",
							"print(\"Test: (rows, columns) = {}\".format((raw_test.count(), len(raw_test.columns))))"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Use the subscription id, resource group name, AML workspace name, and AML workspace region from your environment to connect to the AML workspace. Make sure the values are identical to the ones displayed in the Azure portal."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from azureml.core import Workspace, Experiment\n",
							"\n",
							"# Enter your workspace subscription, resource group, name, and region.\n",
							"subscription_id = \"afa061ef-5d63-4e4f-99a7-b5027ec38eba\"\n",
							"resource_group = \"dataaie2e\"\n",
							"workspace_name = \"azmlwksash\"\n",
							"workspace_region = \"westus2\"\n",
							"\n",
							"ws = Workspace(workspace_name = workspace_name,\n",
							"               subscription_id = subscription_id,\n",
							"               resource_group = resource_group)\n",
							"\n",
							"experiment_name = \"aml-synapse-classification\"\n",
							"experiment = Experiment(ws, experiment_name)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Persist the train and test datasets as CSV files and upload them to the AML data store.\n",
							"\n",
							"Load the train dataset as an AML tabular dataset (this format is used by the AutoML run)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas \n",
							"from azureml.core import Dataset\n",
							"\n",
							"# Get the Azure Machine Learning default datastore\n",
							"datastore = ws.get_default_datastore()\n",
							"\n",
							"train_pd = raw_train.toPandas()\n",
							"train_pd[train_pd.columns[2:]].to_csv('train.csv', index=False)\n",
							"test_pd = raw_test.toPandas()\n",
							"test_pd[test_pd.columns[2:]].to_csv('test.csv', index=False)\n",
							"\n",
							"# Convert into an Azure Machine Learning tabular dataset\n",
							"datastore.upload_files(files = ['train.csv', 'test.csv'],\n",
							"                       target_path = 'train-dataset/tabular/',\n",
							"                       overwrite = True,\n",
							"                       show_progress = True)\n",
							"ds_train = Dataset.Tabular.from_delimited_files(path = [(datastore, 'train-dataset/tabular/train.csv')])"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Use AML Auto ML to train the classification model"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Configure the AutoML run to use at most 20 iterations (combinations of ML algorithms and hyper-parameter values). This limitation will ensure the AutoML run will not exceed a total run time of 7-8 minutes.\n",
							"\n",
							"The `enable_onnx_compatible_models` ensures the run produces a model that is ONNX compatible. This will make the model available for inference directly on dedicated SQL pool tables, via the AML linked service configured in Synapse."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"import logging\n",
							"\n",
							"automl_settings = {\n",
							"    \"iterations\": 20,\n",
							"    \"iteration_timeout_minutes\": 5,\n",
							"    \"experiment_timeout_minutes\": 15,\n",
							"    \"max_concurrent_iterations\": 2,\n",
							"    \"enable_early_stopping\": True,\n",
							"    \"enable_onnx_compatible_models\": True,\n",
							"    \"primary_metric\": 'accuracy',\n",
							"    \"featurization\": 'auto',\n",
							"    \"verbosity\": logging.INFO,\n",
							"    \"n_cross_validations\": 2}"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Finalize the configuration of the AutoML run. Specify the task type (`classification`), the data to train on, and the compute resource to use. In this case, `spark_context = sc` specifies that the AutoML run will use the local Spark pool as the compute resource to run the entire process. \n",
							"The AML workspace is still coordinating the whole process, but the compute being used is local."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from azureml.train.automl import AutoMLConfig\n",
							"\n",
							"automl_config = AutoMLConfig(task='classification',\n",
							"                             debug_log='automated_ml_errors.log',\n",
							"                             training_data = ds_train,\n",
							"                             spark_context = sc,\n",
							"                             model_explainability = True, \n",
							"                             label_column_name =\"Rating\",**automl_settings)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Submit the AutoML run and wait for its completion. The settings were chosen in a way that the total run time should not exceed 7-8 minutes. While the experiment is running, go ahead and open the Azure Machine Learning Studio in the Azure portal and check out the details of the AutoML run.\n",
							"\n",
							"Once the run completes, check the list of trained models and their performance metric (`accuracy` in our case)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from azureml.core.experiment import Experiment\n",
							"\n",
							"# Start an experiment in Azure Machine Learning\n",
							"tags = {\"Synapse\": \"classification\"}\n",
							"local_run = experiment.submit(automl_config, tags = tags)\n",
							"local_run.wait_for_completion(show_output=True)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Register the best model in the AML workspace"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Retrieve the best model and its associated child run from the AutoML run. Retrieve all the files associated with the child run and inspect its properties."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Get best model\n",
							"best_run, fitted_model = local_run.get_output()\n",
							"best_run.download_files(output_directory='./best_run')\n",
							"best_run.properties"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Use MLFlow to define the signature of the model and inspect it.\n",
							"\n",
							"The signature will be later used to generate the MLFlow model file. This file is important because it is used by the UI for the integration of the AML experience in Synapse Studio."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import mlflow\n",
							"from mlflow.types import DataType, ColSpec, TensorSpec, Schema\n",
							"from mlflow.models import ModelSignature\n",
							"\n",
							"model_signature = ModelSignature(\n",
							"    Schema([\n",
							"        ColSpec(DataType.float, 'Cost'),\n",
							"        ColSpec(DataType.float, 'Size'),\n",
							"        ColSpec(DataType.float, 'Price'),\n",
							"        ColSpec(DataType.long, 'PrimaryBrandId'),\n",
							"        ColSpec(DataType.long, 'GenderId'),\n",
							"        ColSpec(DataType.long, 'MaritalStatus'),\n",
							"        ColSpec(DataType.float, 'LowerIncomeBound'),\n",
							"        ColSpec(DataType.float, 'UpperIncomeBound')\n",
							"    ]),\n",
							"    Schema([\n",
							"        ColSpec(DataType.long, 'label_out')\n",
							"    ])\n",
							")\n",
							"\n",
							"model_signature"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Use MLFlow to register the model into the AML model registry.\n",
							"\n",
							"Using MLFlow instead of the standard model registration feature of the AML SDK ensures that all requirements are met for an optimal experience in the UI (when using the integration of AML into Synapse Studio).\n",
							"\n",
							"Note how we are registering the ONNX version of the best model (the user experience integration of AML into Synapse Studio only supports ONNX models)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import onnx\n",
							"\n",
							"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\n",
							"mlflow.set_experiment(experiment_name)\n",
							"artifact_path = 'outputs'\n",
							"\n",
							"xmodel = onnx.load('./best_run/outputs/model.onnx')\n",
							"\n",
							"with mlflow.start_run() as run:\n",
							"    # Save the model to the outputs directory for capture\n",
							"    mlflow.onnx.log_model(xmodel, artifact_path, signature=model_signature)\n",
							"    # Register the model to AML model registry\n",
							"    mlflow.register_model(\"runs:/\" + run.info.run_id + \"/\" + artifact_path, \"aml-synapse-classifier\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Persist test data to the dedicated SQL pool\n",
							"\n",
							"Create a temporary view in PySpark on top of the `raw_test` dataset. This is required to allow the `synapsesql` extension in Scala to read the data that will be persisted into a dedicated Synapse SQL pool."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"raw_test.createOrReplaceTempView(\"TestData\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Persist the data to the dedicated SQL pool using `synapsesql`."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"microsoft": {
								"language": "scala"
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%%spark\n",
							"\n",
							"import com.microsoft.spark.sqlanalytics.utils.Constants\n",
							"\n",
							"val df = spark.sqlContext.sql(\"select * from TestData\")\n",
							"\n",
							"// df.write.synapsesql(\"azsynapsedw.wwi_ml.CustomerTest\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_gdelt based esg')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ee3fb5ff-a33c-45b3-b6e2-cc534fd7029a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"//\r\n",
							"// Original Demo code used from \r\n",
							"//  https://databricks.com/blog/2020/07/10/a-data-driven-approach-to-environmental-social-and-governance.html\r\n",
							"//\r\n",
							"// modified for simple ESG calculation and converted to Synapse notebook by Mark Leischner 2021-02-10\r\n",
							"//\r\n",
							"// NOTE: the databricks concept of rwa,silver,gold is used here.  Could be modified for more efficient file handling\r\n",
							"//\r\n",
							"// Demo uses Jan 2021 files already downloaded GDELT files\r\n",
							"//     production version could download the updated files from GDELT project which are updated every 15 minutes\r\n",
							"//\r\n",
							"//  From GDELT data defintion\r\n",
							"//     Tone.  This is the average “tone” of all documents containing one or more mentions of thisnameset.    \r\n",
							"//            The  score  ranges  from -100  (extremely  negative)  to  +100  (extremely positive).  \r\n",
							"//            Common values range between -10 and +10, with 0 indicating neutral.  This is calculated  as \r\n",
							"//            Positive  Score  minus  Negative  Score.    Note  that  both  Positive  Score  and Negative  Score \r\n",
							"//            are available  separately  below  as  well.    A  document  with  a  Tone  score close to zero may either\r\n",
							"//            have low emotional response or may have a Positive Score and Negative  Score  that  are  roughly  equivalent  \r\n",
							"//            to  each  other,  such  that  they  nullify  each other.    These  situations  can  be  detected  either  through\r\n",
							"//            looking  directly  at the Positive Score and Negative Scorevariablesor through the Polarity variable.\r\n",
							"//\r\n",
							"// Further Notes:\r\n",
							"// The ESG score created in this demo code employs a simple average calculation over the GDELT input data csv files.\r\n",
							"//   The GDELT files take news articles and creates a theme for each article and a tone for the article.  \r\n",
							"//   Usual tone scores range is from -10 to 10, with 0 being neutral, above 0 a positive, and below 0 a negative.\r\n",
							"//   The final result score file contains Ticker, ESGType, ESGScore.  Each ticker can have up to three scores, \r\n",
							"//   one for E - Economy, S - Social, and G - Corporate Governance.   \r\n",
							"//\r\n",
							"// Future development options are to split up the information into more specifc category buckets and \r\n",
							"//   give weights to each bucket.  With these numbers and weights, you could generate an overall ESG score per company.\r\n",
							"//\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import org.apache.spark.sql.types._\r\n",
							"import org.apache.spark.sql.functions._\r\n",
							"\r\n",
							"val schemadf1 = (new StructType()).add(\"globalEventID\",StringType,true).add(\"pDate\",StringType).add(\"_c02\",StringType).add(\"_c03\",StringType).add(\"documentIdentifier\",StringType).add(\"_c05\",StringType).add(\"_c06\",StringType).add(\"themesStr\",StringType).add(\"_c08\",StringType).add(\"_c09\",StringType).add(\"_c10\",StringType).add(\"_c11\",StringType).add(\"_c12\",StringType).add(\"organisationsStr\",StringType).add(\"_c14\",StringType).add(\"tones\",StringType).add(\"_c16\",StringType).add(\"_c17\",StringType).add(\"_c18\",StringType).add(\"_c19\",StringType).add(\"_c20\",StringType).add(\"_c21\",StringType).add(\"_c22\",StringType).add(\"_c23\",StringType).add(\"_c24\",StringType).add(\"_c25\",StringType).add(\"_c26\",StringType)\r\n",
							"\r\n",
							"val df1 = spark.read.format(\"csv\").options(Map(\"delimiter\"->\"\\t\")).schema(schemadf1).load(\"abfss://risk@marketriskdl.dfs.core.windows.net/GDELT/2021/01/*.csv\")\r\n",
							"\r\n",
							"val gdf1 = df1.select(\r\n",
							"  col(\"globalEventID\"), \r\n",
							"  (substring(col(\"pDate\"), 0, 8)).as(\"publishDate\"),\r\n",
							"  col(\"_c02\"), col(\"_c03\"),\r\n",
							"  col(\"documentIdentifier\"),\r\n",
							"  col(\"_c05\"), col(\"_c06\"),\r\n",
							"  split(col(\"themesStr\"),\";\").as(\"themesStr\").as(\"themes\"),\r\n",
							"  col(\"_c08\"), col(\"_c09\"), col(\"_c10\"), col(\"_c11\"), col(\"_c12\"),\r\n",
							"  split(col(\"organisationsStr\"),\";\").as(\"organisations\"),\r\n",
							"  col(\"_c14\"),\r\n",
							"  substring_index(col(\"tones\"), \",\", 1).as(\"tone\"),\r\n",
							"  col(\"_c16\"), col(\"_c17\"), col(\"_c18\"), col(\"_c19\"), col(\"_c20\"), col(\"_c21\"), col(\"_c22\"), col(\"_c23\"), col(\"_c24\"), col(\"_c25\"), col(\"_c26\"))\r\n",
							"\r\n",
							"//gdf1.show()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val gdf2 = df1.select(\r\n",
							"  col(\"globalEventID\"), \r\n",
							"  (substring(col(\"pDate\"), 0, 8)).as(\"publishDate\"),\r\n",
							"  col(\"documentIdentifier\"),\r\n",
							"  col(\"themesStr\"),\r\n",
							"  col(\"organisationsStr\"),\r\n",
							"  substring_index(col(\"tones\"), \",\", 1).as(\"tone\")\r\n",
							"  )\r\n",
							"\r\n",
							"val gdfECON = gdf2.withColumn(\"containsECON\", col(\"themesStr\").rlike(\"ECON_\"))\r\n",
							"val gdfENV = gdfECON.withColumn(\"containsENV\", col(\"themesStr\").rlike(\"ENV_\"))\r\n",
							"val gdfUNGP = gdfENV.withColumn(\"containsUNGP\", col(\"themesStr\").rlike(\"UNGP_\"))\r\n",
							"\r\n",
							"//gdfUNGP.show()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"gdfUNGP.repartition(1).write.mode(\"overwrite\").format(\"csv\").option(\"header\", \"true\").csv(\"abfss://risk@marketriskdl.dfs.core.windows.net/GDELT/mydb/gdelt.csv\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val gdelt_silver_df = (gdfUNGP.select(\r\n",
							"  col(\"globalEventID\"), \r\n",
							"  col(\"publishDate\"),\r\n",
							"  col(\"documentIdentifier\").as(\"url\"),\r\n",
							"  expr(\"case when containsECON then 'ECON' when containsENV then 'ENV' when containsUNGP then 'UNGP' else 'OTHER' end\").as(\"theme\"),\r\n",
							"  col(\"organisationsStr\").as(\"organisations\"),\r\n",
							"  col(\"tone\")\r\n",
							"  )).filter(\"theme not like 'OTHER'\")\r\n",
							"\r\n",
							"//gdelt_silver_df.show()\r\n",
							"\r\n",
							"gdelt_silver_df.repartition(1).write.mode(\"overwrite\").format(\"csv\").option(\"header\", \"true\").csv(\"abfss://risk@marketriskdl.dfs.core.windows.net/GDELT/mydb/gdelt_silver.csv\")\r\n",
							"\r\n",
							"gdelt_silver_df.createOrReplaceTempView(\"gdelt_silver\");\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import org.apache.spark.sql.types._\r\n",
							"import org.apache.spark.sql.functions._\r\n",
							"\r\n",
							"val schemaport = (new StructType()).add(\"Ticker\",StringType).add(\"TickerName\",StringType)\r\n",
							"\r\n",
							"val portfoliodf = spark.read.format(\"csv\").options(Map(\"delimiter\"->\",\")).schema(schemaport).load(\"abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioName.csv\")\r\n",
							"\r\n",
							"//portfoliodf.show()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val tlist = portfoliodf.select(\"TickerName\").map(r => r.getString(0)).collect().toList\r\n",
							"\r\n",
							"for (tname <- tlist) {\r\n",
							"\r\n",
							"     val tempdf = gdelt_silver_df.select( \r\n",
							"     col(\"globalEventID\"), \r\n",
							"     col(\"publishDate\"),\r\n",
							"     col(\"url\"),\r\n",
							"     col(\"theme\"),\r\n",
							"     lit(tname.toLowerCase()).as(\"organisation\"),\r\n",
							"     col(\"tone\")\r\n",
							"     ).filter(\"organisations like '%\" + tname.toLowerCase() + \"%'\")\r\n",
							"\r\n",
							"    tempdf.repartition(1).write.mode(\"overwrite\").format(\"csv\").option(\"header\", \"true\").csv(\"abfss://risk@marketriskdl.dfs.core.windows.net/GDELT/mydb/myportfolio/\" + tname + \"/gdelt_gold.csv\")\r\n",
							"\r\n",
							"   }"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql import functions as F\r\n",
							"from pyspark.sql import types \r\n",
							"\r\n",
							"esg_gold = spark.read.option(\"header\", \"true\").format(\"csv\").load(\"abfss://risk@marketriskdl.dfs.core.windows.net/GDELT/mydb/myportfolio/*/gdelt_gold.csv/*.csv\").groupBy(\"organisation\",\"theme\").agg( F.sum(\"tone\").alias(\"tone\"), F.count(\"tone\").alias(\"total\") ).select(\"theme\", \"organisation\", \"tone\", \"total\").withColumn(\"avg\", F.col(\"tone\")/F.col(\"total\"))\r\n",
							"\r\n",
							"esg_gold.repartition(1).write.mode(\"overwrite\").format(\"csv\").option(\"header\", \"true\").csv(\"abfss://risk@marketriskdl.dfs.core.windows.net/GDELT/mydb/gdelt_gold_avg.csv\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val esg_scores = (spark.read.option(\"header\", \"true\").format(\"csv\").load(\"abfss://risk@marketriskdl.dfs.core.windows.net/GDELT/mydb/gdelt_gold_avg.csv/*.csv\")).withcolumn(\"TickerName\", col(\"oragnisation\"))\r\n",
							"\r\n",
							"val esg_results = portfoliodf.join(esg_scores, \"TickerName\").withColumn(\"ESGType\", when(col(\"theme\") === \"ECON\", \"E\").when(col(\"theme\") === \"ENV\", \"S\").when(col(\"theme\") === \"UNGP\", \"G\")  ).withColumn(\"ESGScore\",col(\"avg\")).select(\"Ticker\", \"ESGType\", \"ESGScore\")\r\n",
							"\r\n",
							"esg_results.repartition(1).write.mode(\"overwrite\").format(\"csv\").option(\"header\", \"true\").csv(\"abfss://risk@marketriskdl.dfs.core.windows.net/GDELT/mydb/gdelt_results.csv\")\r\n",
							"\r\n",
							"esg_results.show\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_stock forecast automl')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0ee47912-4363-481a-a779-ea3f515982e6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import azureml.core\n",
							"import pandas as pd\n",
							"import numpy as np\n",
							"import logging\n",
							"\n",
							"from azureml.core.workspace import Workspace\n",
							"from azureml.core.experiment import Experiment\n",
							"from azureml.train.automl import AutoMLConfig\n",
							"from azureml.automl.core.featurization import FeaturizationConfig\n",
							"#print(\"SDK Version:\", azureml.core.VERSION)\n",
							"\n",
							"from azureml.data.datapath import DataPath\n",
							"from azureml.core import Datastore\n",
							"from azureml.core.dataset import Dataset\n",
							"from azureml.train.automl import AutoMLConfig\n",
							"from azureml.train.automl.run import AutoMLRun\n",
							"import azureml.core\n",
							"import logging\n",
							"import numpy as np\n",
							"import pandas as pd\n",
							"from azureml.core.compute import AmlCompute\n",
							"from azureml.core.compute import ComputeTarget\n",
							"from pandas.tseries.offsets import *\n",
							"from datetime import datetime, timedelta"
						],
						"outputs": [],
						"execution_count": 84
					},
					{
						"cell_type": "code",
						"source": [
							"subscription_id = \"9c1bf73d-cfe5-4113-bc28-5f637bb222ad\"\n",
							"resource_group = \"marketrisk\"\n",
							"workspace_name = \"marketriskaml\"\n",
							"workspace_region = \"eastus\"\n",
							"\n",
							"ws = Workspace(workspace_name = workspace_name,\n",
							"               subscription_id = subscription_id,\n",
							"               resource_group = resource_group)\n",
							"#ws.get_details()"
						],
						"outputs": [],
						"execution_count": 85
					},
					{
						"cell_type": "code",
						"source": [
							"## Create a new datastore\n",
							"adlsDsName ='stockautoml'\n",
							"adlsName = 'marketriskdl'\n",
							"tenantId = '72f988bf-86f1-41af-91ab-2d7cd011db47'\n",
							"clientId = '02c58df9-4f1d-444d-9077-1bf0769fcdfa'\n",
							"clientSecret = '1IS7k9CZKC6MGAd_ll~.dL78yc-9x4wXTQ'\n",
							"\n",
							"try:\n",
							"    adls_datastore = Datastore.get(ws, adlsDsName)\n",
							"    print(\"Found Blob Datastore with name: %s\" % adls_datastore)\n",
							"except HttpOperationError:\n",
							"    adls_datastore = Datastore.register_azure_data_lake(workspace=ws, datastore_name=adlsDsName, subscription_id=subscription_id, resource_group=resource_group, store_name=adlsName, tenant_id=tenantId, client_id=clientId, client_secret=clientSecret)"
						],
						"outputs": [],
						"execution_count": 86
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Portfolio"
									],
									"values": [
										"Portfolio"
									],
									"yLabel": "Portfolio",
									"xLabel": "Portfolio",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"Portfolio\":{\"Covid\":15,\"LongTerm\":9}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Read out CSV file with list of all tickers\n",
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioCik.csv', \n",
							"    format='csv', \n",
							"    sep=\",\",\n",
							"    header=True)\n",
							"\n",
							"portfolioData = nqSdf.toPandas()\n",
							"display(portfolioData)"
						],
						"outputs": [],
						"execution_count": 87
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlobServiceClient, ContainerClient\n",
							"from azure.storage.blob import BlobClient\n",
							"\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"connectionString = \"DefaultEndpointsProtocol=https;AccountName=marketriskdl;AccountKey=2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==;EndpointSuffix=core.windows.net\""
						],
						"outputs": [],
						"execution_count": 88
					},
					{
						"cell_type": "code",
						"source": [
							"# Choose a name for your cluster.\n",
							"amlcompute_cluster_name = \"cpu-cluster\"\n",
							"found = False\n",
							"\n",
							"# Check if this compute target already exists in the workspace.\n",
							"cts = ws.compute_targets\n",
							"if amlcompute_cluster_name in cts and cts[amlcompute_cluster_name].type == 'AmlCompute':\n",
							"    found = True\n",
							"    print('Found existing compute target.')\n",
							"    compute_target = cts[amlcompute_cluster_name]\n",
							"\n",
							"if not found:\n",
							"    print('Creating a new compute target...')\n",
							"    provisioning_config = AmlCompute.provisioning_configuration(vm_size = \"STANDARD_D2_V2\", max_nodes = 10)\n",
							"    # Create the cluster\n",
							"    compute_target = ComputeTarget.create(ws, amlcompute_cluster_name, provisioning_config)\n",
							"\n",
							"# Can poll for a minimum number of nodes and for a specific timeout.\n",
							"# If no min_node_count is provided, it will use the scale settings for the cluster.\n",
							"compute_target.wait_for_completion(show_output = True, min_node_count = None, timeout_in_minutes = 20)"
						],
						"outputs": [],
						"execution_count": 89
					},
					{
						"cell_type": "code",
						"source": [
							"# Initial variables\n",
							"time_column_name = 'Date'\n",
							"#grain_column_names = ['Ticker']\n",
							"target_column_name = 'AdjClose'\n",
							"n_test_periods = 10\n",
							"drop_column_names = ['Portfolio', 'Sector','Ticker', 'Cik']"
						],
						"outputs": [],
						"execution_count": 90
					},
					{
						"cell_type": "code",
						"source": [
							"def run_forecast(row):  \n",
							"  \n",
							"  portfolio = row.Portfolio\n",
							"  sector = row.Sector\n",
							"  ticker = row.Ticker\n",
							"  filePath = '/PortfolioQuotes/HistoricalData/' + row.Ticker + '.csv'\n",
							"  timevar='daily'\n",
							"  datastore_path = [DataPath(adls_datastore, filePath)]\n",
							"  tabular = Dataset.Tabular.from_delimited_files(path=datastore_path)\n",
							" \n",
							"  experiment_name = ticker + 'automl'\n",
							"  experiment = Experiment(ws, experiment_name)\n",
							"   \n",
							"  automl_config = AutoMLConfig(task = 'forecasting',\n",
							"                             debug_log = 'automl_errors.log',\n",
							"                             primary_metric = 'normalized_root_mean_squared_error',\n",
							"                             iteration_timeout_minutes = 5,\n",
							"                             experiment_timeout_minutes = 15,\n",
							"                             enable_early_stopping = True,\n",
							"                             n_cross_validations = 3,\n",
							"                             iterations = 2,\n",
							"                             #compute_target=compute_target,\n",
							"                             verbosity = logging.INFO,\n",
							"                             training_data=tabular,\n",
							"                             drop_column_names = drop_column_names,\n",
							"                             label_column_name=target_column_name,\n",
							"                             time_column_name = time_column_name,\n",
							"                             max_horizon = n_test_periods,\n",
							"                             #blocked_models = ['ElasticNet','GradirentBoosting','DecisionTree','KNN','LassoLars','SGD','RandomForest','ExtremeRandomTrees','LightGBM', 'AutoArima', 'XGBoostRegressor'])\n",
							"                             allowed_models = ['XGBoostRegressor'])\n",
							"\n",
							"  local_run = experiment.submit(automl_config, show_output = True)\n",
							"  best_run, fitted_model = local_run.get_output()\n",
							"  print(fitted_model.steps)\n",
							"\n",
							"  model_name = best_run.properties['model_name']\n",
							"  print(model_name)\n",
							"\n",
							"  start = tabular.take(1).to_pandas_dataframe().iloc[0]['Date']\n",
							"  end = datetime.now()\n",
							"  p = (end - start).days + 365\n",
							"  p\n",
							"\n",
							"  forecast_pd = pd.DataFrame({'Date' : tabular.to_pandas_dataframe()['Date']})\n",
							"\n",
							"  #rng = pd.date_range(datetime.now(), periods=365, freq=BDay())\n",
							"  rng = pd.date_range(datetime.now(), periods=365, freq='D')\n",
							"  #rng = pd.date_range(end, periods=p, freq='D')\n",
							"\n",
							"  future_pd = pd.DataFrame({ 'Date': rng})\n",
							"  future_pd['Date'] = future_pd['Date'].dt.date\n",
							"\n",
							"  #forecast_pd = pd.DataFrame({ 'Date': rng})\n",
							"\n",
							"  # future = m.make_future_dataframe(periods=365,freq = '1d')\n",
							"  automl_prediction = fitted_model.predict(forecast_pd)\n",
							"  #automl_prediction\n",
							"  forecast_pd['yhat'] = automl_prediction.tolist()\n",
							"\n",
							"  automl_futureprediction = fitted_model.predict(future_pd)\n",
							"  future_pd['yhat'] = automl_futureprediction.tolist()\n",
							"\n",
							"  df_train = tabular.to_pandas_dataframe(on_error='null', out_of_range_datetime='null')\n",
							"  df_train = df_train[['Date','AdjClose']]\n",
							"  df_train.columns = ['Date','actual']\n",
							"  act_forecast = df_train.merge(forecast_pd[['Date','yhat']],on='Date',how='outer')\n",
							"  act_forecast = act_forecast.append(future_pd[['Date','yhat']])\n",
							"\n",
							"  act_forecast['portfolio'] = portfolio\n",
							"  act_forecast['sector'] = sector\n",
							"  act_forecast['ticker'] = ticker\n",
							"\n",
							"  act_forecast['future_predicted'] = np.nan\n",
							"  mask = (act_forecast['actual'].isnull())\n",
							"  act_forecast['future_predicted'][mask] = act_forecast['yhat']\n",
							"  act_forecast['yhat'][mask] = np.nan\n",
							"\n",
							"  act_forecast['timegran'] = timevar\n",
							"  act_forecast['itemgran'] = 'store_item'\n",
							"\n",
							"  act_forecast.shape\n",
							"  #print(act_forecast.head(4))\n",
							"  act_forecast = act_forecast[['Date','portfolio','sector','ticker','actual','yhat','future_predicted','timegran','itemgran']]\n",
							"  act_forecast.columns = ['Date','portfolio','sector','ticker','actual','predicted','future_predicted','timegran','itemgran']\n",
							"  #act_forecast.columns = ['ds','store','item','sales','forecast','future_forecast','timegran','itemgran']\n",
							"  return(act_forecast)"
						],
						"outputs": [],
						"execution_count": 91
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"portfolioList = portfolioData.Ticker.tolist()\r\n",
							"portfolioList"
						],
						"outputs": [],
						"execution_count": 92
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"def run_forecast1(df1):\r\n",
							"    display(df1)\r\n",
							"    return df1"
						],
						"outputs": [],
						"execution_count": 94
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import pandas as pd\r\n",
							"from joblib import Parallel, delayed\r\n",
							"import multiprocessing\r\n",
							"\r\n",
							"def applyParallel(dfGrouped, func):\r\n",
							"    retLst = Parallel(n_jobs=multiprocessing.cpu_count())(delayed(func)(group) for name, group in dfGrouped)\r\n",
							"    return pd.concat(retLst)"
						],
						"outputs": [],
						"execution_count": 97
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"result_columns = [\"Date\",\"portfolio\",\"sector\",\"ticker\",\"actual\",\"predicted\",\"future_predicted\",\"timegran\",\"itemgran\"]\r\n",
							"alphaList = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\r\n",
							"df_result = pd.DataFrame(columns = result_columns)\r\n",
							"\r\n",
							"for i in alphaList:\r\n",
							"  print(\"Processing data starting with \", i)\r\n",
							"  f_result = pd.DataFrame(columns = result_columns)\r\n",
							"  quotesFilterSdf = portfolioData[portfolioData['Ticker'].str.startswith(i)]#.sort_values('Ticker')\r\n",
							"  applyParallel(quotesFilterSdf.groupby(quotesFilterSdf.Ticker), run_forecast1)\r\n",
							"  #df_result = df_result.append(df_res)\r\n",
							"  #print(df_result)\r\n",
							"  #output = df_result.to_csv (index=False, header=True, encoding = \"utf-8\")\r\n",
							"  #blobName = \"PortfolioQuotes/PortfolioForecast/\" + row.Ticker + \".csv\"\r\n",
							"  #blob = BlobClient.from_connection_string(conn_str=connectionString, container_name=containerName, blob_name=blobName)\r\n",
							"  #blob.upload_blob(output)"
						],
						"outputs": [],
						"execution_count": 98
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"result_columns = [\"Date\",\"portfolio\",\"sector\",\"ticker\",\"actual\",\"predicted\",\"future_predicted\",\"timegran\",\"itemgran\"]\r\n",
							"alphaList = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\r\n",
							"df_result = pd.DataFrame(columns = result_columns)\r\n",
							"\r\n",
							"for i in alphaList:\r\n",
							"  print(\"Processing data starting with \", i)\r\n",
							"  f_result = pd.DataFrame(columns = result_columns)\r\n",
							"  quotesFilterSdf = portfolioData[portfolioData['Ticker'].str.startswith(i)]#.sort_values('Ticker')\r\n",
							"  quotesFilterSdf.apply(run_forecast1)\r\n",
							"  #df_result = df_result.append(df_res)\r\n",
							"  #print(df_result)\r\n",
							"  #output = df_result.to_csv (index=False, header=True, encoding = \"utf-8\")\r\n",
							"  #blobName = \"PortfolioQuotes/PortfolioForecast/\" + row.Ticker + \".csv\"\r\n",
							"  #blob = BlobClient.from_connection_string(conn_str=connectionString, container_name=containerName, blob_name=blobName)\r\n",
							"  #blob.upload_blob(output)"
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "code",
						"source": [
							"result_columns = [\"Date\",\"portfolio\",\"sector\",\"ticker\",\"actual\",\"predicted\",\"future_predicted\",\"timegran\",\"itemgran\"]\n",
							"for index, row in portfolioData.iterrows():\n",
							"    df_result = pd.DataFrame(columns = result_columns)\n",
							"    filePath = '/PortfolioQuotes/HistoricalData/' + row.Ticker + '.csv'\n",
							"    df_res = run_forecast(filePath, row.Portfolio, row.Sector, row.Ticker, 'daily')\n",
							"    df_result = df_result.append(df_res)\n",
							"    output = df_result.to_csv (index=False, header=True, encoding = \"utf-8\")\n",
							"    blobName = \"PortfolioQuotes/PortfolioForecast/\" + row.Ticker + \".csv\"\n",
							"    blob = BlobClient.from_connection_string(conn_str=connectionString, container_name=containerName, blob_name=blobName)\n",
							"    blob.upload_blob(output)\n",
							"    #break\n",
							"#df_result.shape  \n",
							"#df_result.to_csv('/dbfs/mnt/ncmriskstorage/StockPricesForecastAutoMLforecast.csv',index=False)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_stock timeseries forecast automl')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "22168657-2e31-4e96-b540-63a4fd0420d5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import azureml.core\n",
							"import pandas as pd\n",
							"import numpy as np\n",
							"import logging\n",
							"\n",
							"from azureml.core.workspace import Workspace\n",
							"from azureml.core.experiment import Experiment\n",
							"from azureml.train.automl import AutoMLConfig\n",
							"from azureml.automl.core.featurization import FeaturizationConfig"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"subscription_id = \"9c1bf73d-cfe5-4113-bc28-5f637bb222ad\"\n",
							"resource_group = \"marketrisk\"\n",
							"workspace_name = \"marketriskaml\"\n",
							"workspace_region = \"eastus\""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.core import Workspace\n",
							"\n",
							"try:\n",
							"    ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
							"    # write the details of the workspace to a configuration file to the notebook library\n",
							"    ws.write_config()\n",
							"    print(\"Workspace configuration succeeded. Skip the workspace creation steps below\")\n",
							"except:\n",
							"    print(\"Workspace not accessible. Change your parameters or create a new workspace below\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"ws = Workspace.from_config()\n",
							"\n",
							"# choose a name for the run history container in the workspace\n",
							"experiment_name = 'automl-stockprice'\n",
							"experiment = Experiment(ws, experiment_name)\n",
							"output = {}\n",
							"output['SDK version'] = azureml.core.VERSION\n",
							"output['Subscription ID'] = ws.subscription_id\n",
							"output['Workspace'] = ws.name\n",
							"output['SKU'] = ws.sku\n",
							"output['Resource Group'] = ws.resource_group\n",
							"output['Location'] = ws.location\n",
							"output['Run History Name'] = experiment_name\n",
							"\n",
							"pd.set_option('display.max_colwidth', None)\n",
							"outputDf = pd.DataFrame(data = output, index = [''])"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.core.compute import AmlCompute\n",
							"from azureml.core.compute import ComputeTarget\n",
							"\n",
							"# Choose a name for your cluster.\n",
							"amlcompute_cluster_name = \"cpu-cluster\"\n",
							"found = False\n",
							"\n",
							"# Check if this compute target already exists in the workspace.\n",
							"cts = ws.compute_targets\n",
							"if amlcompute_cluster_name in cts and cts[amlcompute_cluster_name].type == 'AmlCompute':\n",
							"    found = True\n",
							"    print('Found existing compute target.')\n",
							"    compute_target = cts[amlcompute_cluster_name]\n",
							"\n",
							"if not found:\n",
							"    print('Creating a new compute target...')\n",
							"    provisioning_config = AmlCompute.provisioning_configuration(vm_size = \"STANDARD_D2_V2\", max_nodes = 2)\n",
							"    # Create the cluster\n",
							"    compute_target = ComputeTarget.create(ws, amlcompute_cluster_name, provisioning_config)\n",
							"\n",
							"# Can poll for a minimum number of nodes and for a specific timeout.\n",
							"# If no min_node_count is provided, it will use the scale settings for the cluster.\n",
							"compute_target.wait_for_completion(show_output = True, min_node_count = None, timeout_in_minutes = 20)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Portfolio"
									],
									"values": [
										"Ticker"
									],
									"yLabel": "Ticker",
									"xLabel": "Portfolio",
									"aggregation": "COUNT",
									"aggByBackend": true,
									"isValid": true,
									"inValidMsg": null,
									"series": "Ticker"
								},
								"aggData": "{\"PG\":{\"Covid\":1001}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"# Read out CSV file with list of all tickers\n",
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/PortfolioQuotes/HistoricalData', \n",
							"    format='csv', \n",
							"    sep=\",\",\n",
							"    header=True)\n",
							"\n",
							"portfolioData = nqSdf.toPandas()\n",
							"display(portfolioData)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"msftTicker = ['MSFT']\n",
							"msftData = portfolioData[portfolioData.Ticker.isin(msftTicker)]\n",
							"msftData = msftData.drop(columns=['Portfolio', 'Sector', 'Cik', 'Ticker'])\n",
							"msftData = msftData.set_index('Date')\n",
							"msftData"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"import pandas as pd\n",
							"from pandas import DataFrame\n",
							"from pandas import Grouper\n",
							"from pandas import concat\n",
							"from pandas.plotting import register_matplotlib_converters\n",
							"from matplotlib import pyplot as plt\n",
							"\n",
							"register_matplotlib_converters()\n",
							"plt.figure(figsize=(20, 10))\n",
							"plt.tight_layout()"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"source": [
							"target_column_name = 'AdjClose'\n",
							"time_column_name = 'Date'\n",
							"time_series_id_column_names = []\n",
							"freq = 'M' #Monthly data"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"source": [
							"import pandas as pd\n",
							"from azureml.core import Environment\n",
							"from azureml.core.conda_dependencies import CondaDependencies\n",
							"from azureml.train.estimator import Estimator\n",
							"from azureml.core.run import Run\n",
							"\n",
							"\n",
							"def split_fraction_by_grain(df, fraction, time_column_name,\n",
							"                            grain_column_names=None):\n",
							"\n",
							"    if not grain_column_names:\n",
							"        df['tmp_grain_column'] = 'grain'\n",
							"        grain_column_names = ['tmp_grain_column']\n",
							"\n",
							"    \"\"\"Group df by grain and split on last n rows for each group.\"\"\"\n",
							"    df_grouped = (df.sort_values(time_column_name)\n",
							"                  .groupby(grain_column_names, group_keys=False))\n",
							"\n",
							"    df_head = df_grouped.apply(lambda dfg: dfg.iloc[:-int(len(dfg) *\n",
							"                               fraction)] if fraction > 0 else dfg)\n",
							"\n",
							"    df_tail = df_grouped.apply(lambda dfg: dfg.iloc[-int(len(dfg) *\n",
							"                               fraction):] if fraction > 0 else dfg[:0])\n",
							"\n",
							"    if 'tmp_grain_column' in grain_column_names:\n",
							"        for df2 in (df, df_head, df_tail):\n",
							"            df2.drop('tmp_grain_column', axis=1, inplace=True)\n",
							"\n",
							"        grain_column_names.remove('tmp_grain_column')\n",
							"\n",
							"    return df_head, df_tail\n",
							"\n",
							"\n",
							"def split_full_for_forecasting(df, time_column_name,\n",
							"                               grain_column_names=None, test_split=0.2):\n",
							"    index_name = df.index.name\n",
							"\n",
							"    # Assumes that there isn't already a column called tmpindex\n",
							"\n",
							"    df['tmpindex'] = df.index\n",
							"\n",
							"    train_df, test_df = split_fraction_by_grain(\n",
							"        df, test_split, time_column_name, grain_column_names)\n",
							"\n",
							"    train_df = train_df.set_index('tmpindex')\n",
							"    train_df.index.name = index_name\n",
							"\n",
							"    test_df = test_df.set_index('tmpindex')\n",
							"    test_df.index.name = index_name\n",
							"\n",
							"    df.drop('tmpindex', axis=1, inplace=True)\n",
							"\n",
							"    return train_df, test_df\n",
							"\n",
							"\n",
							"def get_result_df(remote_run):\n",
							"    children = list(remote_run.get_children(recursive=True))\n",
							"    summary_df = pd.DataFrame(index=['run_id', 'run_algorithm',\n",
							"                                     'primary_metric', 'Score'])\n",
							"    goal_minimize = False\n",
							"    for run in children:\n",
							"        if('run_algorithm' in run.properties and 'score' in run.properties):\n",
							"            summary_df[run.id] = [run.id, run.properties['run_algorithm'],\n",
							"                                  run.properties['primary_metric'],\n",
							"                                  float(run.properties['score'])]\n",
							"            if('goal' in run.properties):\n",
							"                goal_minimize = run.properties['goal'].split('_')[-1] == 'min'\n",
							"\n",
							"    summary_df = summary_df.T.sort_values(\n",
							"        'Score',\n",
							"        ascending=goal_minimize).drop_duplicates(['run_algorithm'])\n",
							"    summary_df = summary_df.set_index('run_algorithm')\n",
							"    return summary_df"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"train, test = split_full_for_forecasting(msftData, time_column_name)\n",
							"train.to_csv(\"train.csv\")\n",
							"test.to_csv(\"test.csv\")\n",
							"\n",
							"datastore = ws.get_default_datastore()\n",
							"datastore.upload_files(files = ['./train.csv'], target_path = 'msft-dataset/tabular/', overwrite = True,show_progress = True)\n",
							"datastore.upload_files(files = ['./test.csv'], target_path = 'msft-dataset/tabular/', overwrite = True,show_progress = True)\n",
							"\n",
							"from azureml.core import Dataset\n",
							"train_dataset = Dataset.Tabular.from_delimited_files(path = [(datastore, 'msft-dataset/tabular/train.csv')])\n",
							"test_dataset = Dataset.Tabular.from_delimited_files(path = [(datastore, 'msft-dataset/tabular/test.csv')])"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"source": [
							"test"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"source": [
							"forecast_horizon = 12\n",
							"from azureml.automl.core.forecasting_parameters import ForecastingParameters\n",
							"forecasting_parameters = ForecastingParameters(\n",
							"    time_column_name=time_column_name, forecast_horizon=forecast_horizon\n",
							")\n",
							"\n",
							"automl_config = AutoMLConfig(task='forecasting',                             \n",
							"                             primary_metric='normalized_root_mean_squared_error',\n",
							"                             experiment_timeout_hours = 0.25,\n",
							"                             training_data=train_dataset,\n",
							"                             label_column_name=target_column_name,\n",
							"                             validation_data=test_dataset, \n",
							"                             verbosity=logging.INFO,\n",
							"                             compute_target=compute_target,\n",
							"                             max_concurrent_iterations=4,\n",
							"                             max_cores_per_iteration=-1,\n",
							"                             enable_dnn=True,\n",
							"                             forecasting_parameters=forecasting_parameters)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"source": [
							"remote_run = experiment.submit(automl_config, show_output= False)\n",
							"remote_run"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"source": [
							"remote_run.wait_for_completion()"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"source": [
							"summary_df = get_result_df(remote_run)\n",
							"summary_df"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"source": [
							"time_column_name = 'Date'\n",
							"grain_column_names = ['Ticker', 'Portfolio']\n",
							"nseries = portfolioData.groupby(grain_column_names).ngroups\n",
							"print('Data contains {0} individual time-series.'.format(nseries))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"use_tickers = ['MSFT', 'COST', 'WMT']\n",
							"data_subset = portfolioData[portfolioData.Ticker.isin(use_tickers)]\n",
							"nseries = data_subset.groupby(grain_column_names).ngroups\n",
							"print('Data subset contains {0} individual time-series.'.format(nseries))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"n_test_periods = 20\n",
							"def split_last_n(df, n):\n",
							"\n",
							"    \"\"\"Group df and split on last n rows for each group.\"\"\"\n",
							"    df_grouped = (df.sort_values(time_column_name).groupby(grain_column_names, group_keys=False))\n",
							"    df_head = df_grouped.apply(lambda dfg: dfg.iloc[:-n])\n",
							"    df_tail = df_grouped.apply(lambda dfg: dfg.iloc[-n:])\n",
							"    return df_head, df_tail\n",
							"\n",
							"train, test = split_last_n(data_subset, n_test_periods)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Portfolio"
									],
									"values": [
										"Portfolio"
									],
									"yLabel": "Portfolio",
									"xLabel": "Portfolio",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"Portfolio\":{\"Covid\":1001}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"train.to_csv (r'./stock_train.csv', index = None, header=True)\n",
							"test.to_csv (r'./stock_test.csv', index = None, header=True) "
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"source": [
							"datastore = ws.get_default_datastore()\n",
							"datastore.upload_files(files = ['./stock_train.csv', './stock_test.csv'], target_path = 'dataset/', overwrite = True,show_progress = True)\n",
							"\n",
							"#Let’s now create the dataset that we will use for our training part:\n",
							"from azureml.core.dataset import Dataset\n",
							"train_dataset = Dataset.Tabular.from_delimited_files(path=datastore.path('dataset/stock_train.csv'))\n",
							"\n",
							"train_dataset.to_pandas_dataframe().tail()"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"source": [
							"target_column_name = 'AdjClose'"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"source": [
							"featurization_config = FeaturizationConfig()\n",
							"featurization_config.drop_columns = ['Sector']  # 'logQuantity' is a leaky feature, so we remove it.\n",
							"# Force the CPWVOL5 feature to be numeric type.\n",
							"#featurization_config.add_column_purpose('CPWVOL5', 'Numeric')\n",
							"# Fill missing values in the target column, Quantity, with zeros.\n",
							"#featurization_config.add_transformer_params('Imputer', ['Quantity'], {\"strategy\": \"constant\", \"fill_value\": 0})\n",
							"# Fill missing values in the INCOME column with median value.\n",
							"#featurization_config.add_transformer_params('Imputer', ['INCOME'], {\"strategy\": \"median\"})\n",
							"# Fill missing values in the Price column with forward fill (last value carried forward).\n",
							"#featurization_config.add_transformer_params('Imputer', ['Price'], {\"strategy\": \"ffill\"})"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.automl.core.forecasting_parameters import ForecastingParameters\n",
							"\n",
							"forecasting_parameters = ForecastingParameters(\n",
							"    time_column_name=time_column_name,\n",
							"    forecast_horizon=n_test_periods,\n",
							"    time_series_id_column_names=grain_column_names\n",
							")\n",
							"\n",
							"automl_config = AutoMLConfig(task='forecasting',\n",
							"                             debug_log='automl_errors.log',\n",
							"                             primary_metric='normalized_mean_absolute_error',\n",
							"                             experiment_timeout_hours=0.25,\n",
							"                             training_data=train_dataset,\n",
							"                             label_column_name=target_column_name,\n",
							"                             compute_target=compute_target,\n",
							"                             enable_early_stopping=True,\n",
							"                             featurization=featurization_config,\n",
							"                             n_cross_validations=3,\n",
							"                             verbosity=logging.INFO,\n",
							"                             max_cores_per_iteration=-1,\n",
							"                             forecasting_parameters=forecasting_parameters)"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"source": [
							"remote_run = experiment.submit(automl_config, show_output=False)\n",
							"remote_run\n",
							"remote_run.wait_for_completion()"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"source": [
							"best_run, fitted_model = remote_run.get_output()\n",
							"print(fitted_model.steps)\n",
							"model_name = best_run.properties['model_name']"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"source": [
							"X_test = test\n",
							"y_test = X_test.pop(target_column_name).values\n",
							"X_test.head()"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"source": [
							"# The featurized data, aligned to y, will also be returned.\n",
							"# This contains the assumptions that were made in the forecast\n",
							"# and helps align the forecast to the original data\n",
							"y_predictions, X_trans = fitted_model.forecast(X_test)"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"source": [
							"import pandas as pd\n",
							"import numpy as np\n",
							"from pandas.tseries.frequencies import to_offset\n",
							"\n",
							"\n",
							"def align_outputs(y_predicted, X_trans, X_test, y_test, target_column_name,\n",
							"                  predicted_column_name='predicted',\n",
							"                  horizon_colname='horizon_origin'):\n",
							"    \"\"\"\n",
							"    Demonstrates how to get the output aligned to the inputs\n",
							"    using pandas indexes. Helps understand what happened if\n",
							"    the output's shape differs from the input shape, or if\n",
							"    the data got re-sorted by time and grain during forecasting.\n",
							"    Typical causes of misalignment are:\n",
							"    * we predicted some periods that were missing in actuals -> drop from eval\n",
							"    * model was asked to predict past max_horizon -> increase max horizon\n",
							"    * data at start of X_test was needed for lags -> provide previous periods\n",
							"    \"\"\"\n",
							"\n",
							"    if (horizon_colname in X_trans):\n",
							"        df_fcst = pd.DataFrame({predicted_column_name: y_predicted,\n",
							"                                horizon_colname: X_trans[horizon_colname]})\n",
							"    else:\n",
							"        df_fcst = pd.DataFrame({predicted_column_name: y_predicted})\n",
							"\n",
							"    # y and X outputs are aligned by forecast() function contract\n",
							"    df_fcst.index = X_trans.index\n",
							"\n",
							"    # align original X_test to y_test\n",
							"    X_test_full = X_test.copy()\n",
							"    X_test_full[target_column_name] = y_test\n",
							"\n",
							"    # X_test_full's index does not include origin, so reset for merge\n",
							"    df_fcst.reset_index(inplace=True)\n",
							"    X_test_full = X_test_full.reset_index().drop(columns='index')\n",
							"    together = df_fcst.merge(X_test_full, how='right')\n",
							"\n",
							"    # drop rows where prediction or actuals are nan\n",
							"    # happens because of missing actuals\n",
							"    # or at edges of time due to lags/rolling windows\n",
							"    clean = together[together[[target_column_name,\n",
							"                               predicted_column_name]].notnull().all(axis=1)]\n",
							"    return(clean)"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"source": [
							"df_all = align_outputs(y_predictions, X_trans, X_test, y_test, target_column_name)\n",
							"\n",
							"from azureml.automl.core._vendor.automl.client.core.common import metrics\n",
							"from automl.client.core.common import constants\n",
							"\n",
							"# use automl metrics module\n",
							"scores = metrics.compute_metrics_regression(\n",
							"    df_all['predicted'],\n",
							"    df_all[target_column_name],\n",
							"    list(constants.Metric.SCALAR_REGRESSION_SET),\n",
							"    None, None, None)\n",
							"\n",
							"print(\"[Test data scores]\\n\")\n",
							"for key, value in scores.items():   \n",
							"    print('{}:   {:.3f}'.format(key, value))\n",
							""
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"source": [
							"# Plot outputs\n",
							"from matplotlib import pyplot as plt\n",
							"\n",
							"test_pred = plt.scatter(df_all[target_column_name], df_all['predicted'], color='b')\n",
							"test_test = plt.scatter(df_all[target_column_name], df_all[target_column_name], color='g')\n",
							"plt.legend((test_pred, test_test), ('prediction', 'truth'), loc='upper left', fontsize=8)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_score and store tweets')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "68dad71f-0ee7-49b7-ac56-3a370cc8067b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import pkg_resources\n",
							"for d in pkg_resources.working_set:\n",
							"     print(d)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"import urllib.parse, base64\n",
							"import json\n",
							"import requests\n",
							"import pandas as pd\n",
							"import datetime\n",
							"import pytz\n",
							"from azure.core.credentials import AzureKeyCredential\n",
							"from azure.ai.textanalytics import TextAnalyticsClient\n",
							"\n",
							"#sentiment_url = 'https://southcentralus.api.cognitive.microsoft.com/text/analytics/v3.0/sentiment' # service address \n",
							"sentiment_url = 'https://twittercog64.cognitiveservices.azure.com/'\n",
							"api_key = '2383634b398945b682b4c6ff9cd13cc5'          # Azure Cognitive API Key, replace with your own key\n",
							"\n",
							"\n",
							"credential = AzureKeyCredential(api_key)\n",
							"text_analytics_client = TextAnalyticsClient(endpoint=sentiment_url, credential=credential)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlobServiceClient, ContainerClient , BlobClient\n",
							"\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"connectionString = \"DefaultEndpointsProtocol=https;AccountName=marketriskdl;AccountKey=2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==;EndpointSuffix=core.windows.net\"\n",
							"\n",
							"containerName = \"risk\"\n",
							"blobService = BlobServiceClient(connectionString)\n",
							"containerService = ContainerClient.from_connection_string(connectionString, containerName)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"import datetime\n",
							"import pytz\n",
							"\n",
							"currDate = datetime.datetime.now(pytz.timezone('US/Central'))\n",
							"blobName = \"TwitterData/\" + str(currDate.year) + \"/\" + str(currDate.month).zfill(2) + \"/\" + str(currDate.day -1) \n",
							"\n",
							"filename_prefix = \"/\" + blobName \n",
							"\n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Read out CSV file with list of all tickers\r\n",
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioCik.csv', \r\n",
							"    format='csv', \r\n",
							"    sep=\",\",\r\n",
							"    header=True)\r\n",
							"\r\n",
							"portfolioData = nqSdf.toPandas()\r\n",
							"display(portfolioData)\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"import glob\n",
							"import re \n",
							"\n",
							"#Get all the tweets generated for the symbols in the portfolio\n",
							"allticker = pd.DataFrame()\n",
							"for index, portfolio in portfolioData.iterrows():\n",
							"   print(\"ticker\", portfolio.Ticker)\n",
							"   if portfolio.Ticker :\n",
							"      print(\"prefix\", filename_prefix)\n",
							"      filename_objects = containerService.list_blobs(name_starts_with= filename_prefix)\n",
							"      filtered = [fileinfo.name for fileinfo in filename_objects if portfolio.Ticker in fileinfo.name]\n",
							"      print(filtered)\n",
							"\n",
							"      consolidatedtweets = pd.DataFrame()\n",
							"      scoredTweets = pd.DataFrame()\n",
							"\n",
							"\n",
							"#itterate over files and consolidate tweets \n",
							"      for tickerfilename in filtered : \n",
							"        absolouteFileName = \"abfss://risk@marketriskdl.dfs.core.windows.net/\" + tickerfilename\n",
							"        nqSdf = spark.read.format('csv') \\\n",
							"                    .option('header',True) \\\n",
							"                    .option('multiLine', True) \\\n",
							"                    .load(absolouteFileName)\n",
							"        print(\"fileName\" , absolouteFileName)\n",
							"        consolidatedtweets = consolidatedtweets.append(nqSdf.toPandas())\n",
							"     \n",
							"#Drop duplicates from consolidated         \n",
							"      print(\"Before drop\", consolidatedtweets.shape[0])\n",
							"      consolidatedtweets = consolidatedtweets.drop_duplicates(subset=['TweetText'])\n",
							"      print(\"After Drop\", consolidatedtweets.shape[0])\n",
							"      consolidatedtweets = consolidatedtweets[consolidatedtweets['TweetLanguage'] == 'en']  \n",
							"\n",
							"      consolidatedtweets['Location'] = consolidatedtweets['Location\\r'].str.strip(r'\\\\r').astype(str)\n",
							"      consolidatedtweets = consolidatedtweets.drop(columns='Location\\r')\n",
							"\n",
							"\n",
							"#Score and add to scoredtweets\n",
							"      for index, tweet in consolidatedtweets.iterrows():\n",
							"            documents = []\n",
							"            mentions = re.findall(\"@([a-zA-Z0-9]{1,15})\", tweet.TweetText)\n",
							"            topics = re.findall(\"#([a-zA-Z0-9]{1,15})\", tweet.TweetText)\n",
							"            documents.append (\"'\" + tweet.TweetText + \"'\")\n",
							"            for text in mentions: text = re.sub('\\W+',' ', text)\n",
							"            for text1 in topics: text1= re.sub('\\W+',' ', text1)\n",
							"            tweet['mentions'] =   mentions\n",
							"            tweet['topics'] =  topics\n",
							"            tweet['Ticker'] = portfolio.Ticker\n",
							"            response = text_analytics_client.analyze_sentiment(documents, language=\"en\")\n",
							"            result = [doc for doc in response if not doc.is_error]\n",
							"            tweet['sentiment'] = result[0].sentiment\n",
							"            tweet['positive'] = result[0].confidence_scores.positive\n",
							"            tweet['negative'] = result[0].confidence_scores.negative\n",
							"            tweet['neutral'] = result[0].confidence_scores.neutral\n",
							"            tweet.TweetText = re.sub('\\W+',' ', tweet.TweetText)\n",
							"\n",
							"            if tweet.Location : \n",
							"              tweet.Location = tweet.Location.rstrip('\\r')\n",
							"            else :\n",
							"              tweet.Location = \" \"\n",
							"              tweet.Location = tweet.Location.rstrip('\\r')\n",
							"            \n",
							"            scoredTweets = scoredTweets.append(tweet,ignore_index=True) \n",
							"      allticker = allticker.append(scoredTweets)\n",
							"      output = scoredTweets.to_csv(index=False, header=True, encoding = \"utf-8\")\n",
							"      \n",
							"\n",
							"      blobName = \"TwitterData/scored/\" + str(currDate.year) + \"/\" + str(currDate.month) + \"/\" + str(currDate.day) + \"/\" + portfolio.Ticker + \".csv\"\n",
							"      blob = BlobClient.from_connection_string(conn_str=connectionString, container_name=containerName, blob_name=blobName)\n",
							"      blob.upload_blob(output)\n",
							"    \n",
							"\n",
							" outputall = allticker.to_csv(index=False, header=True, encoding = \"utf-8\")\n",
							"      \n",
							"\n",
							"  blobNameall = \"TwitterData/scored/\" + str(currDate.year) + \"/\" + str(currDate.month) + \"/\" + str(currDate.day) + \"/\" + \"allticker\" + \".csv\"\n",
							"  bloball = BlobClient.from_connection_string(conn_str=connectionString, container_name=containerName, blob_name=blobNameall)\n",
							"  bloball.upload_blob(outputall)\n",
							"\n",
							"      \n",
							"    \n",
							"        \n",
							"\n",
							"\n",
							"\n",
							"\n",
							"\n",
							"\n",
							"           \n",
							"\n",
							"\n",
							"  \n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": 14
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_score and store tweets_0')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Risk"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e2354ae5-fb33-4c47-a317-55dc8b829be0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import pip #needed to use the pip functions\n",
							"for i in pip.get_installed_distributions(local_only=True):print(i)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"import urllib.parse, base64\n",
							"import json\n",
							"import requests\n",
							"import pandas as pd\n",
							"import datetime\n",
							"import pytz\n",
							"from azure.core.credentials import AzureKeyCredential\n",
							"from azure.ai.textanalytics import TextAnalyticsClient\n",
							"\n",
							"#sentiment_url = 'https://southcentralus.api.cognitive.microsoft.com/text/analytics/v3.0/sentiment' # service address \n",
							"sentiment_url = 'https://markettweetsentimentanalysis.cognitiveservices.azure.com/'\n",
							"api_key = '4d3f9732c7f947cebc33c14db5c94b4e'          # Azure Cognitive API Key, replace with your own key\n",
							"\n",
							"\n",
							"credential = AzureKeyCredential(api_key)\n",
							"text_analytics_client = TextAnalyticsClient(endpoint=sentiment_url, credential=credential)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import (\n",
							"    BlockBlobService\n",
							")\n",
							"\n",
							"accountName = \"marketriskdl\"\n",
							"accountKey = \"2Gsb+co0ZjMiaiJxBHAPMhRyvY0NDz08r4WA2mDVgBd7RHcbykI+wUCYkIW9blVE/hnNXm+Z+mOzkppHi4BTag==\"\n",
							"containerName = \"risk\"\n",
							"\n",
							"blobService = BlockBlobService(account_name=accountName, account_key=accountKey)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"import datetime\n",
							"import pytz\n",
							"\n",
							"currDate = datetime.datetime.now(pytz.timezone('US/Central'))\n",
							"blobName = \"TwitterData/\" + str(currDate.year) + \"/\" + str(currDate.month) + \"/\" + str(currDate.day - 1)\n",
							"print(blobName)\n",
							"\n",
							"   "
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Read out CSV file with list of all tickers\r\n",
							"nqSdf = spark.read.load('abfss://risk@marketriskdl.dfs.core.windows.net/Portfolio/PortfolioCik.csv', \r\n",
							"    format='csv', \r\n",
							"    sep=\",\",\r\n",
							"    header=True)\r\n",
							"\r\n",
							"portfolioData = nqSdf.toPandas()\r\n",
							"display(portfolioData)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"import glob\n",
							"import re \n",
							"\n",
							"filename_prefix = \"/\" + blobName \n",
							"filename_objects = blobService.list_blobs('risk', prefix = filename_prefix)\n",
							"#print(filename_objects)\n",
							"\n",
							"for index, portfolio in portfolioData.iterrows():\n",
							"   print(portfolio.Ticker)\n",
							"   if portfolio.Ticker :\n",
							"      filtered = [fileinfo.name for fileinfo in filename_objects if portfolio.Ticker in fileinfo.name]\n",
							"      print(filtered)\n",
							"      consolidatedtweets = pd.DataFrame()\n",
							"\n",
							"      for tickerfilename in filtered : \n",
							"        absolouteFileName = \"abfss://risk@marketriskdl.dfs.core.windows.net/\" + tickerfilename\n",
							"        print(absolouteFileName)\n",
							"        nqSdf = spark.read.format('csv') \\\n",
							"                    .option('header',True) \\\n",
							"                    .option('multiLine', True) \\\n",
							"                    .load(absolouteFileName)\n",
							"        \n",
							"        consolidatedtweets = consolidatedtweets.append(nqSdf.toPandas())\n",
							"        scoredTweets = pd.DataFrame()\n",
							"        consolidatedtweets['Location'] = consolidatedtweets['Location\\r'].str.strip(r'\\\\r').astype(str)\n",
							"        consolidatedtweets = consolidatedtweets.drop(columns='Location\\r')\n",
							"        \n",
							"      print(\"Before drop\", consolidatedtweets.shape[0])\n",
							"      consolidatedtweets = consolidatedtweets.drop_duplicates(subset=['TweetText'])\n",
							"      print(\"After Drop\", consolidatedtweets.shape[0])\n",
							"\n",
							"      for index, tweet in consolidatedtweets.iterrows():\n",
							"            documents = []\n",
							"            mentions = re.findall(\"@([a-zA-Z0-9]{1,15})\", tweet.TweetText)\n",
							"            topics = re.findall(\"#([a-zA-Z0-9]{1,15})\", tweet.TweetText)\n",
							"            documents.append (\"'\" + tweet.TweetText + \"'\")\n",
							"            tweet['mentions'] = mentions\n",
							"            tweet['topics'] = topics\n",
							"            tweet['Ticker'] = portfolio.Ticker\n",
							"            response = text_analytics_client.analyze_sentiment(documents, language=\"en\")\n",
							"            result = [doc for doc in response if not doc.is_error]\n",
							"            tweet['sentiment'] = result[0].sentiment\n",
							"            tweet['positive'] = result[0].confidence_scores.positive\n",
							"            tweet['negative'] = result[0].confidence_scores.negative\n",
							"            tweet['neutral'] = result[0].confidence_scores.neutral\n",
							"\n",
							"            if tweet.Location : \n",
							"              tweet.Location = tweet.Location.rstrip('\\r')\n",
							"            else :\n",
							"              tweet.Location = \" \"\n",
							"              tweet.Location = tweet.Location.rstrip('\\r')\n",
							"            \n",
							"            scoredTweets = scoredTweets.append(tweet,ignore_index=True) \n",
							"\n",
							"      output = scoredTweets.to_csv(index=False, header=True, encoding = \"utf-8\")\n",
							"      blobService.create_blob_from_text(containerName,  \"TwitterData/scored/\" + str(currDate.year) + \"/\" + str(currDate.month) + \"/\" + str(currDate.day) + \"/\" + portfolio.Ticker + \".csv\", output)\n",
							"    \n",
							"\n",
							"\n",
							"\n",
							"      \n",
							"    \n",
							"        \n",
							"\n",
							"\n",
							"\n",
							"\n",
							"\n",
							"\n",
							"           \n",
							"\n",
							"\n",
							"  \n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": 16
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_spark dataframe')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_machine learning"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "efd08eab-8759-4733-844f-dac655629e90"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"214c481d-157d-480b-b976-e72b0c5687a6": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "820",
												"3": 2,
												"4": "33.280000000000000000",
												"5": "66.560000000000000000",
												"6": "20191204",
												"7": "22.660000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "1370",
												"3": 2,
												"4": "26.660000000000000000",
												"5": "53.320000000000000000",
												"6": "20191204",
												"7": "16.580000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "3071",
												"3": 1,
												"4": "39.220000000000000000",
												"5": "39.220000000000000000",
												"6": "20191204",
												"7": "12.380000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "3460",
												"3": 4,
												"4": "30.840000000000000000",
												"5": "123.360000000000000000",
												"6": "20191204",
												"7": "42.720000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "2975",
												"3": 1,
												"4": "33.240000000000000000",
												"5": "33.240000000000000000",
												"6": "20191204",
												"7": "11.190000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "4889",
												"3": 2,
												"4": "32.020000000000000000",
												"5": "64.040000000000000000",
												"6": "20191204",
												"7": "20.200000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "2333",
												"3": 1,
												"4": "19.220000000000000000",
												"5": "19.220000000000000000",
												"6": "20191204",
												"7": "5.540000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "105",
												"3": 1,
												"4": "34.360000000000000000",
												"5": "34.360000000000000000",
												"6": "20191204",
												"7": "10.510000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "6",
												"3": 1,
												"4": "28.310000000000000000",
												"5": "28.310000000000000000",
												"6": "20191204",
												"7": "8.770000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "144",
												"3": 3,
												"4": "30.480000000000000000",
												"5": "91.440000000000000000",
												"6": "20191204",
												"7": "24.270000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							},
							"94e9d2f7-7a89-4fe3-9a81-0138040b632a": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "20191201",
												"1": "234",
												"2": "14223.910000000000000000",
												"3": "2.4982",
												"4": "1369"
											},
											{
												"0": "20191201",
												"1": "4846",
												"2": "2898.050000000000000000",
												"3": "2.5592",
												"4": "389"
											},
											{
												"0": "20191201",
												"1": "1693",
												"2": "430.660000000000000000",
												"3": "2.3462",
												"4": "61"
											},
											{
												"0": "20191201",
												"1": "3713",
												"2": "3328.380000000000000000",
												"3": "2.4276",
												"4": "369"
											},
											{
												"0": "20191201",
												"1": "798",
												"2": "581.400000000000000000",
												"3": "2.4516",
												"4": "76"
											},
											{
												"0": "20191201",
												"1": "1249",
												"2": "2829.510000000000000000",
												"3": "2.569",
												"4": "447"
											},
											{
												"0": "20191201",
												"1": "3614",
												"2": "2778.300000000000000000",
												"3": "2.52",
												"4": "378"
											},
											{
												"0": "20191201",
												"1": "263",
												"2": "494.140000000000000000",
												"3": "2.5833",
												"4": "62"
											},
											{
												"0": "20191201",
												"1": "4774",
												"2": "3940.650000000000000000",
												"3": "2.4695",
												"4": "405"
											},
											{
												"0": "20191201",
												"1": "3415",
												"2": "744.180000000000000000",
												"3": "2.4688",
												"4": "79"
											},
											{
												"0": "20191201",
												"1": "3382",
												"2": "514.500000000000000000",
												"3": "2.2581",
												"4": "70"
											},
											{
												"0": "20191201",
												"1": "3643",
												"2": "544.310000000000000000",
												"3": "2.5238",
												"4": "53"
											},
											{
												"0": "20191201",
												"1": "3451",
												"2": "650.590000000000000000",
												"3": "2.6176",
												"4": "89"
											},
											{
												"0": "20191201",
												"1": "4433",
												"2": "435.000000000000000000",
												"3": "2.5588",
												"4": "87"
											},
											{
												"0": "20191201",
												"1": "4857",
												"2": "1173.920000000000000000",
												"3": "2.5143",
												"4": "88"
											},
											{
												"0": "20191201",
												"1": "2769",
												"2": "638.220000000000000000",
												"3": "2.64",
												"4": "66"
											},
											{
												"0": "20191201",
												"1": "2588",
												"2": "611.100000000000000000",
												"3": "2.5",
												"4": "70"
											},
											{
												"0": "20191201",
												"1": "1945",
												"2": "736.300000000000000000",
												"3": "2.4667",
												"4": "74"
											},
											{
												"0": "20191201",
												"1": "1517",
												"2": "330.510000000000000000",
												"3": "2.5556",
												"4": "69"
											},
											{
												"0": "20191201",
												"1": "1810",
												"2": "656.750000000000000000",
												"3": "2.6296",
												"4": "71"
											},
											{
												"0": "20191201",
												"1": "533",
												"2": "406.870000000000000000",
												"3": "2.3462",
												"4": "61"
											},
											{
												"0": "20191201",
												"1": "830",
												"2": "566.890000000000000000",
												"3": "2.7667",
												"4": "83"
											},
											{
												"0": "20191201",
												"1": "1109",
												"2": "743.760000000000000000",
												"3": "2.5714",
												"4": "72"
											},
											{
												"0": "20191201",
												"1": "3712",
												"2": "509.960000000000000000",
												"3": "2.2593",
												"4": "61"
											},
											{
												"0": "20191201",
												"1": "833",
												"2": "925.120000000000000000",
												"3": "2.1852",
												"4": "59"
											},
											{
												"0": "20191201",
												"1": "430",
												"2": "504.810000000000000000",
												"3": "2.6333",
												"4": "79"
											},
											{
												"0": "20191201",
												"1": "210",
												"2": "17490.000000000000000000",
												"3": "2.5422",
												"4": "1749"
											},
											{
												"0": "20191201",
												"1": "1173",
												"2": "3138.200000000000000000",
												"3": "2.5549",
												"4": "442"
											},
											{
												"0": "20191201",
												"1": "4364",
												"2": "385.920000000000000000",
												"3": "2.5714",
												"4": "72"
											},
											{
												"0": "20191201",
												"1": "427",
												"2": "2958.000000000000000000",
												"3": "2.5758",
												"4": "425"
											},
											{
												"0": "20191201",
												"1": "3086",
												"2": "525.600000000000000000",
												"3": "2.5806",
												"4": "80"
											},
											{
												"0": "20191201",
												"1": "1359",
												"2": "4410.940000000000000000",
												"3": "2.4108",
												"4": "446"
											},
											{
												"0": "20191201",
												"1": "2955",
												"2": "626.400000000000000000",
												"3": "2.4167",
												"4": "58"
											},
											{
												"0": "20191201",
												"1": "579",
												"2": "599.060000000000000000",
												"3": "2.8519",
												"4": "77"
											},
											{
												"0": "20191201",
												"1": "2734",
												"2": "906.460000000000000000",
												"3": "2.44",
												"4": "61"
											},
											{
												"0": "20191201",
												"1": "4253",
												"2": "589.600000000000000000",
												"3": "2.2857",
												"4": "80"
											},
											{
												"0": "20191201",
												"1": "1374",
												"2": "743.030000000000000000",
												"3": "2.68",
												"4": "67"
											},
											{
												"0": "20191201",
												"1": "1982",
												"2": "670.600000000000000000",
												"3": "2.3333",
												"4": "70"
											},
											{
												"0": "20191201",
												"1": "1196",
												"2": "368.280000000000000000",
												"3": "2.3846",
												"4": "62"
											},
											{
												"0": "20191201",
												"1": "3484",
												"2": "540.640000000000000000",
												"3": "2.48",
												"4": "62"
											},
											{
												"0": "20191201",
												"1": "1802",
												"2": "432.390000000000000000",
												"3": "2.4483",
												"4": "71"
											},
											{
												"0": "20191201",
												"1": "790",
												"2": "599.080000000000000000",
												"3": "2.8333",
												"4": "68"
											},
											{
												"0": "20191201",
												"1": "4499",
												"2": "629.060000000000000000",
												"3": "2.4483",
												"4": "71"
											},
											{
												"0": "20191201",
												"1": "2526",
												"2": "615.030000000000000000",
												"3": "2.6774",
												"4": "83"
											},
											{
												"0": "20191201",
												"1": "604",
												"2": "969.000000000000000000",
												"3": "2.8571",
												"4": "100"
											},
											{
												"0": "20191201",
												"1": "4554",
												"2": "321.950000000000000000",
												"3": "2.35",
												"4": "47"
											},
											{
												"0": "20191201",
												"1": "4962",
												"2": "583.440000000000000000",
												"3": "2.3636",
												"4": "78"
											},
											{
												"0": "20191201",
												"1": "395",
												"2": "542.100000000000000000",
												"3": "2.6",
												"4": "65"
											},
											{
												"0": "20191201",
												"1": "4952",
												"2": "3134.760000000000000000",
												"3": "2.5167",
												"4": "453"
											},
											{
												"0": "20191201",
												"1": "3559",
												"2": "711.040000000000000000",
												"3": "2.75",
												"4": "88"
											},
											{
												"0": "20191201",
												"1": "565",
												"2": "5419.430000000000000000",
												"3": "2.6257",
												"4": "449"
											},
											{
												"0": "20191201",
												"1": "1891",
												"2": "696.150000000000000000",
												"3": "2.4074",
												"4": "65"
											},
											{
												"0": "20191201",
												"1": "1830",
												"2": "3688.080000000000000000",
												"3": "2.5066",
												"4": "381"
											},
											{
												"0": "20191201",
												"1": "3779",
												"2": "677.040000000000000000",
												"3": "2.8966",
												"4": "84"
											},
											{
												"0": "20191201",
												"1": "3887",
												"2": "2773.230000000000000000",
												"3": "2.4454",
												"4": "291"
											},
											{
												"0": "20191201",
												"1": "730",
												"2": "1029.000000000000000000",
												"3": "2.45",
												"4": "98"
											},
											{
												"0": "20191201",
												"1": "776",
												"2": "421.880000000000000000",
												"3": "2.5238",
												"4": "53"
											},
											{
												"0": "20191201",
												"1": "4617",
												"2": "2501.420000000000000000",
												"3": "2.3974",
												"4": "362"
											},
											{
												"0": "20191201",
												"1": "3472",
												"2": "494.640000000000000000",
												"3": "2.88",
												"4": "72"
											},
											{
												"0": "20191201",
												"1": "3073",
												"2": "2832.690000000000000000",
												"3": "2.4015",
												"4": "329"
											},
											{
												"0": "20191201",
												"1": "1423",
												"2": "467.840000000000000000",
												"3": "2.3704",
												"4": "64"
											},
											{
												"0": "20191201",
												"1": "3422",
												"2": "594.000000000000000000",
												"3": "2.8387",
												"4": "88"
											},
											{
												"0": "20191201",
												"1": "4306",
												"2": "547.300000000000000000",
												"3": "2.1667",
												"4": "65"
											},
											{
												"0": "20191201",
												"1": "4140",
												"2": "670.140000000000000000",
												"3": "2.3548",
												"4": "73"
											},
											{
												"0": "20191201",
												"1": "3784",
												"2": "587.160000000000000000",
												"3": "2.25",
												"4": "63"
											},
											{
												"0": "20191201",
												"1": "656",
												"2": "413.400000000000000000",
												"3": "2.6897",
												"4": "78"
											},
											{
												"0": "20191201",
												"1": "3089",
												"2": "384.480000000000000000",
												"3": "2.1818",
												"4": "48"
											},
											{
												"0": "20191201",
												"1": "1879",
												"2": "653.480000000000000000",
												"3": "2.3846",
												"4": "62"
											},
											{
												"0": "20191201",
												"1": "3899",
												"2": "529.760000000000000000",
												"3": "2.3158",
												"4": "44"
											},
											{
												"0": "20191201",
												"1": "1322",
												"2": "404.820000000000000000",
												"3": "2.6",
												"4": "78"
											},
											{
												"0": "20191201",
												"1": "2009",
												"2": "342.320000000000000000",
												"3": "2.2",
												"4": "44"
											},
											{
												"0": "20191201",
												"1": "1520",
												"2": "671.470000000000000000",
												"3": "2.5938",
												"4": "83"
											},
											{
												"0": "20191201",
												"1": "2851",
												"2": "2121.000000000000000000",
												"3": "2.5897",
												"4": "404"
											},
											{
												"0": "20191201",
												"1": "2829",
												"2": "380.240000000000000000",
												"3": "2.1538",
												"4": "56"
											},
											{
												"0": "20191201",
												"1": "3072",
												"2": "3434.200000000000000000",
												"3": "2.4778",
												"4": "446"
											},
											{
												"0": "20191201",
												"1": "3426",
												"2": "4225.080000000000000000",
												"3": "2.6346",
												"4": "411"
											},
											{
												"0": "20191201",
												"1": "3441",
												"2": "5141.250000000000000000",
												"3": "2.4351",
												"4": "375"
											},
											{
												"0": "20191201",
												"1": "3515",
												"2": "621.360000000000000000",
												"3": "1.9459",
												"4": "72"
											},
											{
												"0": "20191201",
												"1": "1172",
												"2": "2509.040000000000000000",
												"3": "2.3407",
												"4": "316"
											},
											{
												"0": "20191201",
												"1": "1097",
												"2": "4284.140000000000000000",
												"3": "2.4913",
												"4": "431"
											},
											{
												"0": "20191201",
												"1": "1726",
												"2": "599.420000000000000000",
												"3": "2.3243",
												"4": "86"
											},
											{
												"0": "20191201",
												"1": "271",
												"2": "767.360000000000000000",
												"3": "2.6667",
												"4": "88"
											},
											{
												"0": "20191201",
												"1": "3380",
												"2": "674.790000000000000000",
												"3": "2.7667",
												"4": "83"
											},
											{
												"0": "20191201",
												"1": "2525",
												"2": "338.800000000000000000",
												"3": "2.5455",
												"4": "56"
											},
											{
												"0": "20191201",
												"1": "1973",
												"2": "826.020000000000000000",
												"3": "2.8889",
												"4": "78"
											},
											{
												"0": "20191201",
												"1": "4059",
												"2": "537.600000000000000000",
												"3": "2.625",
												"4": "84"
											},
											{
												"0": "20191201",
												"1": "4180",
												"2": "384.450000000000000000",
												"3": "2.5",
												"4": "55"
											},
											{
												"0": "20191201",
												"1": "996",
												"2": "539.240000000000000000",
												"3": "2.5185",
												"4": "68"
											},
											{
												"0": "20191201",
												"1": "3514",
												"2": "938.730000000000000000",
												"3": "2.6774",
												"4": "83"
											},
											{
												"0": "20191201",
												"1": "1434",
												"2": "442.060000000000000000",
												"3": "2.3846",
												"4": "62"
											},
											{
												"0": "20191201",
												"1": "2655",
												"2": "487.210000000000000000",
												"3": "2.5938",
												"4": "83"
											},
											{
												"0": "20191201",
												"1": "187",
												"2": "10664.000000000000000000",
												"3": "2.5203",
												"4": "1240"
											},
											{
												"0": "20191201",
												"1": "4915",
												"2": "631.040000000000000000",
												"3": "2.3448",
												"4": "68"
											},
											{
												"0": "20191201",
												"1": "1294",
												"2": "546.340000000000000000",
												"3": "2.36",
												"4": "59"
											},
											{
												"0": "20191201",
												"1": "2328",
												"2": "4695.720000000000000000",
												"3": "2.2866",
												"4": "359"
											},
											{
												"0": "20191201",
												"1": "4025",
												"2": "3183.660000000000000000",
												"3": "2.5556",
												"4": "414"
											},
											{
												"0": "20191201",
												"1": "4709",
												"2": "1855.620000000000000000",
												"3": "2.4853",
												"4": "338"
											},
											{
												"0": "20191201",
												"1": "3125",
												"2": "4782.540000000000000000",
												"3": "2.4125",
												"4": "386"
											},
											{
												"0": "20191201",
												"1": "89",
												"2": "11227.160000000000000000",
												"3": "2.472",
												"4": "1414"
											},
											{
												"0": "20191201",
												"1": "1660",
												"2": "3378.180000000000000000",
												"3": "2.5068",
												"4": "366"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "2",
												"name": "(sum)ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "3",
												"name": "(avg)Quantity",
												"type": "double"
											},
											{
												"key": "4",
												"name": "(sum)Quantity",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Working with Spark DataFrames in Synapse Spark"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Working with schemas and lake databases\r\n",
							"\r\n",
							"Use `spark.read.csv()` to load the data from the source public blob storage account and display its schema and shape."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.types import *\r\n",
							"import numpy as np\r\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"manualSchema = StructType([\r\n",
							"  StructField(\"CustomerId\", StringType(), True),\r\n",
							"  StructField(\"ProductId\", StringType(), True),\r\n",
							"  StructField(\"Rating\", LongType(), True),\r\n",
							"  StructField(\"Cost\", FloatType(), True),\r\n",
							"  StructField(\"Size\", FloatType(), True),\r\n",
							"  StructField(\"Price\", FloatType(), True),\r\n",
							"  StructField(\"PrimaryBrandId\", LongType(), True),\r\n",
							"  StructField(\"GenderId\", LongType(), True),\r\n",
							"  StructField(\"MaritalStatus\", LongType(), True),\r\n",
							"  StructField(\"LowerIncomeBound\", FloatType(), True),\r\n",
							"  StructField(\"UpperIncomeBound\", FloatType(), True)\r\n",
							"])"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"url = \"abfss://wwi-02@dataairawdls.dfs.core.windows.net/data/PersonalizedData.csv\"\r\n",
							"raw_data = spark.read.csv(url, header=True, schema=manualSchema)\r\n",
							"print(\"Schema: \")\r\n",
							"raw_data.printSchema()\r\n",
							"\r\n",
							"df = raw_data.toPandas()\r\n",
							"print(\"Shape: \", df.shape)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Create a new Lake Database. Observe the use of the `%%spark` magic to switch the language of the cell to Scala."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\r\n",
							"spark.sql(\"CREATE DATABASE IF NOT EXISTS Customers\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Save the dataframe as a table in the newly created database."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"raw_data.write.mode(\"overwrite\").saveAsTable(\"Customers.Customer\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Observe the newly created database and table. You can find them by navigating in Synapse Studio to the `Data` hub, and selecting the `Lake database` group from the `Workspace` section.\r\n",
							"\r\n",
							"If you rightclick on the table, and select the `New SQL script` option, you will be able to run a SQL query on the table using the serverless SQL pool. This shows how the Spark and Serverless SQL runtimes share the schema information of the lake database.\r\n",
							"\r\n",
							"![Newly created lake database and table](https://solliancepublicdata.blob.core.windows.net/synapse-l400/notebook-images/customers-lake-database.png)"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Spark DataFrame operations\r\n",
							"\r\n",
							"Load another DataFrame, this time from multiple folders located in the Synapse workspace data lake."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df_sales = spark.read.load('abfss://wwi-02@dataairawdls.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/*/*.parquet', format='parquet')\r\n",
							"display(df_sales.limit(10))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Apache Spark evaluates the file contents to infer the schema. This automatic inference is sufficient for data exploration and most transformation tasks. However, when you load data to an external resource like a SQL pool table, sometimes you need to declare your own schema and apply that to the dataset."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_sales.printSchema()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Apply grouping and aggregation operations to find daily total quantity, average quantity, and total profit, per product.\r\n",
							"\r\n",
							"Observe how applying the operations to the DataFrame has no effect yet. This is because the chain does not end with an operation that would force the materialization (execution) of the chain of operations."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.types import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"profitByDateProduct = (df_sales.groupBy(\"TransactionDate\",\"ProductId\")\r\n",
							"    .agg(\r\n",
							"        sum(\"ProfitAmount\").alias(\"(sum)ProfitAmount\"),\r\n",
							"        round(avg(\"Quantity\"), 4).alias(\"(avg)Quantity\"),\r\n",
							"        sum(\"Quantity\").alias(\"(sum)Quantity\"))\r\n",
							"    .orderBy(\"TransactionDate\"))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Call `limit()` to materialize the operations."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(profitByDateProduct.limit(100))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## DataFrame partitions"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check the number of partitions automatically determined by Spark."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_sales.rdd.getNumPartitions()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Repartition the Spark dataframe (reorganize it into 10 partitions)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_sales = df_sales.repartition(10)\r\n",
							"df_sales.rdd.getNumPartitions()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Persist the Spark dataframe to the data lake storage. Once execution completes, check the `/temp/sales1` data lake location to confirm the write operation generated 10 separate Parquet files (according to the new number of partitions)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_sales.write.mode('overwrite').parquet('abfss://wwi-02@dataairawdls.dfs.core.windows.net/temp/sales1')"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Repartition again the dataframe, this time based on the values of the `TransactionDate` column. Once execution completes, check the `/temp/sales2` data lake location to confirm the write operation generated 31 separate Parquet files organized in subfolders named after the values of the `TransactionDate` column."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_sales.write.partitionBy('TransactionDate').mode('overwrite').parquet('abfss://wwi-02@dataairawdls.dfs.core.windows.net/temp/sales2')"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_spark deltalake')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_machine learning"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "59eeda99-9beb-431e-b1f3-29c9b566af2e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"e49d375f-660c-4e00-aa65-4015adaacb2d": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "0",
												"1": "2022-10-30 03:54:29.143",
												"4": "WRITE",
												"5": {
													"mode": "ErrorIfExists",
													"partitionBy": "[]"
												},
												"10": "Serializable",
												"11": "true",
												"12": {
													"numFiles": "1",
													"numOutputRows": "5000",
													"numOutputBytes": "135927"
												},
												"14": "Apache-Spark/3.2.2.5.0-73283859 Delta-Lake/1.2.1.6"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "version",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "timestamp",
												"type": "timestamp"
											},
											{
												"key": "2",
												"name": "userId",
												"type": "string"
											},
											{
												"key": "3",
												"name": "userName",
												"type": "string"
											},
											{
												"key": "4",
												"name": "operation",
												"type": "string"
											},
											{
												"key": "5",
												"name": "operationParameters",
												"type": "MapType(StringType,StringType,true)"
											},
											{
												"key": "6",
												"name": "job",
												"type": "StructType(StructField(jobId,StringType,true), StructField(jobName,StringType,true), StructField(runId,StringType,true), StructField(jobOwnerId,StringType,true), StructField(triggerType,StringType,true))"
											},
											{
												"key": "7",
												"name": "notebook",
												"type": "StructType(StructField(notebookId,StringType,true))"
											},
											{
												"key": "8",
												"name": "clusterId",
												"type": "string"
											},
											{
												"key": "9",
												"name": "readVersion",
												"type": "bigint"
											},
											{
												"key": "10",
												"name": "isolationLevel",
												"type": "string"
											},
											{
												"key": "11",
												"name": "isBlindAppend",
												"type": "boolean"
											},
											{
												"key": "12",
												"name": "operationMetrics",
												"type": "MapType(StringType,StringType,true)"
											},
											{
												"key": "13",
												"name": "userMetadata",
												"type": "string"
											},
											{
												"key": "14",
												"name": "engineInfo",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"a556b023-5d51-4f33-926a-290e384e25dc": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "1",
												"1": "2022-10-30 03:55:25.912",
												"4": "UPDATE",
												"5": {
													"predicate": "(Price#806 < 1500.0)"
												},
												"9": "0",
												"10": "Serializable",
												"11": "false",
												"12": {
													"numRemovedFiles": "1",
													"numCopiedRows": "4175",
													"executionTimeMs": "5189",
													"scanTimeMs": "3875",
													"numAddedFiles": "1",
													"numUpdatedRows": "825",
													"rewriteTimeMs": "1314"
												},
												"14": "Apache-Spark/3.2.2.5.0-73283859 Delta-Lake/1.2.1.6"
											},
											{
												"0": "0",
												"1": "2022-10-30 03:54:29.143",
												"4": "WRITE",
												"5": {
													"mode": "ErrorIfExists",
													"partitionBy": "[]"
												},
												"10": "Serializable",
												"11": "true",
												"12": {
													"numFiles": "1",
													"numOutputRows": "5000",
													"numOutputBytes": "135927"
												},
												"14": "Apache-Spark/3.2.2.5.0-73283859 Delta-Lake/1.2.1.6"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "version",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "timestamp",
												"type": "timestamp"
											},
											{
												"key": "2",
												"name": "userId",
												"type": "string"
											},
											{
												"key": "3",
												"name": "userName",
												"type": "string"
											},
											{
												"key": "4",
												"name": "operation",
												"type": "string"
											},
											{
												"key": "5",
												"name": "operationParameters",
												"type": "MapType(StringType,StringType,true)"
											},
											{
												"key": "6",
												"name": "job",
												"type": "StructType(StructField(jobId,StringType,true), StructField(jobName,StringType,true), StructField(runId,StringType,true), StructField(jobOwnerId,StringType,true), StructField(triggerType,StringType,true))"
											},
											{
												"key": "7",
												"name": "notebook",
												"type": "StructType(StructField(notebookId,StringType,true))"
											},
											{
												"key": "8",
												"name": "clusterId",
												"type": "string"
											},
											{
												"key": "9",
												"name": "readVersion",
												"type": "bigint"
											},
											{
												"key": "10",
												"name": "isolationLevel",
												"type": "string"
											},
											{
												"key": "11",
												"name": "isBlindAppend",
												"type": "boolean"
											},
											{
												"key": "12",
												"name": "operationMetrics",
												"type": "MapType(StringType,StringType,true)"
											},
											{
												"key": "13",
												"name": "userMetadata",
												"type": "string"
											},
											{
												"key": "14",
												"name": "engineInfo",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"9faef130-9387-4fe4-8b10-da74fd0bee1d": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "84fa61f6",
												"1": "84fdf5e6",
												"2": "1",
												"3": "1007.3703",
												"4": "100.9638",
												"5": "1504.0232",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.89",
												"10": "199993.3"
											},
											{
												"0": "84fa61f7",
												"1": "84fdf5e7",
												"2": "1",
												"3": "1009.0166",
												"4": "96.59175",
												"5": "1518.7986",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100003.62",
												"10": "199996.44"
											},
											{
												"0": "84fa61f8",
												"1": "84fdf5e8",
												"2": "1",
												"3": "1017.6357",
												"4": "101.38068",
												"5": "1501.3119",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.05",
												"10": "199989.2"
											},
											{
												"0": "84fa61f9",
												"1": "84fdf5e9",
												"2": "1",
												"3": "1016.6712",
												"4": "79.58175",
												"5": "1508.1149",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.766",
												"10": "199992.02"
											},
											{
												"0": "84fa61fa",
												"1": "84fdf5ea",
												"2": "0",
												"3": "1013.79095",
												"4": "91.339966",
												"5": "1517.5458",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100005.98",
												"10": "199996.42"
											},
											{
												"0": "84fa61fb",
												"1": "84fdf5eb",
												"2": "0",
												"3": "1006.5799",
												"4": "115.14108",
												"5": "1502.5461",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.805",
												"10": "199993.95"
											},
											{
												"0": "84fa61fc",
												"1": "84fdf5ec",
												"2": "1",
												"3": "1000.5137",
												"4": "80.513954",
												"5": "1497.9178",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.92",
												"10": "200000.39"
											},
											{
												"0": "84fa61fd",
												"1": "84fdf5ed",
												"2": "0",
												"3": "1003.7582",
												"4": "105.4664",
												"5": "1519.8564",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.68",
												"10": "199995.81"
											},
											{
												"0": "84fa61fe",
												"1": "84fdf5ee",
												"2": "1",
												"3": "1010.87427",
												"4": "82.881546",
												"5": "1496.1632",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.88",
												"10": "199993.94"
											},
											{
												"0": "84fa61ff",
												"1": "84fdf5ef",
												"2": "1",
												"3": "1006.59534",
												"4": "117.92625",
												"5": "1490.3739",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.43",
												"10": "199990.92"
											},
											{
												"0": "84fa6200",
												"1": "84fdf5f0",
												"2": "1",
												"3": "1007.6017",
												"4": "104.28117",
												"5": "1511.4437",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99991.445",
												"10": "199997.08"
											},
											{
												"0": "84fa6201",
												"1": "84fdf5f1",
												"2": "1",
												"3": "1007.5086",
												"4": "69.58855",
												"5": "1498.6346",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.625",
												"10": "200004.19"
											},
											{
												"0": "84fa6202",
												"1": "84fdf5f2",
												"2": "1",
												"3": "1011.01776",
												"4": "96.93414",
												"5": "1514.5658",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99992.92",
												"10": "199997.69"
											},
											{
												"0": "84fa6203",
												"1": "84fdf5f3",
												"2": "0",
												"3": "1001.9893",
												"4": "110.82803",
												"5": "1505.5265",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100013.63",
												"10": "199990.16"
											},
											{
												"0": "84fa6204",
												"1": "84fdf5f4",
												"2": "1",
												"3": "999.9027",
												"4": "113.381805",
												"5": "1511.2642",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99994.1",
												"10": "199999.19"
											},
											{
												"0": "84fa6205",
												"1": "84fdf5f5",
												"2": "1",
												"3": "1010.59296",
												"4": "95.068375",
												"5": "1508.7966",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99997.766",
												"10": "199995.47"
											},
											{
												"0": "84fa6206",
												"1": "84fdf5f6",
												"2": "1",
												"3": "1004.37335",
												"4": "113.30274",
												"5": "1519.3402",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.086",
												"10": "199991.23"
											},
											{
												"0": "84fa6207",
												"1": "84fdf5f7",
												"2": "0",
												"3": "1000.4937",
												"4": "111.04916",
												"5": "1499.971",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100016.766",
												"10": "199985.53"
											},
											{
												"0": "84fa6208",
												"1": "84fdf5f8",
												"2": "0",
												"3": "1006.55164",
												"4": "104.8999",
												"5": "1512.8274",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99993.34",
												"10": "199998.6"
											},
											{
												"0": "84fa6209",
												"1": "84fdf5f9",
												"2": "0",
												"3": "1001.3984",
												"4": "117.264694",
												"5": "1503.787",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.22",
												"10": "200001.44"
											},
											{
												"0": "84fa620a",
												"1": "84fdf5fa",
												"2": "0",
												"3": "1007.7925",
												"4": "87.71814",
												"5": "1516.6099",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100012.07",
												"10": "199994.58"
											},
											{
												"0": "84fa620b",
												"1": "84fdf5fb",
												"2": "1",
												"3": "1021.7862",
												"4": "89.299805",
												"5": "1511.9569",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.04",
												"10": "199993.1"
											},
											{
												"0": "84fa620c",
												"1": "84fdf5fc",
												"2": "0",
												"3": "1008.24133",
												"4": "106.57309",
												"5": "1509.3888",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.35",
												"10": "200001.3"
											},
											{
												"0": "84fa620d",
												"1": "84fdf5fd",
												"2": "0",
												"3": "1005.19763",
												"4": "99.94678",
												"5": "1506.0522",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.164",
												"10": "199991.12"
											},
											{
												"0": "84fa620e",
												"1": "84fdf5fe",
												"2": "0",
												"3": "1008.3458",
												"4": "107.51884",
												"5": "1500.3544",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.69",
												"10": "199994.45"
											},
											{
												"0": "84fa620f",
												"1": "84fdf5ff",
												"2": "0",
												"3": "1007.56683",
												"4": "102.44174",
												"5": "1512.2609",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.11",
												"10": "199996.8"
											},
											{
												"0": "84fa6210",
												"1": "84fdf600",
												"2": "1",
												"3": "1008.7391",
												"4": "110.059204",
												"5": "1502.2828",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.26",
												"10": "199997.34"
											},
											{
												"0": "84fa6211",
												"1": "84fdf601",
												"2": "1",
												"3": "1000.2438",
												"4": "109.64265",
												"5": "1507.403",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99998.65",
												"10": "199987.02"
											},
											{
												"0": "84fa6212",
												"1": "84fdf602",
												"2": "1",
												"3": "1000.6752",
												"4": "121.403046",
												"5": "1499.1406",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.7",
												"10": "199995.12"
											},
											{
												"0": "84fa6213",
												"1": "84fdf603",
												"2": "1",
												"3": "1006.74713",
												"4": "98.74666",
												"5": "1507.7097",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.914",
												"10": "199991.28"
											},
											{
												"0": "84fa6214",
												"1": "84fdf604",
												"2": "0",
												"3": "1014.4838",
												"4": "95.94507",
												"5": "1529.2463",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100012.6",
												"10": "199994.8"
											},
											{
												"0": "84fa6215",
												"1": "84fdf605",
												"2": "0",
												"3": "996.40814",
												"4": "87.937805",
												"5": "1504.9442",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.164",
												"10": "199993.16"
											},
											{
												"0": "84fa6216",
												"1": "84fdf606",
												"2": "1",
												"3": "1013.66925",
												"4": "98.60425",
												"5": "1502.8704",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.08",
												"10": "199989.19"
											},
											{
												"0": "84fa6217",
												"1": "84fdf607",
												"2": "0",
												"3": "1012.93225",
												"4": "72.67189",
												"5": "1494.5972",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.64",
												"10": "199995.44"
											},
											{
												"0": "84fa6218",
												"1": "84fdf608",
												"2": "0",
												"3": "1014.81757",
												"4": "95.94698",
												"5": "1508.2642",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.33",
												"10": "199993.34"
											},
											{
												"0": "84fa6219",
												"1": "84fdf609",
												"2": "0",
												"3": "1016.3798",
												"4": "75.12366",
												"5": "1493.0314",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.85",
												"10": "200003.2"
											},
											{
												"0": "84fa621a",
												"1": "84fdf60a",
												"2": "0",
												"3": "998.26355",
												"4": "90.6955",
												"5": "1504.7203",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100013.56",
												"10": "199988.61"
											},
											{
												"0": "84fa621b",
												"1": "84fdf60b",
												"2": "0",
												"3": "1007.22003",
												"4": "109.772705",
												"5": "1498.5217",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100001.81",
												"10": "200003.81"
											},
											{
												"0": "84fa621c",
												"1": "84fdf60c",
												"2": "1",
												"3": "1002.6765",
												"4": "116.03156",
												"5": "1509.3916",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.5",
												"10": "199998.22"
											},
											{
												"0": "84fa621d",
												"1": "84fdf60d",
												"2": "1",
												"3": "1002.1133",
												"4": "86.000854",
												"5": "1511.9421",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.9",
												"10": "199993.53"
											},
											{
												"0": "84fa621e",
												"1": "84fdf60e",
												"2": "0",
												"3": "1013.9551",
												"4": "88.451096",
												"5": "1502.1837",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.62",
												"10": "199991.98"
											},
											{
												"0": "84fa621f",
												"1": "84fdf60f",
												"2": "1",
												"3": "997.8997",
												"4": "90.079254",
												"5": "1500.6868",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.72",
												"10": "200000.44"
											},
											{
												"0": "84fa6220",
												"1": "84fdf610",
												"2": "0",
												"3": "1011.6124",
												"4": "90.8671",
												"5": "1508.4431",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.55",
												"10": "199996.73"
											},
											{
												"0": "84fa6221",
												"1": "84fdf611",
												"2": "0",
												"3": "1013.80774",
												"4": "108.75123",
												"5": "1504.5591",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99993.75",
												"10": "200006.3"
											},
											{
												"0": "84fa6222",
												"1": "84fdf612",
												"2": "0",
												"3": "1006.32764",
												"4": "116.70997",
												"5": "1499.2343",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.96",
												"10": "199997.06"
											},
											{
												"0": "84fa6223",
												"1": "84fdf613",
												"2": "0",
												"3": "1011.3758",
												"4": "110.66713",
												"5": "1533.7218",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100000.81",
												"10": "199999.66"
											},
											{
												"0": "84fa6224",
												"1": "84fdf614",
												"2": "1",
												"3": "1005.84937",
												"4": "113.33688",
												"5": "1505.6324",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.125",
												"10": "199994.9"
											},
											{
												"0": "84fa6225",
												"1": "84fdf615",
												"2": "1",
												"3": "1008.10205",
												"4": "115.184746",
												"5": "1497.791",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.03",
												"10": "199993.98"
											},
											{
												"0": "84fa6226",
												"1": "84fdf616",
												"2": "0",
												"3": "1017.1347",
												"4": "91.35335",
												"5": "1508.642",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.75",
												"10": "199997.1"
											},
											{
												"0": "84fa6227",
												"1": "84fdf617",
												"2": "0",
												"3": "998.2338",
												"4": "100.366844",
												"5": "1506.7955",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.35",
												"10": "199996.81"
											},
											{
												"0": "84fa6228",
												"1": "84fdf618",
												"2": "1",
												"3": "1013.95233",
												"4": "107.825226",
												"5": "1503.0101",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.08",
												"10": "200001.45"
											},
											{
												"0": "84fa6229",
												"1": "84fdf619",
												"2": "0",
												"3": "1004.07385",
												"4": "110.23711",
												"5": "1524.4114",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.28",
												"10": "200007.48"
											},
											{
												"0": "84fa622a",
												"1": "84fdf61a",
												"2": "1",
												"3": "1015.2539",
												"4": "97.823326",
												"5": "1517.3856",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100001.06",
												"10": "199997.42"
											},
											{
												"0": "84fa622b",
												"1": "84fdf61b",
												"2": "1",
												"3": "1005.4436",
												"4": "107.95358",
												"5": "1505.5764",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99996.56",
												"10": "199998.3"
											},
											{
												"0": "84fa622c",
												"1": "84fdf61c",
												"2": "1",
												"3": "1004.2307",
												"4": "118.06785",
												"5": "1506.9719",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.2",
												"10": "199992.22"
											},
											{
												"0": "84fa622d",
												"1": "84fdf61d",
												"2": "1",
												"3": "1010.0313",
												"4": "90.97641",
												"5": "1502.8436",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.27",
												"10": "199992.77"
											},
											{
												"0": "84fa622e",
												"1": "84fdf61e",
												"2": "1",
												"3": "1007.0913",
												"4": "113.258316",
												"5": "1492.7413",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.35",
												"10": "199998.86"
											},
											{
												"0": "84fa622f",
												"1": "84fdf61f",
												"2": "0",
												"3": "1011.8403",
												"4": "101.94185",
												"5": "1503.3372",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.54",
												"10": "199987.62"
											},
											{
												"0": "84fa6230",
												"1": "84fdf620",
												"2": "1",
												"3": "1007.5164",
												"4": "114.97758",
												"5": "1503.8619",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.9",
												"10": "199996.03"
											},
											{
												"0": "84fa6231",
												"1": "84fdf621",
												"2": "0",
												"3": "1010.6103",
												"4": "103.13192",
												"5": "1528.2584",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100004.19",
												"10": "199998.55"
											},
											{
												"0": "84fa6232",
												"1": "84fdf622",
												"2": "0",
												"3": "987.84406",
												"4": "95.5169",
												"5": "1490.0114",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.06",
												"10": "199990.39"
											},
											{
												"0": "84fa6233",
												"1": "84fdf623",
												"2": "0",
												"3": "1001.71045",
												"4": "111.70722",
												"5": "1512.9645",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.98",
												"10": "199997.36"
											},
											{
												"0": "84fa6234",
												"1": "84fdf624",
												"2": "0",
												"3": "1006.2745",
												"4": "98.63407",
												"5": "1512.5195",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.95",
												"10": "199996.08"
											},
											{
												"0": "84fa6235",
												"1": "84fdf625",
												"2": "0",
												"3": "1008.74023",
												"4": "99.70729",
												"5": "1504.1356",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.93",
												"10": "200004.06"
											},
											{
												"0": "84fa6236",
												"1": "84fdf626",
												"2": "1",
												"3": "997.32874",
												"4": "96.26517",
												"5": "1509.3201",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.1",
												"10": "199994.84"
											},
											{
												"0": "84fa6237",
												"1": "84fdf627",
												"2": "0",
												"3": "1006.7293",
												"4": "111.91",
												"5": "1510.9448",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.96",
												"10": "199988.78"
											},
											{
												"0": "84fa6238",
												"1": "84fdf628",
												"2": "0",
												"3": "1007.4654",
												"4": "93.55456",
												"5": "1503.72",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.164",
												"10": "199993.4"
											},
											{
												"0": "84fa6239",
												"1": "84fdf629",
												"2": "1",
												"3": "1015.6864",
												"4": "90.47398",
												"5": "1506.5687",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.74",
												"10": "199995.66"
											},
											{
												"0": "84fa623a",
												"1": "84fdf62a",
												"2": "0",
												"3": "997.5653",
												"4": "86.43973",
												"5": "1498.8197",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100006.02",
												"10": "199995.47"
											},
											{
												"0": "84fa623b",
												"1": "84fdf62b",
												"2": "0",
												"3": "1012.48785",
												"4": "103.153564",
												"5": "1505.111",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.5",
												"10": "199996.6"
											},
											{
												"0": "84fa623c",
												"1": "84fdf62c",
												"2": "0",
												"3": "1012.9345",
												"4": "104.42383",
												"5": "1506.1058",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.9",
												"10": "199998.81"
											},
											{
												"0": "84fa623d",
												"1": "84fdf62d",
												"2": "1",
												"3": "1000.6611",
												"4": "92.75416",
												"5": "1496.5865",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.21",
												"10": "199997.61"
											},
											{
												"0": "84fa623e",
												"1": "84fdf62e",
												"2": "1",
												"3": "999.9255",
												"4": "90.270874",
												"5": "1508.8367",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.51",
												"10": "199992.33"
											},
											{
												"0": "84fa623f",
												"1": "84fdf62f",
												"2": "1",
												"3": "1012.076",
												"4": "111.78121",
												"5": "1502.0425",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.82",
												"10": "199993.9"
											},
											{
												"0": "84fa6240",
												"1": "84fdf630",
												"2": "0",
												"3": "1008.18524",
												"4": "114.35108",
												"5": "1503.966",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100003.53",
												"10": "200000.38"
											},
											{
												"0": "84fa6241",
												"1": "84fdf631",
												"2": "1",
												"3": "1008.87964",
												"4": "91.67943",
												"5": "1511.3073",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.03",
												"10": "199999.67"
											},
											{
												"0": "84fa6242",
												"1": "84fdf632",
												"2": "1",
												"3": "1012.6998",
												"4": "81.81702",
												"5": "1503.2184",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.33",
												"10": "199991.55"
											},
											{
												"0": "84fa6243",
												"1": "84fdf633",
												"2": "0",
												"3": "1007.0423",
												"4": "102.74617",
												"5": "1502.0575",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100012.0",
												"10": "199987.75"
											},
											{
												"0": "84fa6244",
												"1": "84fdf634",
												"2": "1",
												"3": "1007.93665",
												"4": "110.136665",
												"5": "1514.8041",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.14",
												"10": "199992.75"
											},
											{
												"0": "84fa6245",
												"1": "84fdf635",
												"2": "1",
												"3": "1001.38666",
												"4": "91.64457",
												"5": "1514.7065",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.85",
												"10": "199998.27"
											},
											{
												"0": "84fa6246",
												"1": "84fdf636",
												"2": "0",
												"3": "998.7523",
												"4": "90.72949",
												"5": "1506.3961",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.26",
												"10": "199995.39"
											},
											{
												"0": "84fa6247",
												"1": "84fdf637",
												"2": "0",
												"3": "1004.2654",
												"4": "97.36056",
												"5": "1506.2438",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.8",
												"10": "199994.34"
											},
											{
												"0": "84fa6248",
												"1": "84fdf638",
												"2": "0",
												"3": "1004.8387",
												"4": "116.91454",
												"5": "1505.6803",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100004.96",
												"10": "199998.81"
											},
											{
												"0": "84fa6249",
												"1": "84fdf639",
												"2": "1",
												"3": "1015.40094",
												"4": "76.986855",
												"5": "1512.7028",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99997.33",
												"10": "200001.66"
											},
											{
												"0": "84fa624a",
												"1": "84fdf63a",
												"2": "1",
												"3": "1000.0319",
												"4": "113.36066",
												"5": "1507.0566",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.09",
												"10": "199994.12"
											},
											{
												"0": "84fa624b",
												"1": "84fdf63b",
												"2": "1",
												"3": "1012.57886",
												"4": "75.75878",
												"5": "1504.2468",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.28",
												"10": "199994.16"
											},
											{
												"0": "84fa624c",
												"1": "84fdf63c",
												"2": "0",
												"3": "999.6358",
												"4": "119.592804",
												"5": "1512.5842",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.28",
												"10": "200010.69"
											},
											{
												"0": "84fa624d",
												"1": "84fdf63d",
												"2": "1",
												"3": "998.1961",
												"4": "92.49852",
												"5": "1501.5432",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.05",
												"10": "199992.28"
											},
											{
												"0": "84fa624e",
												"1": "84fdf63e",
												"2": "1",
												"3": "1002.9443",
												"4": "110.599815",
												"5": "1505.5073",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.77",
												"10": "200004.55"
											},
											{
												"0": "84fa624f",
												"1": "84fdf63f",
												"2": "1",
												"3": "1009.73206",
												"4": "112.85776",
												"5": "1503.2206",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.86",
												"10": "199995.14"
											},
											{
												"0": "84fa6250",
												"1": "84fdf640",
												"2": "0",
												"3": "1007.1105",
												"4": "100.39834",
												"5": "1507.2678",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100008.18",
												"10": "199993.84"
											},
											{
												"0": "84fa6251",
												"1": "84fdf641",
												"2": "1",
												"3": "1004.189",
												"4": "76.16396",
												"5": "1493.798",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99988.195",
												"10": "199992.64"
											},
											{
												"0": "84fa6252",
												"1": "84fdf642",
												"2": "1",
												"3": "995.5943",
												"4": "88.44843",
												"5": "1497.8171",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.766",
												"10": "199993.0"
											},
											{
												"0": "84fa6253",
												"1": "84fdf643",
												"2": "0",
												"3": "1009.37823",
												"4": "92.07071",
												"5": "1501.2407",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.41",
												"10": "199996.19"
											},
											{
												"0": "84fa6254",
												"1": "84fdf644",
												"2": "1",
												"3": "1009.1966",
												"4": "104.14306",
												"5": "1508.0121",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.65",
												"10": "199994.77"
											},
											{
												"0": "84fa6255",
												"1": "84fdf645",
												"2": "0",
												"3": "1006.6566",
												"4": "93.21787",
												"5": "1515.1943",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.41",
												"10": "199997.67"
											},
											{
												"0": "84fa6256",
												"1": "84fdf646",
												"2": "0",
												"3": "1008.4443",
												"4": "105.2184",
												"5": "1517.198",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100011.555",
												"10": "199993.1"
											},
											{
												"0": "84fa6257",
												"1": "84fdf647",
												"2": "0",
												"3": "1004.32025",
												"4": "76.22097",
												"5": "1506.7433",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100014.5",
												"10": "199997.53"
											},
											{
												"0": "84fa6258",
												"1": "84fdf648",
												"2": "1",
												"3": "1007.3914",
												"4": "103.76118",
												"5": "1507.2433",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.98",
												"10": "200002.94"
											},
											{
												"0": "84fa6259",
												"1": "84fdf649",
												"2": "0",
												"3": "1009.0623",
												"4": "110.60865",
												"5": "1510.054",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.37",
												"10": "199993.6"
											},
											{
												"0": "84fa625a",
												"1": "84fdf64a",
												"2": "0",
												"3": "1009.7255",
												"4": "121.6303",
												"5": "1498.4003",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.55",
												"10": "199989.27"
											},
											{
												"0": "84fa625b",
												"1": "84fdf64b",
												"2": "0",
												"3": "1008.0056",
												"4": "110.62411",
												"5": "1500.1392",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.02",
												"10": "199995.92"
											},
											{
												"0": "84fa625c",
												"1": "84fdf64c",
												"2": "0",
												"3": "1014.5155",
												"4": "86.56738",
												"5": "1501.1223",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.44",
												"10": "199991.78"
											},
											{
												"0": "84fa625d",
												"1": "84fdf64d",
												"2": "1",
												"3": "1006.8018",
												"4": "104.236145",
												"5": "1514.7982",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99993.4",
												"10": "199993.31"
											},
											{
												"0": "84fa625e",
												"1": "84fdf64e",
												"2": "0",
												"3": "1003.35504",
												"4": "115.63781",
												"5": "1513.3777",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.2",
												"10": "199992.55"
											},
											{
												"0": "84fa625f",
												"1": "84fdf64f",
												"2": "0",
												"3": "1004.7379",
												"4": "116.57368",
												"5": "1508.4009",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100012.02",
												"10": "199995.73"
											},
											{
												"0": "84fa6260",
												"1": "84fdf650",
												"2": "1",
												"3": "1002.5024",
												"4": "92.940735",
												"5": "1505.7405",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.25",
												"10": "199990.7"
											},
											{
												"0": "84fa6261",
												"1": "84fdf651",
												"2": "1",
												"3": "1020.7799",
												"4": "85.77498",
												"5": "1508.885",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.84",
												"10": "199994.56"
											},
											{
												"0": "84fa6262",
												"1": "84fdf652",
												"2": "0",
												"3": "1008.87714",
												"4": "82.62276",
												"5": "1507.4791",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100004.86",
												"10": "199995.05"
											},
											{
												"0": "84fa6263",
												"1": "84fdf653",
												"2": "0",
												"3": "1009.14746",
												"4": "111.99028",
												"5": "1501.7739",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100004.45",
												"10": "199993.25"
											},
											{
												"0": "84fa6264",
												"1": "84fdf654",
												"2": "0",
												"3": "1010.57056",
												"4": "103.74594",
												"5": "1515.4358",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100000.484",
												"10": "200000.78"
											},
											{
												"0": "84fa6265",
												"1": "84fdf655",
												"2": "1",
												"3": "1002.3103",
												"4": "113.61789",
												"5": "1506.3407",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.09",
												"10": "199999.19"
											},
											{
												"0": "84fa6266",
												"1": "84fdf656",
												"2": "1",
												"3": "1007.4876",
												"4": "104.535484",
												"5": "1512.0907",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.516",
												"10": "200001.33"
											},
											{
												"0": "84fa6267",
												"1": "84fdf657",
												"2": "1",
												"3": "1010.9406",
												"4": "91.34944",
												"5": "1512.1292",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100002.32",
												"10": "199995.69"
											},
											{
												"0": "84fa6268",
												"1": "84fdf658",
												"2": "0",
												"3": "999.7842",
												"4": "110.312",
												"5": "1507.8765",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.875",
												"10": "199993.08"
											},
											{
												"0": "84fa6269",
												"1": "84fdf659",
												"2": "0",
												"3": "1006.46747",
												"4": "89.83904",
												"5": "1512.6381",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.41",
												"10": "199992.36"
											},
											{
												"0": "84fa626a",
												"1": "84fdf65a",
												"2": "1",
												"3": "1007.02716",
												"4": "109.795616",
												"5": "1510.4318",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.16",
												"10": "199994.45"
											},
											{
												"0": "84fa626b",
												"1": "84fdf65b",
												"2": "0",
												"3": "1005.91907",
												"4": "113.81577",
												"5": "1507.9287",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100002.836",
												"10": "199996.72"
											},
											{
												"0": "84fa626c",
												"1": "84fdf65c",
												"2": "0",
												"3": "1000.9431",
												"4": "116.16062",
												"5": "1508.1245",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.08",
												"10": "199998.19"
											},
											{
												"0": "84fa626d",
												"1": "84fdf65d",
												"2": "0",
												"3": "1012.3146",
												"4": "95.61117",
												"5": "1510.9723",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.76",
												"10": "199992.92"
											},
											{
												"0": "84fa626e",
												"1": "84fdf65e",
												"2": "0",
												"3": "994.47473",
												"4": "95.34197",
												"5": "1512.4426",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100011.164",
												"10": "199994.19"
											},
											{
												"0": "84fa626f",
												"1": "84fdf65f",
												"2": "1",
												"3": "1000.00354",
												"4": "103.86274",
												"5": "1512.7207",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.71",
												"10": "199998.98"
											},
											{
												"0": "84fa6270",
												"1": "84fdf660",
												"2": "1",
												"3": "1005.0606",
												"4": "125.39134",
												"5": "1497.2139",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.28",
												"10": "199992.39"
											},
											{
												"0": "84fa6271",
												"1": "84fdf661",
												"2": "1",
												"3": "1006.43274",
												"4": "91.38149",
												"5": "1521.1549",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100002.945",
												"10": "199994.77"
											},
											{
												"0": "84fa6272",
												"1": "84fdf662",
												"2": "0",
												"3": "1012.13965",
												"4": "99.14232",
												"5": "1508.656",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.51",
												"10": "199996.17"
											},
											{
												"0": "84fa6273",
												"1": "84fdf663",
												"2": "1",
												"3": "1010.0191",
												"4": "102.62186",
												"5": "1506.5253",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.41",
												"10": "199993.9"
											},
											{
												"0": "84fa6274",
												"1": "84fdf664",
												"2": "1",
												"3": "1013.6138",
												"4": "94.37386",
												"5": "1502.2332",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99986.8",
												"10": "199993.55"
											},
											{
												"0": "84fa6275",
												"1": "84fdf665",
												"2": "0",
												"3": "1002.5237",
												"4": "113.58871",
												"5": "1505.4739",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.234",
												"10": "199995.03"
											},
											{
												"0": "84fa6276",
												"1": "84fdf666",
												"2": "0",
												"3": "1010.71423",
												"4": "96.698975",
												"5": "1512.7831",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100009.51",
												"10": "199991.36"
											},
											{
												"0": "84fa6277",
												"1": "84fdf667",
												"2": "0",
												"3": "1007.3253",
												"4": "109.98761",
												"5": "1503.4974",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.82",
												"10": "199990.73"
											},
											{
												"0": "84fa6278",
												"1": "84fdf668",
												"2": "0",
												"3": "1003.89545",
												"4": "110.09814",
												"5": "1509.8628",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.79",
												"10": "199998.86"
											},
											{
												"0": "84fa6279",
												"1": "84fdf669",
												"2": "1",
												"3": "1003.2442",
												"4": "97.48945",
												"5": "1510.2512",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.336",
												"10": "199993.27"
											},
											{
												"0": "84fa627a",
												"1": "84fdf66a",
												"2": "0",
												"3": "1015.5623",
												"4": "95.93568",
												"5": "1518.9084",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.22",
												"10": "199990.4"
											},
											{
												"0": "84fa627b",
												"1": "84fdf66b",
												"2": "1",
												"3": "1004.1766",
												"4": "113.78102",
												"5": "1494.531",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.484",
												"10": "199998.33"
											},
											{
												"0": "84fa627c",
												"1": "84fdf66c",
												"2": "0",
												"3": "1015.3842",
												"4": "103.16695",
												"5": "1511.5953",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.875",
												"10": "199989.62"
											},
											{
												"0": "84fa627d",
												"1": "84fdf66d",
												"2": "0",
												"3": "1005.63196",
												"4": "97.3451",
												"5": "1504.6406",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100011.66",
												"10": "199989.75"
											},
											{
												"0": "84fa627e",
												"1": "84fdf66e",
												"2": "0",
												"3": "1019.1323",
												"4": "85.257225",
												"5": "1503.3206",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.88",
												"10": "199997.42"
											},
											{
												"0": "84fa627f",
												"1": "84fdf66f",
												"2": "1",
												"3": "1012.6265",
												"4": "97.38938",
												"5": "1514.7611",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99995.5",
												"10": "199993.77"
											},
											{
												"0": "84fa6280",
												"1": "84fdf670",
												"2": "0",
												"3": "1009.9519",
												"4": "106.15315",
												"5": "1516.9296",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.25",
												"10": "200000.86"
											},
											{
												"0": "84fa6281",
												"1": "84fdf671",
												"2": "0",
												"3": "1009.236",
												"4": "79.11352",
												"5": "1504.3751",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100012.81",
												"10": "199987.92"
											},
											{
												"0": "84fa6282",
												"1": "84fdf672",
												"2": "1",
												"3": "1008.40814",
												"4": "101.62771",
												"5": "1505.1565",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.375",
												"10": "200000.81"
											},
											{
												"0": "84fa6283",
												"1": "84fdf673",
												"2": "1",
												"3": "1008.6432",
												"4": "93.78198",
												"5": "1499.8031",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.09",
												"10": "200000.66"
											},
											{
												"0": "84fa6284",
												"1": "84fdf674",
												"2": "1",
												"3": "1012.9357",
												"4": "85.496735",
												"5": "1506.2318",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.016",
												"10": "199990.25"
											},
											{
												"0": "84fa6285",
												"1": "84fdf675",
												"2": "1",
												"3": "1008.1131",
												"4": "92.1038",
												"5": "1491.4006",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.19",
												"10": "199993.6"
											},
											{
												"0": "84fa6286",
												"1": "84fdf676",
												"2": "0",
												"3": "1000.36993",
												"4": "90.650536",
												"5": "1506.5497",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.06",
												"10": "199991.83"
											},
											{
												"0": "84fa6287",
												"1": "84fdf677",
												"2": "0",
												"3": "1001.47",
												"4": "82.22916",
												"5": "1498.7302",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.9",
												"10": "199998.45"
											},
											{
												"0": "84fa6288",
												"1": "84fdf678",
												"2": "0",
												"3": "1009.76306",
												"4": "107.714554",
												"5": "1502.0886",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100005.08",
												"10": "199998.45"
											},
											{
												"0": "84fa6289",
												"1": "84fdf679",
												"2": "0",
												"3": "1012.85645",
												"4": "104.68228",
												"5": "1499.9214",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.29",
												"10": "199996.89"
											},
											{
												"0": "84fa628a",
												"1": "84fdf67a",
												"2": "1",
												"3": "1008.7902",
												"4": "85.441124",
												"5": "1506.2347",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99998.45",
												"10": "199989.5"
											},
											{
												"0": "84fa628b",
												"1": "84fdf67b",
												"2": "1",
												"3": "1017.30835",
												"4": "95.24498",
												"5": "1515.4302",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99989.61",
												"10": "200001.7"
											},
											{
												"0": "84fa628c",
												"1": "84fdf67c",
												"2": "0",
												"3": "1009.6937",
												"4": "110.21076",
												"5": "1505.0612",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.88",
												"10": "199995.33"
											},
											{
												"0": "84fa628d",
												"1": "84fdf67d",
												"2": "1",
												"3": "1011.0733",
												"4": "92.133835",
												"5": "1513.7375",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100007.35",
												"10": "200004.05"
											},
											{
												"0": "84fa628e",
												"1": "84fdf67e",
												"2": "0",
												"3": "1002.56726",
												"4": "111.79075",
												"5": "1523.9182",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.02",
												"10": "199995.06"
											},
											{
												"0": "84fa628f",
												"1": "84fdf67f",
												"2": "1",
												"3": "1021.85895",
												"4": "81.31342",
												"5": "1502.5096",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99997.195",
												"10": "199996.44"
											},
											{
												"0": "84fa6290",
												"1": "84fdf680",
												"2": "0",
												"3": "1021.0",
												"4": "82.71882",
												"5": "1506.4596",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.97",
												"10": "199997.66"
											},
											{
												"0": "84fa6291",
												"1": "84fdf681",
												"2": "0",
												"3": "1007.9716",
												"4": "107.71871",
												"5": "1507.5956",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100009.04",
												"10": "199996.05"
											},
											{
												"0": "84fa632e",
												"1": "84fdf71e",
												"2": "0",
												"3": "1002.5113",
												"4": "92.500656",
												"5": "1504.8065",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.56",
												"10": "199997.95"
											},
											{
												"0": "84fa632f",
												"1": "84fdf71f",
												"2": "1",
												"3": "1006.0662",
												"4": "102.762505",
												"5": "1510.7823",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.086",
												"10": "199995.66"
											},
											{
												"0": "84fa6330",
												"1": "84fdf720",
												"2": "1",
												"3": "1013.9844",
												"4": "97.49917",
												"5": "1501.1248",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.82",
												"10": "199996.45"
											},
											{
												"0": "84fa6331",
												"1": "84fdf721",
												"2": "1",
												"3": "1014.9741",
												"4": "85.43863",
												"5": "1499.6396",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.375",
												"10": "199990.39"
											},
											{
												"0": "84fa6332",
												"1": "84fdf722",
												"2": "0",
												"3": "1010.36456",
												"4": "98.35442",
												"5": "1514.3397",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.6",
												"10": "199995.67"
											},
											{
												"0": "84fa6333",
												"1": "84fdf723",
												"2": "0",
												"3": "1015.398",
												"4": "86.81655",
												"5": "1514.9633",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.89",
												"10": "199991.34"
											},
											{
												"0": "84fa6334",
												"1": "84fdf724",
												"2": "1",
												"3": "1011.0917",
												"4": "105.29565",
												"5": "1509.3137",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99982.055",
												"10": "199990.98"
											},
											{
												"0": "84fa6335",
												"1": "84fdf725",
												"2": "0",
												"3": "1004.69025",
												"4": "119.069016",
												"5": "1502.5275",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.34",
												"10": "199999.6"
											},
											{
												"0": "84fa6336",
												"1": "84fdf726",
												"2": "0",
												"3": "1010.28174",
												"4": "107.90938",
												"5": "1509.8099",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.66",
												"10": "199996.72"
											},
											{
												"0": "84fa6337",
												"1": "84fdf727",
												"2": "1",
												"3": "1014.0283",
												"4": "86.47588",
												"5": "1520.2456",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99996.12",
												"10": "199995.86"
											},
											{
												"0": "84fa6338",
												"1": "84fdf728",
												"2": "1",
												"3": "1007.6911",
												"4": "113.82737",
												"5": "1512.2246",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.914",
												"10": "199999.39"
											},
											{
												"0": "84fa6339",
												"1": "84fdf729",
												"2": "0",
												"3": "1009.57184",
												"4": "107.86921",
												"5": "1515.3647",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.31",
												"10": "199993.17"
											},
											{
												"0": "84fa633a",
												"1": "84fdf72a",
												"2": "1",
												"3": "1006.5026",
												"4": "104.431145",
												"5": "1523.4313",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.16",
												"10": "199992.45"
											},
											{
												"0": "84fa633b",
												"1": "84fdf72b",
												"2": "1",
												"3": "1003.3033",
												"4": "113.63918",
												"5": "1510.0498",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99990.48",
												"10": "199986.64"
											},
											{
												"0": "84fa633c",
												"1": "84fdf72c",
												"2": "0",
												"3": "1008.7266",
												"4": "82.697685",
												"5": "1513.4279",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.984",
												"10": "199995.6"
											},
											{
												"0": "84fa633d",
												"1": "84fdf72d",
												"2": "1",
												"3": "1010.31195",
												"4": "94.919785",
												"5": "1518.8516",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.12",
												"10": "199995.72"
											},
											{
												"0": "84fa633e",
												"1": "84fdf72e",
												"2": "0",
												"3": "1017.75037",
												"4": "84.01665",
												"5": "1508.2744",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.625",
												"10": "199998.22"
											},
											{
												"0": "84fa633f",
												"1": "84fdf72f",
												"2": "0",
												"3": "1020.85956",
												"4": "87.37747",
												"5": "1513.2563",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100004.43",
												"10": "199997.89"
											},
											{
												"0": "84fa6340",
												"1": "84fdf730",
												"2": "0",
												"3": "1011.029",
												"4": "101.05316",
												"5": "1517.1659",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.875",
												"10": "199995.38"
											},
											{
												"0": "84fa6341",
												"1": "84fdf731",
												"2": "0",
												"3": "995.7164",
												"4": "90.224495",
												"5": "1505.4023",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.375",
												"10": "199997.97"
											},
											{
												"0": "84fa6342",
												"1": "84fdf732",
												"2": "1",
												"3": "1012.81824",
												"4": "104.54396",
												"5": "1489.6075",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.78",
												"10": "199997.58"
											},
											{
												"0": "84fa6343",
												"1": "84fdf733",
												"2": "0",
												"3": "1003.0238",
												"4": "103.97229",
												"5": "1517.599",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100001.55",
												"10": "200002.66"
											},
											{
												"0": "84fa6344",
												"1": "84fdf734",
												"2": "1",
												"3": "1004.07947",
												"4": "107.590195",
												"5": "1513.482",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.87",
												"10": "199997.0"
											},
											{
												"0": "84fa6345",
												"1": "84fdf735",
												"2": "1",
												"3": "1015.4837",
												"4": "94.2355",
												"5": "1509.0375",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.34",
												"10": "199998.22"
											},
											{
												"0": "84fa6346",
												"1": "84fdf736",
												"2": "0",
												"3": "1003.6024",
												"4": "74.79817",
												"5": "1497.749",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.87",
												"10": "199997.98"
											},
											{
												"0": "84fa6347",
												"1": "84fdf737",
												"2": "1",
												"3": "997.4681",
												"4": "123.08458",
												"5": "1509.6791",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.17",
												"10": "199996.45"
											},
											{
												"0": "84fa6348",
												"1": "84fdf738",
												"2": "0",
												"3": "1009.9383",
												"4": "99.39832",
												"5": "1502.086",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100013.32",
												"10": "199991.25"
											},
											{
												"0": "84fa6349",
												"1": "84fdf739",
												"2": "0",
												"3": "1005.7234",
												"4": "115.80604",
												"5": "1516.5046",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.53",
												"10": "199995.88"
											},
											{
												"0": "84fa634a",
												"1": "84fdf73a",
												"2": "0",
												"3": "997.6659",
												"4": "85.2923",
												"5": "1497.9302",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100012.875",
												"10": "199989.92"
											},
											{
												"0": "84fa634b",
												"1": "84fdf73b",
												"2": "0",
												"3": "1008.1969",
												"4": "104.83437",
												"5": "1512.6385",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.15",
												"10": "199995.39"
											},
											{
												"0": "84fa634c",
												"1": "84fdf73c",
												"2": "0",
												"3": "1002.89484",
												"4": "98.00322",
												"5": "1503.7166",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.87",
												"10": "199994.52"
											},
											{
												"0": "84fa634d",
												"1": "84fdf73d",
												"2": "1",
												"3": "1004.5692",
												"4": "102.17854",
												"5": "1496.5118",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.45",
												"10": "199993.23"
											},
											{
												"0": "84fa634e",
												"1": "84fdf73e",
												"2": "0",
												"3": "1012.238",
												"4": "93.68895",
												"5": "1510.9885",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100013.08",
												"10": "199989.6"
											},
											{
												"0": "84fa634f",
												"1": "84fdf73f",
												"2": "0",
												"3": "1005.67456",
												"4": "114.29932",
												"5": "1507.615",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100007.09",
												"10": "199992.44"
											},
											{
												"0": "84fa6350",
												"1": "84fdf740",
												"2": "1",
												"3": "1011.97217",
												"4": "82.5512",
												"5": "1502.4667",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.07",
												"10": "199993.2"
											},
											{
												"0": "84fa6351",
												"1": "84fdf741",
												"2": "0",
												"3": "1010.7489",
												"4": "106.88279",
												"5": "1517.881",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.08",
												"10": "199993.8"
											},
											{
												"0": "84fa6352",
												"1": "84fdf742",
												"2": "1",
												"3": "1010.01495",
												"4": "94.77467",
												"5": "1505.3447",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99984.305",
												"10": "199994.94"
											},
											{
												"0": "84fa6353",
												"1": "84fdf743",
												"2": "1",
												"3": "1002.67456",
												"4": "107.3832",
												"5": "1517.7831",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.32",
												"10": "199990.28"
											},
											{
												"0": "84fa6354",
												"1": "84fdf744",
												"2": "1",
												"3": "1009.3398",
												"4": "86.45765",
												"5": "1515.6649",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.42",
												"10": "199996.11"
											},
											{
												"0": "84fa6355",
												"1": "84fdf745",
												"2": "0",
												"3": "999.4562",
												"4": "106.0865",
												"5": "1512.7631",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.21",
												"10": "199994.64"
											},
											{
												"0": "84fa6356",
												"1": "84fdf746",
												"2": "0",
												"3": "1016.9659",
												"4": "102.29311",
												"5": "1506.4182",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100007.516",
												"10": "199998.92"
											},
											{
												"0": "84fa6357",
												"1": "84fdf747",
												"2": "0",
												"3": "987.5984",
												"4": "95.44947",
												"5": "1518.2028",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.76",
												"10": "199999.72"
											},
											{
												"0": "84fa6358",
												"1": "84fdf748",
												"2": "1",
												"3": "1008.9564",
												"4": "87.80036",
												"5": "1502.5582",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.12",
												"10": "199993.94"
											},
											{
												"0": "84fa6359",
												"1": "84fdf749",
												"2": "0",
												"3": "1002.7793",
												"4": "97.22224",
												"5": "1494.406",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.92",
												"10": "199992.06"
											},
											{
												"0": "84fa635a",
												"1": "84fdf74a",
												"2": "1",
												"3": "1007.3579",
												"4": "111.90633",
												"5": "1515.4963",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.11",
												"10": "199992.08"
											},
											{
												"0": "84fa635b",
												"1": "84fdf74b",
												"2": "1",
												"3": "1006.93506",
												"4": "113.126884",
												"5": "1507.2966",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.91",
												"10": "199994.95"
											},
											{
												"0": "84fa635c",
												"1": "84fdf74c",
												"2": "1",
												"3": "1006.30334",
												"4": "118.81225",
												"5": "1501.8257",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.734",
												"10": "199994.44"
											},
											{
												"0": "84fa635d",
												"1": "84fdf74d",
												"2": "1",
												"3": "997.6375",
												"4": "78.185104",
												"5": "1497.3578",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99995.055",
												"10": "199998.2"
											},
											{
												"0": "84fa635e",
												"1": "84fdf74e",
												"2": "1",
												"3": "1014.3741",
												"4": "94.69567",
												"5": "1519.1213",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99997.35",
												"10": "200003.1"
											},
											{
												"0": "84fa635f",
												"1": "84fdf74f",
												"2": "1",
												"3": "1016.05725",
												"4": "80.77946",
												"5": "1510.7393",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.25",
												"10": "199996.0"
											},
											{
												"0": "84fa6360",
												"1": "84fdf750",
												"2": "1",
												"3": "1011.3222",
												"4": "92.84054",
												"5": "1507.5034",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.195",
												"10": "199993.56"
											},
											{
												"0": "84fa6361",
												"1": "84fdf751",
												"2": "0",
												"3": "1022.11584",
												"4": "94.084854",
												"5": "1510.1138",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.84",
												"10": "199991.08"
											},
											{
												"0": "84fa6362",
												"1": "84fdf752",
												"2": "0",
												"3": "999.8002",
												"4": "100.67596",
												"5": "1514.1353",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.266",
												"10": "199994.36"
											},
											{
												"0": "84fa6363",
												"1": "84fdf753",
												"2": "0",
												"3": "1005.49097",
												"4": "83.02677",
												"5": "1509.1317",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100014.47",
												"10": "199994.56"
											},
											{
												"0": "84fa6364",
												"1": "84fdf754",
												"2": "1",
												"3": "1008.564",
												"4": "113.29956",
												"5": "1506.8523",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99998.53",
												"10": "199993.8"
											},
											{
												"0": "84fa6365",
												"1": "84fdf755",
												"2": "1",
												"3": "1007.7763",
												"4": "106.626945",
												"5": "1504.2148",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.836",
												"10": "199996.6"
											},
											{
												"0": "84fa6366",
												"1": "84fdf756",
												"2": "0",
												"3": "999.2628",
												"4": "111.41997",
												"5": "1521.3861",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.055",
												"10": "199997.55"
											},
											{
												"0": "84fa6367",
												"1": "84fdf757",
												"2": "1",
												"3": "1012.3035",
												"4": "89.89752",
												"5": "1512.3324",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.26",
												"10": "199997.1"
											},
											{
												"0": "84fa6368",
												"1": "84fdf758",
												"2": "0",
												"3": "1006.5879",
												"4": "99.28835",
												"5": "1512.4586",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.984",
												"10": "199993.95"
											},
											{
												"0": "84fa6369",
												"1": "84fdf759",
												"2": "1",
												"3": "1002.95215",
												"4": "91.38852",
												"5": "1494.8516",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.586",
												"10": "199996.69"
											},
											{
												"0": "84fa636a",
												"1": "84fdf75a",
												"2": "1",
												"3": "1013.29333",
												"4": "83.515015",
												"5": "1510.6948",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99994.11",
												"10": "199994.06"
											},
											{
												"0": "84fa636b",
												"1": "84fdf75b",
												"2": "1",
												"3": "1000.96765",
												"4": "114.53696",
												"5": "1501.0173",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99998.45",
												"10": "199999.36"
											},
											{
												"0": "84fa636c",
												"1": "84fdf75c",
												"2": "0",
												"3": "1005.2557",
												"4": "100.548515",
												"5": "1515.8652",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.44",
												"10": "199989.28"
											},
											{
												"0": "84fa636d",
												"1": "84fdf75d",
												"2": "1",
												"3": "1006.36993",
												"4": "97.22767",
												"5": "1504.3041",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100000.07",
												"10": "200003.33"
											},
											{
												"0": "84fa636e",
												"1": "84fdf75e",
												"2": "1",
												"3": "1006.7667",
												"4": "86.66509",
												"5": "1503.2311",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.76",
												"10": "199992.16"
											},
											{
												"0": "84fa636f",
												"1": "84fdf75f",
												"2": "0",
												"3": "1002.6594",
												"4": "120.46182",
												"5": "1508.3262",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.61",
												"10": "199998.88"
											},
											{
												"0": "84fa6370",
												"1": "84fdf760",
												"2": "1",
												"3": "1012.26544",
												"4": "103.053345",
												"5": "1499.8214",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.32",
												"10": "199995.72"
											},
											{
												"0": "84fa6371",
												"1": "84fdf761",
												"2": "1",
												"3": "1002.1128",
												"4": "89.75354",
												"5": "1505.1055",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99987.4",
												"10": "199987.58"
											},
											{
												"0": "84fa6372",
												"1": "84fdf762",
												"2": "0",
												"3": "1006.22534",
												"4": "100.001595",
												"5": "1501.4551",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100009.414",
												"10": "199999.77"
											},
											{
												"0": "84fa6373",
												"1": "84fdf763",
												"2": "1",
												"3": "1016.86884",
												"4": "95.73085",
												"5": "1510.9329",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.05",
												"10": "199996.2"
											},
											{
												"0": "84fa6374",
												"1": "84fdf764",
												"2": "0",
												"3": "1000.52985",
												"4": "79.61757",
												"5": "1500.7284",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100001.85",
												"10": "199991.78"
											},
											{
												"0": "84fa6375",
												"1": "84fdf765",
												"2": "1",
												"3": "1020.9026",
												"4": "73.163345",
												"5": "1511.8094",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99990.58",
												"10": "200002.28"
											},
											{
												"0": "84fa6376",
												"1": "84fdf766",
												"2": "1",
												"3": "1008.37164",
												"4": "100.9419",
												"5": "1514.8765",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99989.516",
												"10": "199997.6"
											},
											{
												"0": "84fa6377",
												"1": "84fdf767",
												"2": "0",
												"3": "1027.4323",
												"4": "73.86495",
												"5": "1519.1898",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.64",
												"10": "199998.05"
											},
											{
												"0": "84fa6378",
												"1": "84fdf768",
												"2": "0",
												"3": "1012.2139",
												"4": "88.56979",
												"5": "1511.1781",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.16",
												"10": "199996.31"
											},
											{
												"0": "84fa6379",
												"1": "84fdf769",
												"2": "1",
												"3": "1010.1211",
												"4": "108.84566",
												"5": "1500.2936",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.78",
												"10": "199995.05"
											},
											{
												"0": "84fa637a",
												"1": "84fdf76a",
												"2": "1",
												"3": "1007.7974",
												"4": "103.842125",
												"5": "1506.1025",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.66",
												"10": "199998.78"
											},
											{
												"0": "84fa637b",
												"1": "84fdf76b",
												"2": "1",
												"3": "1016.89355",
												"4": "78.63013",
												"5": "1514.8829",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.76",
												"10": "199992.69"
											},
											{
												"0": "84fa637c",
												"1": "84fdf76c",
												"2": "0",
												"3": "1004.7804",
												"4": "99.7355",
												"5": "1506.8667",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.97",
												"10": "199999.4"
											},
											{
												"0": "84fa637d",
												"1": "84fdf76d",
												"2": "1",
												"3": "1007.59607",
												"4": "84.83768",
												"5": "1506.7527",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.945",
												"10": "199992.75"
											},
											{
												"0": "84fa637e",
												"1": "84fdf76e",
												"2": "1",
												"3": "1009.14795",
												"4": "116.88854",
												"5": "1504.1165",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99991.516",
												"10": "199994.84"
											},
											{
												"0": "84fa637f",
												"1": "84fdf76f",
												"2": "1",
												"3": "1010.268",
												"4": "88.681885",
												"5": "1511.6042",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.97",
												"10": "199993.72"
											},
											{
												"0": "84fa6380",
												"1": "84fdf770",
												"2": "1",
												"3": "1011.75854",
												"4": "78.28555",
												"5": "1506.8649",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.91",
												"10": "200002.72"
											},
											{
												"0": "84fa6381",
												"1": "84fdf771",
												"2": "1",
												"3": "1007.67865",
												"4": "111.76162",
												"5": "1505.9956",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.87",
												"10": "199995.25"
											},
											{
												"0": "84fa6382",
												"1": "84fdf772",
												"2": "1",
												"3": "1006.3928",
												"4": "93.95334",
												"5": "1507.5521",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99983.61",
												"10": "199990.03"
											},
											{
												"0": "84fa6383",
												"1": "84fdf773",
												"2": "1",
												"3": "1009.1256",
												"4": "107.24265",
												"5": "1511.8518",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99990.41",
												"10": "200001.66"
											},
											{
												"0": "84fa6384",
												"1": "84fdf774",
												"2": "0",
												"3": "1010.5878",
												"4": "75.08232",
												"5": "1508.4718",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.586",
												"10": "199998.75"
											},
											{
												"0": "84fa6385",
												"1": "84fdf775",
												"2": "1",
												"3": "1012.70966",
												"4": "92.0779",
												"5": "1503.528",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.36",
												"10": "199994.78"
											},
											{
												"0": "84fa6386",
												"1": "84fdf776",
												"2": "0",
												"3": "1009.79095",
												"4": "110.62817",
												"5": "1511.7885",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100008.914",
												"10": "199992.7"
											},
											{
												"0": "84fa6387",
												"1": "84fdf777",
												"2": "1",
												"3": "997.34296",
												"4": "88.50942",
												"5": "1508.0876",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.85",
												"10": "199997.22"
											},
											{
												"0": "84fa6388",
												"1": "84fdf778",
												"2": "1",
												"3": "1010.25055",
												"4": "102.22367",
												"5": "1509.2065",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.08",
												"10": "199998.31"
											},
											{
												"0": "84fa6389",
												"1": "84fdf779",
												"2": "1",
												"3": "1004.7695",
												"4": "104.62824",
												"5": "1505.8026",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99993.51",
												"10": "199997.08"
											},
											{
												"0": "84fa638a",
												"1": "84fdf77a",
												"2": "0",
												"3": "1012.71765",
												"4": "104.16338",
												"5": "1500.3737",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.375",
												"10": "199996.47"
											},
											{
												"0": "84fa638b",
												"1": "84fdf77b",
												"2": "1",
												"3": "1004.124",
												"4": "111.86933",
												"5": "1503.9014",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.97",
												"10": "199997.2"
											},
											{
												"0": "84fa638c",
												"1": "84fdf77c",
												"2": "0",
												"3": "1007.897",
												"4": "114.35418",
												"5": "1510.7457",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100000.74",
												"10": "200000.31"
											},
											{
												"0": "84fa638d",
												"1": "84fdf77d",
												"2": "1",
												"3": "1009.96344",
												"4": "76.5871",
												"5": "1502.3114",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99988.45",
												"10": "199997.8"
											},
											{
												"0": "84fa638e",
												"1": "84fdf77e",
												"2": "0",
												"3": "1010.92676",
												"4": "97.5769",
												"5": "1508.2054",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.94",
												"10": "199997.62"
											},
											{
												"0": "84fa638f",
												"1": "84fdf77f",
												"2": "1",
												"3": "1018.706",
												"4": "85.39296",
												"5": "1515.647",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99995.375",
												"10": "200001.81"
											},
											{
												"0": "84fa6390",
												"1": "84fdf780",
												"2": "0",
												"3": "1009.87256",
												"4": "94.08617",
												"5": "1512.2615",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.22",
												"10": "199990.98"
											},
											{
												"0": "84fa6391",
												"1": "84fdf781",
												"2": "0",
												"3": "1012.2579",
												"4": "103.22093",
												"5": "1500.4542",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.03",
												"10": "199996.25"
											},
											{
												"0": "84fa6392",
												"1": "84fdf782",
												"2": "1",
												"3": "1002.1173",
												"4": "89.160065",
												"5": "1513.4839",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99994.36",
												"10": "199989.48"
											},
											{
												"0": "84fa6393",
												"1": "84fdf783",
												"2": "1",
												"3": "1012.42224",
												"4": "111.70507",
												"5": "1501.7748",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.93",
												"10": "199994.0"
											},
											{
												"0": "84fa6394",
												"1": "84fdf784",
												"2": "1",
												"3": "1012.20935",
												"4": "106.08232",
												"5": "1498.0713",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.62",
												"10": "199990.52"
											},
											{
												"0": "84fa6395",
												"1": "84fdf785",
												"2": "1",
												"3": "1011.1164",
												"4": "97.248856",
												"5": "1514.6848",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.53",
												"10": "199995.19"
											},
											{
												"0": "84fa6396",
												"1": "84fdf786",
												"2": "1",
												"3": "1006.1974",
												"4": "80.21878",
												"5": "1494.032",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.19",
												"10": "199993.8"
											},
											{
												"0": "84fa6397",
												"1": "84fdf787",
												"2": "0",
												"3": "1007.9595",
												"4": "106.599594",
												"5": "1500.6333",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100012.66",
												"10": "199984.08"
											},
											{
												"0": "84fa6398",
												"1": "84fdf788",
												"2": "0",
												"3": "1008.3789",
												"4": "102.08075",
												"5": "1499.197",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.41",
												"10": "199998.97"
											},
											{
												"0": "84fa6399",
												"1": "84fdf789",
												"2": "1",
												"3": "1014.4824",
												"4": "95.172386",
												"5": "1515.8743",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.914",
												"10": "199992.19"
											},
											{
												"0": "84fa639a",
												"1": "84fdf78a",
												"2": "0",
												"3": "1005.87054",
												"4": "111.75239",
												"5": "1513.8153",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100011.36",
												"10": "199986.3"
											},
											{
												"0": "84fa639b",
												"1": "84fdf78b",
												"2": "0",
												"3": "1007.83856",
												"4": "112.97177",
												"5": "1514.6855",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.734",
												"10": "199994.95"
											},
											{
												"0": "84fa639c",
												"1": "84fdf78c",
												"2": "0",
												"3": "1002.04297",
												"4": "104.14832",
												"5": "1508.0609",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.01",
												"10": "200006.27"
											},
											{
												"0": "84fa639d",
												"1": "84fdf78d",
												"2": "1",
												"3": "1010.8985",
												"4": "91.609924",
												"5": "1516.9181",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99990.85",
												"10": "199989.27"
											},
											{
												"0": "84fa639e",
												"1": "84fdf78e",
												"2": "0",
												"3": "1000.9746",
												"4": "117.11314",
												"5": "1503.5479",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100006.336",
												"10": "199993.42"
											},
											{
												"0": "84fa639f",
												"1": "84fdf78f",
												"2": "0",
												"3": "996.71857",
												"4": "91.6866",
												"5": "1502.6758",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.305",
												"10": "199996.2"
											},
											{
												"0": "84fa63a0",
												"1": "84fdf790",
												"2": "0",
												"3": "1009.8094",
												"4": "94.929955",
												"5": "1509.3551",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.25",
												"10": "200001.19"
											},
											{
												"0": "84fa63a1",
												"1": "84fdf791",
												"2": "0",
												"3": "1013.263",
												"4": "95.62566",
												"5": "1502.5134",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.336",
												"10": "199992.3"
											},
											{
												"0": "84fa63a2",
												"1": "84fdf792",
												"2": "1",
												"3": "1001.9555",
												"4": "91.90368",
												"5": "1510.5713",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.2",
												"10": "199997.84"
											},
											{
												"0": "84fa63a3",
												"1": "84fdf793",
												"2": "1",
												"3": "1009.1606",
												"4": "115.2342",
												"5": "1496.0929",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.625",
												"10": "199989.39"
											},
											{
												"0": "84fa63a4",
												"1": "84fdf794",
												"2": "0",
												"3": "1010.7139",
												"4": "89.41029",
												"5": "1499.2349",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.14",
												"10": "199989.86"
											},
											{
												"0": "84fa63a5",
												"1": "84fdf795",
												"2": "0",
												"3": "1001.85675",
												"4": "118.47853",
												"5": "1499.4688",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100001.22",
												"10": "200000.7"
											},
											{
												"0": "84fa63a6",
												"1": "84fdf796",
												"2": "0",
												"3": "1007.5103",
												"4": "108.57295",
												"5": "1508.0356",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.32",
												"10": "199989.94"
											},
											{
												"0": "84fa63a7",
												"1": "84fdf797",
												"2": "1",
												"3": "1006.78375",
												"4": "106.73442",
												"5": "1497.5815",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.984",
												"10": "199992.34"
											},
											{
												"0": "84fa63a8",
												"1": "84fdf798",
												"2": "0",
												"3": "1005.2028",
												"4": "122.06513",
												"5": "1506.5098",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.51",
												"10": "199995.73"
											},
											{
												"0": "84fa63a9",
												"1": "84fdf799",
												"2": "0",
												"3": "1001.35675",
												"4": "89.55281",
												"5": "1509.3132",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.4",
												"10": "199995.23"
											},
											{
												"0": "84fa63aa",
												"1": "84fdf79a",
												"2": "0",
												"3": "1006.5873",
												"4": "96.871254",
												"5": "1505.5201",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.695",
												"10": "199990.0"
											},
											{
												"0": "84fa63ab",
												"1": "84fdf79b",
												"2": "1",
												"3": "1003.26154",
												"4": "82.47052",
												"5": "1507.5591",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.48",
												"10": "199999.34"
											},
											{
												"0": "84fa63ac",
												"1": "84fdf79c",
												"2": "0",
												"3": "1007.61096",
												"4": "108.88308",
												"5": "1503.8346",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.83",
												"10": "200001.0"
											},
											{
												"0": "84fa63ad",
												"1": "84fdf79d",
												"2": "0",
												"3": "1006.12866",
												"4": "94.025",
												"5": "1489.9669",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.984",
												"10": "199996.95"
											},
											{
												"0": "84fa63ae",
												"1": "84fdf79e",
												"2": "1",
												"3": "1000.4768",
												"4": "95.53514",
												"5": "1502.7937",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.92",
												"10": "199989.39"
											},
											{
												"0": "84fa63af",
												"1": "84fdf79f",
												"2": "0",
												"3": "1004.098",
												"4": "75.64026",
												"5": "1484.2019",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100010.234",
												"10": "199995.06"
											},
											{
												"0": "84fa63b0",
												"1": "84fdf7a0",
												"2": "1",
												"3": "1011.731",
												"4": "100.54751",
												"5": "1504.0369",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.945",
												"10": "199993.45"
											},
											{
												"0": "84fa63b1",
												"1": "84fdf7a1",
												"2": "0",
												"3": "1010.24",
												"4": "98.707245",
												"5": "1511.7255",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.81",
												"10": "199997.58"
											},
											{
												"0": "84fa63b2",
												"1": "84fdf7a2",
												"2": "0",
												"3": "1006.70294",
												"4": "84.68627",
												"5": "1505.9075",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100009.51",
												"10": "199992.8"
											},
											{
												"0": "84fa63b3",
												"1": "84fdf7a3",
												"2": "0",
												"3": "1005.9891",
												"4": "104.89692",
												"5": "1499.3914",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.72",
												"10": "199990.08"
											},
											{
												"0": "84fa63b4",
												"1": "84fdf7a4",
												"2": "0",
												"3": "1005.3203",
												"4": "81.38865",
												"5": "1506.9313",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.89",
												"10": "199993.69"
											},
											{
												"0": "84fa63b5",
												"1": "84fdf7a5",
												"2": "0",
												"3": "1001.94867",
												"4": "97.83991",
												"5": "1513.5625",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100011.33",
												"10": "199994.7"
											},
											{
												"0": "84fa63b6",
												"1": "84fdf7a6",
												"2": "1",
												"3": "1010.1929",
												"4": "82.30727",
												"5": "1495.1161",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.77",
												"10": "200001.62"
											},
											{
												"0": "84fa63b7",
												"1": "84fdf7a7",
												"2": "0",
												"3": "1005.9187",
												"4": "90.250626",
												"5": "1498.5425",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100000.09",
												"10": "199995.06"
											},
											{
												"0": "84fa63b8",
												"1": "84fdf7a8",
												"2": "1",
												"3": "1011.2575",
												"4": "89.07912",
												"5": "1491.7224",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.33",
												"10": "199992.03"
											},
											{
												"0": "84fa63b9",
												"1": "84fdf7a9",
												"2": "0",
												"3": "1009.56586",
												"4": "97.21449",
												"5": "1529.3606",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.2",
												"10": "200001.12"
											},
											{
												"0": "84fa63ba",
												"1": "84fdf7aa",
												"2": "0",
												"3": "1016.8176",
												"4": "85.78801",
												"5": "1510.5492",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.54",
												"10": "199995.52"
											},
											{
												"0": "84fa63bb",
												"1": "84fdf7ab",
												"2": "0",
												"3": "1009.89105",
												"4": "108.17852",
												"5": "1511.8333",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.43",
												"10": "199992.31"
											},
											{
												"0": "84fa63bc",
												"1": "84fdf7ac",
												"2": "1",
												"3": "1010.2088",
												"4": "112.213974",
												"5": "1502.9447",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.875",
												"10": "199997.47"
											},
											{
												"0": "84fa63bd",
												"1": "84fdf7ad",
												"2": "1",
												"3": "1009.5058",
												"4": "104.652405",
												"5": "1501.066",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.28",
												"10": "199990.12"
											},
											{
												"0": "84fa63be",
												"1": "84fdf7ae",
												"2": "1",
												"3": "1007.4959",
												"4": "117.34327",
												"5": "1503.9265",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.18",
												"10": "200003.38"
											},
											{
												"0": "84fa63bf",
												"1": "84fdf7af",
												"2": "1",
												"3": "1002.6552",
												"4": "118.29401",
												"5": "1510.392",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.9",
												"10": "199994.62"
											},
											{
												"0": "84fa63c0",
												"1": "84fdf7b0",
												"2": "1",
												"3": "1010.9751",
												"4": "106.07785",
												"5": "1514.0099",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.34",
												"10": "199998.92"
											},
											{
												"0": "84fa63c1",
												"1": "84fdf7b1",
												"2": "1",
												"3": "1003.1684",
												"4": "109.268234",
												"5": "1510.9175",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.23",
												"10": "199990.89"
											},
											{
												"0": "84fa63c2",
												"1": "84fdf7b2",
												"2": "0",
												"3": "1007.9046",
												"4": "106.418434",
												"5": "1509.8984",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100014.24",
												"10": "199988.44"
											},
											{
												"0": "84fa63c3",
												"1": "84fdf7b3",
												"2": "1",
												"3": "1003.8226",
												"4": "104.137474",
												"5": "1517.8961",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99995.21",
												"10": "199997.11"
											},
											{
												"0": "84fa63c4",
												"1": "84fdf7b4",
												"2": "1",
												"3": "1002.7003",
												"4": "85.6693",
												"5": "1506.2681",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99997.79",
												"10": "199994.03"
											},
											{
												"0": "84fa63c5",
												"1": "84fdf7b5",
												"2": "0",
												"3": "1003.7751",
												"4": "109.00519",
												"5": "1508.5938",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99997.85",
												"10": "200005.55"
											},
											{
												"0": "84fa63c6",
												"1": "84fdf7b6",
												"2": "1",
												"3": "1007.9602",
												"4": "103.08832",
												"5": "1499.7523",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99990.71",
												"10": "199994.94"
											},
											{
												"0": "84fa63c7",
												"1": "84fdf7b7",
												"2": "0",
												"3": "1003.5568",
												"4": "104.223724",
												"5": "1506.2095",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100009.875",
												"10": "199993.0"
											},
											{
												"0": "84fa63c8",
												"1": "84fdf7b8",
												"2": "1",
												"3": "1006.52966",
												"4": "112.94637",
												"5": "1499.852",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.39",
												"10": "199997.73"
											},
											{
												"0": "84fa63c9",
												"1": "84fdf7b9",
												"2": "1",
												"3": "1009.6299",
												"4": "103.005684",
												"5": "1514.2317",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.125",
												"10": "199997.77"
											},
											{
												"0": "84fa6466",
												"1": "84fdf856",
												"2": "1",
												"3": "1024.0469",
												"4": "78.55328",
												"5": "1510.5775",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.93",
												"10": "199993.16"
											},
											{
												"0": "84fa6467",
												"1": "84fdf857",
												"2": "0",
												"3": "1009.6494",
												"4": "111.274284",
												"5": "1499.4364",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.27",
												"10": "199987.53"
											},
											{
												"0": "84fa6468",
												"1": "84fdf858",
												"2": "1",
												"3": "1008.76636",
												"4": "90.37886",
												"5": "1504.8473",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.51",
												"10": "199996.42"
											},
											{
												"0": "84fa6469",
												"1": "84fdf859",
												"2": "1",
												"3": "1010.59406",
												"4": "107.2255",
												"5": "1520.8763",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.914",
												"10": "199993.08"
											},
											{
												"0": "84fa646a",
												"1": "84fdf85a",
												"2": "1",
												"3": "1014.7685",
												"4": "106.48993",
												"5": "1514.8519",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.12",
												"10": "199995.38"
											},
											{
												"0": "84fa646b",
												"1": "84fdf85b",
												"2": "0",
												"3": "1014.0261",
												"4": "91.50604",
												"5": "1501.4752",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.8",
												"10": "199995.53"
											},
											{
												"0": "84fa646c",
												"1": "84fdf85c",
												"2": "0",
												"3": "1008.13605",
												"4": "98.91727",
												"5": "1505.7056",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.36",
												"10": "199990.7"
											},
											{
												"0": "84fa646d",
												"1": "84fdf85d",
												"2": "0",
												"3": "1013.5124",
												"4": "104.94203",
												"5": "1500.2249",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.34",
												"10": "199993.03"
											},
											{
												"0": "84fa646e",
												"1": "84fdf85e",
												"2": "0",
												"3": "1018.8645",
												"4": "86.65478",
												"5": "1506.1301",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.32",
												"10": "199994.97"
											},
											{
												"0": "84fa646f",
												"1": "84fdf85f",
												"2": "0",
												"3": "1009.72455",
												"4": "101.782875",
												"5": "1495.2047",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100005.65",
												"10": "199993.88"
											},
											{
												"0": "84fa6470",
												"1": "84fdf860",
												"2": "1",
												"3": "1000.9859",
												"4": "97.16904",
												"5": "1514.1735",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100000.484",
												"10": "200004.84"
											},
											{
												"0": "84fa6471",
												"1": "84fdf861",
												"2": "0",
												"3": "1019.186",
												"4": "81.49572",
												"5": "1503.1313",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.61",
												"10": "199993.0"
											},
											{
												"0": "84fa6472",
												"1": "84fdf862",
												"2": "0",
												"3": "1001.20465",
												"4": "91.03406",
												"5": "1522.6221",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.12",
												"10": "199994.9"
											},
											{
												"0": "84fa6473",
												"1": "84fdf863",
												"2": "0",
												"3": "1009.07715",
												"4": "102.2294",
												"5": "1511.483",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.086",
												"10": "199996.97"
											},
											{
												"0": "84fa6474",
												"1": "84fdf864",
												"2": "0",
												"3": "1006.24384",
												"4": "91.37185",
												"5": "1518.068",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.086",
												"10": "199991.6"
											},
											{
												"0": "84fa6475",
												"1": "84fdf865",
												"2": "1",
												"3": "1001.2887",
												"4": "69.86339",
												"5": "1497.659",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.63",
												"10": "199994.61"
											},
											{
												"0": "84fa6476",
												"1": "84fdf866",
												"2": "0",
												"3": "1006.0945",
												"4": "91.49166",
												"5": "1503.2345",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.99",
												"10": "200002.34"
											},
											{
												"0": "84fa6477",
												"1": "84fdf867",
												"2": "1",
												"3": "1014.0661",
												"4": "108.475624",
												"5": "1517.4429",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.0",
												"10": "199997.83"
											},
											{
												"0": "84fa6478",
												"1": "84fdf868",
												"2": "1",
												"3": "1006.7946",
												"4": "114.334526",
												"5": "1503.3192",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99993.445",
												"10": "199993.06"
											},
											{
												"0": "84fa6479",
												"1": "84fdf869",
												"2": "0",
												"3": "1004.1965",
												"4": "90.64801",
												"5": "1511.3195",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100012.94",
												"10": "199990.52"
											},
											{
												"0": "84fa647a",
												"1": "84fdf86a",
												"2": "1",
												"3": "1001.59595",
												"4": "99.29584",
												"5": "1491.5688",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100001.484",
												"10": "199996.89"
											},
											{
												"0": "84fa647b",
												"1": "84fdf86b",
												"2": "0",
												"3": "1004.7614",
												"4": "104.52989",
												"5": "1503.444",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.92",
												"10": "200001.8"
											},
											{
												"0": "84fa647c",
												"1": "84fdf86c",
												"2": "1",
												"3": "1004.99347",
												"4": "111.83915",
												"5": "1504.166",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.49",
												"10": "199998.77"
											},
											{
												"0": "84fa647d",
												"1": "84fdf86d",
												"2": "1",
												"3": "1002.63806",
												"4": "121.97194",
												"5": "1514.4604",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.19",
												"10": "199991.77"
											},
											{
												"0": "84fa647e",
												"1": "84fdf86e",
												"2": "0",
												"3": "1003.54535",
												"4": "83.976036",
												"5": "1502.428",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.6",
												"10": "199999.3"
											},
											{
												"0": "84fa647f",
												"1": "84fdf86f",
												"2": "0",
												"3": "1007.69275",
												"4": "109.45954",
												"5": "1503.8948",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.055",
												"10": "199992.84"
											},
											{
												"0": "84fa6480",
												"1": "84fdf870",
												"2": "1",
												"3": "998.7242",
												"4": "108.750824",
												"5": "1514.8464",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.05",
												"10": "199998.83"
											},
											{
												"0": "84fa6481",
												"1": "84fdf871",
												"2": "0",
												"3": "1010.14026",
												"4": "94.06915",
												"5": "1509.004",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100003.74",
												"10": "200002.56"
											},
											{
												"0": "84fa6482",
												"1": "84fdf872",
												"2": "0",
												"3": "999.14734",
												"4": "108.9965",
												"5": "1510.6517",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.8",
												"10": "199994.25"
											},
											{
												"0": "84fa6483",
												"1": "84fdf873",
												"2": "1",
												"3": "1007.0845",
												"4": "83.400154",
												"5": "1494.9205",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.484",
												"10": "199997.28"
											},
											{
												"0": "84fa6484",
												"1": "84fdf874",
												"2": "1",
												"3": "1004.26117",
												"4": "102.71911",
												"5": "1516.291",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100002.51",
												"10": "199993.52"
											},
											{
												"0": "84fa6485",
												"1": "84fdf875",
												"2": "1",
												"3": "1004.6002",
												"4": "107.76291",
												"5": "1516.2505",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.99",
												"10": "200002.62"
											},
											{
												"0": "84fa6486",
												"1": "84fdf876",
												"2": "1",
												"3": "1021.45746",
												"4": "88.25126",
												"5": "1504.3091",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.71",
												"10": "200000.53"
											},
											{
												"0": "84fa6487",
												"1": "84fdf877",
												"2": "1",
												"3": "1010.5525",
												"4": "111.10864",
												"5": "1511.8162",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.625",
												"10": "199994.03"
											},
											{
												"0": "84fa6488",
												"1": "84fdf878",
												"2": "1",
												"3": "1015.2739",
												"4": "81.67949",
												"5": "1505.8484",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99991.164",
												"10": "199995.11"
											},
											{
												"0": "84fa6489",
												"1": "84fdf879",
												"2": "1",
												"3": "1008.5162",
												"4": "107.815506",
												"5": "1507.744",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.3",
												"10": "199994.6"
											},
											{
												"0": "84fa648a",
												"1": "84fdf87a",
												"2": "0",
												"3": "998.11786",
												"4": "101.6953",
												"5": "1509.4985",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.98",
												"10": "199994.39"
											},
											{
												"0": "84fa648b",
												"1": "84fdf87b",
												"2": "0",
												"3": "1007.325",
												"4": "91.715645",
												"5": "1509.7332",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.695",
												"10": "199999.92"
											},
											{
												"0": "84fa648c",
												"1": "84fdf87c",
												"2": "1",
												"3": "1000.30725",
												"4": "103.041336",
												"5": "1514.4248",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99992.75",
												"10": "199994.61"
											},
											{
												"0": "84fa648d",
												"1": "84fdf87d",
												"2": "1",
												"3": "1011.6603",
												"4": "118.52531",
												"5": "1508.0972",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99985.945",
												"10": "199995.75"
											},
											{
												"0": "84fa648e",
												"1": "84fdf87e",
												"2": "1",
												"3": "1015.807",
												"4": "86.79585",
												"5": "1506.2135",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.69",
												"10": "199996.34"
											},
											{
												"0": "84fa648f",
												"1": "84fdf87f",
												"2": "0",
												"3": "1011.7831",
												"4": "95.687164",
												"5": "1506.8519",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100010.25",
												"10": "199986.81"
											},
											{
												"0": "84fa6490",
												"1": "84fdf880",
												"2": "1",
												"3": "994.87244",
												"4": "92.32589",
												"5": "1503.5822",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.57",
												"10": "200004.1"
											},
											{
												"0": "84fa6491",
												"1": "84fdf881",
												"2": "1",
												"3": "1004.1048",
												"4": "106.334015",
												"5": "1503.0596",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99998.32",
												"10": "199996.06"
											},
											{
												"0": "84fa6492",
												"1": "84fdf882",
												"2": "0",
												"3": "1009.5516",
												"4": "101.63319",
												"5": "1510.9795",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.0",
												"10": "199988.27"
											},
											{
												"0": "84fa6493",
												"1": "84fdf883",
												"2": "1",
												"3": "1009.14307",
												"4": "100.23638",
												"5": "1519.055",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.54",
												"10": "199994.72"
											},
											{
												"0": "84fa6494",
												"1": "84fdf884",
												"2": "0",
												"3": "1002.1114",
												"4": "96.406876",
												"5": "1498.7738",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100012.67",
												"10": "199992.02"
											},
											{
												"0": "84fa6495",
												"1": "84fdf885",
												"2": "1",
												"3": "1004.41223",
												"4": "112.19652",
												"5": "1517.8348",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.61",
												"10": "200002.39"
											},
											{
												"0": "84fa6496",
												"1": "84fdf886",
												"2": "1",
												"3": "1013.8692",
												"4": "101.05689",
												"5": "1520.4296",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.34",
												"10": "199997.95"
											},
											{
												"0": "84fa6497",
												"1": "84fdf887",
												"2": "0",
												"3": "1003.76825",
												"4": "113.34245",
												"5": "1512.6871",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100005.25",
												"10": "199988.58"
											},
											{
												"0": "84fa6498",
												"1": "84fdf888",
												"2": "1",
												"3": "1010.2221",
												"4": "99.417336",
												"5": "1508.9272",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.195",
												"10": "199998.9"
											},
											{
												"0": "84fa6499",
												"1": "84fdf889",
												"2": "1",
												"3": "1009.55585",
												"4": "90.47537",
												"5": "1508.636",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.19",
												"10": "199991.55"
											},
											{
												"0": "84fa649a",
												"1": "84fdf88a",
												"2": "1",
												"3": "1022.7534",
												"4": "97.02091",
												"5": "1517.3043",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.086",
												"10": "199998.42"
											},
											{
												"0": "84fa649b",
												"1": "84fdf88b",
												"2": "0",
												"3": "1002.8995",
												"4": "112.93553",
												"5": "1513.2454",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100012.734",
												"10": "199985.08"
											},
											{
												"0": "84fa649c",
												"1": "84fdf88c",
												"2": "1",
												"3": "1000.7544",
												"4": "100.27917",
												"5": "1513.1536",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.92",
												"10": "199997.75"
											},
											{
												"0": "84fa649d",
												"1": "84fdf88d",
												"2": "1",
												"3": "995.5173",
												"4": "92.1416",
												"5": "1492.443",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.7",
												"10": "199991.16"
											},
											{
												"0": "84fa649e",
												"1": "84fdf88e",
												"2": "1",
												"3": "1005.55994",
												"4": "91.40516",
												"5": "1506.8403",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.516",
												"10": "199991.39"
											},
											{
												"0": "84fa649f",
												"1": "84fdf88f",
												"2": "0",
												"3": "1006.9002",
												"4": "104.61492",
												"5": "1505.4298",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.16",
												"10": "200001.48"
											},
											{
												"0": "84fa64a0",
												"1": "84fdf890",
												"2": "1",
												"3": "997.5602",
												"4": "94.27252",
												"5": "1499.8531",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99993.81",
												"10": "199998.38"
											},
											{
												"0": "84fa64a1",
												"1": "84fdf891",
												"2": "1",
												"3": "997.08746",
												"4": "129.7413",
												"5": "1506.4662",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.54",
												"10": "199996.33"
											},
											{
												"0": "84fa64a2",
												"1": "84fdf892",
												"2": "1",
												"3": "1008.52893",
												"4": "103.69767",
												"5": "1503.1768",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99995.72",
												"10": "199996.14"
											},
											{
												"0": "84fa64a3",
												"1": "84fdf893",
												"2": "0",
												"3": "1009.5551",
												"4": "100.30728",
												"5": "1509.8529",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.66",
												"10": "199999.94"
											},
											{
												"0": "84fa64a4",
												"1": "84fdf894",
												"2": "0",
												"3": "1002.8301",
												"4": "90.00734",
												"5": "1499.6534",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100011.14",
												"10": "199995.34"
											},
											{
												"0": "84fa64a5",
												"1": "84fdf895",
												"2": "0",
												"3": "1017.3536",
												"4": "99.26218",
												"5": "1507.8889",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.0",
												"10": "200000.16"
											},
											{
												"0": "84fa64a6",
												"1": "84fdf896",
												"2": "0",
												"3": "1007.6363",
												"4": "90.69307",
												"5": "1502.9333",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100011.94",
												"10": "199989.47"
											},
											{
												"0": "84fa64a7",
												"1": "84fdf897",
												"2": "1",
												"3": "1015.1457",
												"4": "75.83033",
												"5": "1498.5143",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.04",
												"10": "199997.08"
											},
											{
												"0": "84fa64a8",
												"1": "84fdf898",
												"2": "1",
												"3": "1004.70496",
												"4": "109.826675",
												"5": "1512.5121",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.92",
												"10": "199998.28"
											},
											{
												"0": "84fa64a9",
												"1": "84fdf899",
												"2": "1",
												"3": "1001.9357",
												"4": "88.3206",
												"5": "1488.8704",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.43",
												"10": "199997.83"
											},
											{
												"0": "84fa64aa",
												"1": "84fdf89a",
												"2": "1",
												"3": "1012.43085",
												"4": "89.02384",
												"5": "1503.5923",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.0",
												"10": "199997.83"
											},
											{
												"0": "84fa64ab",
												"1": "84fdf89b",
												"2": "1",
												"3": "1008.5395",
												"4": "87.019516",
												"5": "1496.6501",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.98",
												"10": "199989.67"
											},
											{
												"0": "84fa64ac",
												"1": "84fdf89c",
												"2": "0",
												"3": "1007.3925",
												"4": "97.16202",
												"5": "1505.9435",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.18",
												"10": "199993.38"
											},
											{
												"0": "84fa64ad",
												"1": "84fdf89d",
												"2": "0",
												"3": "1004.64026",
												"4": "102.458046",
												"5": "1508.5199",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100015.77",
												"10": "199989.33"
											},
											{
												"0": "84fa64ae",
												"1": "84fdf89e",
												"2": "0",
												"3": "998.20935",
												"4": "80.29037",
												"5": "1484.0317",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99997.99",
												"10": "199993.75"
											},
											{
												"0": "84fa64af",
												"1": "84fdf89f",
												"2": "0",
												"3": "1003.738",
												"4": "112.48369",
												"5": "1506.0624",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.79",
												"10": "200004.11"
											},
											{
												"0": "84fa64b0",
												"1": "84fdf8a0",
												"2": "0",
												"3": "1007.7914",
												"4": "112.905785",
												"5": "1511.4904",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.055",
												"10": "199993.11"
											},
											{
												"0": "84fa64b1",
												"1": "84fdf8a1",
												"2": "0",
												"3": "1002.2377",
												"4": "98.32226",
												"5": "1510.3547",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99992.59",
												"10": "200003.05"
											},
											{
												"0": "84fa64b2",
												"1": "84fdf8a2",
												"2": "0",
												"3": "1017.6604",
												"4": "92.98484",
												"5": "1515.3489",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100002.36",
												"10": "200000.33"
											},
											{
												"0": "84fa64b3",
												"1": "84fdf8a3",
												"2": "1",
												"3": "1011.26807",
												"4": "101.29453",
												"5": "1508.498",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.46",
												"10": "199995.48"
											},
											{
												"0": "84fa64b4",
												"1": "84fdf8a4",
												"2": "0",
												"3": "1012.5232",
												"4": "101.29103",
												"5": "1506.6415",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100009.22",
												"10": "199992.0"
											},
											{
												"0": "84fa64b5",
												"1": "84fdf8a5",
												"2": "0",
												"3": "1009.1596",
												"4": "122.37572",
												"5": "1496.0623",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100022.88",
												"10": "199980.6"
											},
											{
												"0": "84fa64b6",
												"1": "84fdf8a6",
												"2": "1",
												"3": "1009.58704",
												"4": "81.81034",
												"5": "1509.3142",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.24",
												"10": "199998.42"
											},
											{
												"0": "84fa64b7",
												"1": "84fdf8a7",
												"2": "0",
												"3": "1015.1559",
												"4": "99.2604",
												"5": "1505.3279",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.09",
												"10": "199987.42"
											},
											{
												"0": "84fa64b8",
												"1": "84fdf8a8",
												"2": "0",
												"3": "1012.00397",
												"4": "104.54579",
												"5": "1494.6216",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99993.77",
												"10": "200000.14"
											},
											{
												"0": "84fa64b9",
												"1": "84fdf8a9",
												"2": "0",
												"3": "997.94086",
												"4": "118.29181",
												"5": "1512.0386",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.31",
												"10": "199995.4"
											},
											{
												"0": "84fa64ba",
												"1": "84fdf8aa",
												"2": "1",
												"3": "1009.4436",
												"4": "105.51477",
												"5": "1496.2474",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.16",
												"10": "199993.3"
											},
											{
												"0": "84fa64bb",
												"1": "84fdf8ab",
												"2": "1",
												"3": "999.6291",
												"4": "123.52474",
												"5": "1490.6448",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.34",
												"10": "199993.1"
											},
											{
												"0": "84fa64bc",
												"1": "84fdf8ac",
												"2": "1",
												"3": "1009.4627",
												"4": "89.517166",
												"5": "1496.9613",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.03",
												"10": "199991.77"
											},
											{
												"0": "84fa64bd",
												"1": "84fdf8ad",
												"2": "0",
												"3": "1009.25653",
												"4": "103.44313",
												"5": "1509.4144",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.12",
												"10": "199995.08"
											},
											{
												"0": "84fa64be",
												"1": "84fdf8ae",
												"2": "1",
												"3": "1006.4792",
												"4": "90.08655",
												"5": "1507.7379",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99994.07",
												"10": "199994.64"
											},
											{
												"0": "84fa64bf",
												"1": "84fdf8af",
												"2": "1",
												"3": "1010.3139",
												"4": "112.53357",
												"5": "1515.9552",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.02",
												"10": "199995.72"
											},
											{
												"0": "84fa64c0",
												"1": "84fdf8b0",
												"2": "0",
												"3": "1004.71185",
												"4": "84.36599",
												"5": "1501.8881",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.02",
												"10": "199988.02"
											},
											{
												"0": "84fa64c1",
												"1": "84fdf8b1",
												"2": "0",
												"3": "1015.6824",
												"4": "94.68691",
												"5": "1499.7883",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100003.875",
												"10": "199995.78"
											},
											{
												"0": "84fa64c2",
												"1": "84fdf8b2",
												"2": "0",
												"3": "1007.58344",
												"4": "93.21509",
												"5": "1505.9427",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100005.875",
												"10": "199999.78"
											},
											{
												"0": "84fa64c3",
												"1": "84fdf8b3",
												"2": "0",
												"3": "1006.4086",
												"4": "106.26978",
												"5": "1509.5304",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.836",
												"10": "199997.28"
											},
											{
												"0": "84fa64c4",
												"1": "84fdf8b4",
												"2": "0",
												"3": "1010.4384",
												"4": "117.380806",
												"5": "1507.5994",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.26",
												"10": "199988.8"
											},
											{
												"0": "84fa64c5",
												"1": "84fdf8b5",
												"2": "0",
												"3": "1007.10626",
												"4": "78.71977",
												"5": "1503.2957",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.19",
												"10": "199986.52"
											},
											{
												"0": "84fa64c6",
												"1": "84fdf8b6",
												"2": "0",
												"3": "1010.4076",
												"4": "103.68044",
												"5": "1503.4684",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.33",
												"10": "199989.97"
											},
											{
												"0": "84fa64c7",
												"1": "84fdf8b7",
												"2": "0",
												"3": "1009.0039",
												"4": "104.883415",
												"5": "1513.1517",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.34",
												"10": "199990.48"
											},
											{
												"0": "84fa64c8",
												"1": "84fdf8b8",
												"2": "1",
												"3": "1006.55365",
												"4": "106.54572",
												"5": "1501.8925",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.57",
												"10": "199997.98"
											},
											{
												"0": "84fa64c9",
												"1": "84fdf8b9",
												"2": "0",
												"3": "1005.61774",
												"4": "112.73441",
												"5": "1515.6567",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.445",
												"10": "200001.19"
											},
											{
												"0": "84fa64ca",
												"1": "84fdf8ba",
												"2": "0",
												"3": "1008.44006",
												"4": "98.79293",
												"5": "1513.2255",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100012.66",
												"10": "199989.64"
											},
											{
												"0": "84fa64cb",
												"1": "84fdf8bb",
												"2": "1",
												"3": "1008.33307",
												"4": "94.65989",
												"5": "1511.3547",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99988.35",
												"10": "199990.0"
											},
											{
												"0": "84fa64cc",
												"1": "84fdf8bc",
												"2": "1",
												"3": "998.92224",
												"4": "115.31623",
												"5": "1502.1134",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.97",
												"10": "199998.61"
											},
											{
												"0": "84fa64cd",
												"1": "84fdf8bd",
												"2": "1",
												"3": "1010.4533",
												"4": "105.69479",
												"5": "1521.4022",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.54",
												"10": "199991.56"
											},
											{
												"0": "84fa64ce",
												"1": "84fdf8be",
												"2": "1",
												"3": "1014.0029",
												"4": "85.8638",
												"5": "1505.329",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.75",
												"10": "199993.06"
											},
											{
												"0": "84fa64cf",
												"1": "84fdf8bf",
												"2": "1",
												"3": "1001.50146",
												"4": "101.298065",
												"5": "1508.0029",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.69",
												"10": "199995.1"
											},
											{
												"0": "84fa64d0",
												"1": "84fdf8c0",
												"2": "0",
												"3": "1003.6182",
												"4": "91.34964",
												"5": "1511.0776",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100005.59",
												"10": "200001.75"
											},
											{
												"0": "84fa64d1",
												"1": "84fdf8c1",
												"2": "0",
												"3": "1002.6487",
												"4": "114.19631",
												"5": "1508.037",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.62",
												"10": "199995.36"
											},
											{
												"0": "84fa64d2",
												"1": "84fdf8c2",
												"2": "0",
												"3": "1014.9519",
												"4": "84.89807",
												"5": "1508.4426",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.42",
												"10": "199991.72"
											},
											{
												"0": "84fa64d3",
												"1": "84fdf8c3",
												"2": "1",
												"3": "1003.65076",
												"4": "99.31223",
												"5": "1522.4877",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99988.625",
												"10": "199986.75"
											},
											{
												"0": "84fa64d4",
												"1": "84fdf8c4",
												"2": "0",
												"3": "1002.1832",
												"4": "89.893745",
												"5": "1512.2396",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.31",
												"10": "200006.61"
											},
											{
												"0": "84fa64d5",
												"1": "84fdf8c5",
												"2": "0",
												"3": "1011.9814",
												"4": "103.86491",
												"5": "1504.6355",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100011.08",
												"10": "199987.5"
											},
											{
												"0": "84fa64d6",
												"1": "84fdf8c6",
												"2": "1",
												"3": "1008.18335",
												"4": "78.24672",
												"5": "1510.042",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.664",
												"10": "200001.36"
											},
											{
												"0": "84fa64d7",
												"1": "84fdf8c7",
												"2": "0",
												"3": "1000.4957",
												"4": "111.92198",
												"5": "1501.8688",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.21",
												"10": "199998.53"
											},
											{
												"0": "84fa64d8",
												"1": "84fdf8c8",
												"2": "0",
												"3": "1020.35016",
												"4": "94.05413",
												"5": "1503.1547",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.98",
												"10": "200003.11"
											},
											{
												"0": "84fa64d9",
												"1": "84fdf8c9",
												"2": "0",
												"3": "1004.6312",
												"4": "110.88973",
												"5": "1507.7959",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.8",
												"10": "199998.6"
											},
											{
												"0": "84fa64da",
												"1": "84fdf8ca",
												"2": "1",
												"3": "1019.2536",
												"4": "87.893166",
												"5": "1508.2699",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.35",
												"10": "199999.03"
											},
											{
												"0": "84fa64db",
												"1": "84fdf8cb",
												"2": "0",
												"3": "1010.90045",
												"4": "114.101326",
												"5": "1497.904",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.72",
												"10": "199986.45"
											},
											{
												"0": "84fa64dc",
												"1": "84fdf8cc",
												"2": "0",
												"3": "1006.6373",
												"4": "102.71206",
												"5": "1510.9875",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100001.734",
												"10": "199997.02"
											},
											{
												"0": "84fa64dd",
												"1": "84fdf8cd",
												"2": "1",
												"3": "1002.21497",
												"4": "102.98804",
												"5": "1504.2113",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.81",
												"10": "199990.2"
											},
											{
												"0": "84fa64de",
												"1": "84fdf8ce",
												"2": "0",
												"3": "1013.18567",
												"4": "94.219185",
												"5": "1496.5713",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.59",
												"10": "199999.5"
											},
											{
												"0": "84fa64df",
												"1": "84fdf8cf",
												"2": "1",
												"3": "1006.2749",
												"4": "112.54971",
												"5": "1506.9438",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.51",
												"10": "199992.2"
											},
											{
												"0": "84fa64e0",
												"1": "84fdf8d0",
												"2": "1",
												"3": "1009.00104",
												"4": "103.25422",
												"5": "1499.9618",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.75",
												"10": "199998.86"
											},
											{
												"0": "84fa64e1",
												"1": "84fdf8d1",
												"2": "0",
												"3": "998.78534",
												"4": "95.5655",
												"5": "1500.5066",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.34",
												"10": "199996.19"
											},
											{
												"0": "84fa64e2",
												"1": "84fdf8d2",
												"2": "0",
												"3": "1007.06323",
												"4": "89.79913",
												"5": "1522.2515",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100005.875",
												"10": "199997.48"
											},
											{
												"0": "84fa64e3",
												"1": "84fdf8d3",
												"2": "0",
												"3": "1016.8084",
												"4": "86.00668",
												"5": "1508.2917",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100004.38",
												"10": "199994.83"
											},
											{
												"0": "84fa64e4",
												"1": "84fdf8d4",
												"2": "0",
												"3": "1011.6146",
												"4": "100.636536",
												"5": "1507.0726",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.95",
												"10": "200006.23"
											},
											{
												"0": "84fa64e5",
												"1": "84fdf8d5",
												"2": "1",
												"3": "1005.7727",
												"4": "105.760864",
												"5": "1505.9117",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.96",
												"10": "199996.66"
											},
											{
												"0": "84fa64e6",
												"1": "84fdf8d6",
												"2": "1",
												"3": "1002.8862",
												"4": "97.78297",
												"5": "1513.0302",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99989.375",
												"10": "199991.69"
											},
											{
												"0": "84fa64e7",
												"1": "84fdf8d7",
												"2": "0",
												"3": "1010.30115",
												"4": "105.34306",
												"5": "1501.3124",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100010.12",
												"10": "199988.97"
											},
											{
												"0": "84fa64e8",
												"1": "84fdf8d8",
												"2": "1",
												"3": "1016.85126",
												"4": "101.19395",
												"5": "1509.1185",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100001.51",
												"10": "199991.3"
											},
											{
												"0": "84fa64e9",
												"1": "84fdf8d9",
												"2": "0",
												"3": "1007.2613",
												"4": "106.875626",
												"5": "1510.2549",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99992.26",
												"10": "200011.19"
											},
											{
												"0": "84fa64ea",
												"1": "84fdf8da",
												"2": "1",
												"3": "1007.53046",
												"4": "94.370224",
												"5": "1516.9664",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.17",
												"10": "199998.75"
											},
											{
												"0": "84fa64eb",
												"1": "84fdf8db",
												"2": "0",
												"3": "1009.95746",
												"4": "111.29316",
												"5": "1500.0006",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.734",
												"10": "199991.81"
											},
											{
												"0": "84fa64ec",
												"1": "84fdf8dc",
												"2": "1",
												"3": "1008.6233",
												"4": "95.76541",
												"5": "1508.3429",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.6",
												"10": "200000.17"
											},
											{
												"0": "84fa64ed",
												"1": "84fdf8dd",
												"2": "1",
												"3": "1008.31116",
												"4": "89.87333",
												"5": "1510.1357",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.27",
												"10": "199988.88"
											},
											{
												"0": "84fa64ee",
												"1": "84fdf8de",
												"2": "1",
												"3": "1005.7235",
												"4": "100.82195",
												"5": "1485.9874",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.56",
												"10": "199993.81"
											},
											{
												"0": "84fa64ef",
												"1": "84fdf8df",
												"2": "0",
												"3": "1006.16156",
												"4": "99.751076",
												"5": "1519.1659",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100017.164",
												"10": "199988.89"
											},
											{
												"0": "84fa64f0",
												"1": "84fdf8e0",
												"2": "1",
												"3": "1005.7277",
												"4": "102.23034",
												"5": "1499.9989",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.38",
												"10": "200002.56"
											},
											{
												"0": "84fa64f1",
												"1": "84fdf8e1",
												"2": "1",
												"3": "1007.8264",
												"4": "86.4107",
												"5": "1502.9985",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.46",
												"10": "199993.8"
											},
											{
												"0": "84fa64f2",
												"1": "84fdf8e2",
												"2": "1",
												"3": "1014.2985",
												"4": "105.34026",
												"5": "1505.4276",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.79",
												"10": "199997.1"
											},
											{
												"0": "84fa64f3",
												"1": "84fdf8e3",
												"2": "0",
												"3": "1011.2042",
												"4": "107.52047",
												"5": "1502.8585",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.75",
												"10": "199994.6"
											},
											{
												"0": "84fa64f4",
												"1": "84fdf8e4",
												"2": "1",
												"3": "1004.8557",
												"4": "98.490364",
												"5": "1512.0481",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.35",
												"10": "199998.55"
											},
											{
												"0": "84fa64f5",
												"1": "84fdf8e5",
												"2": "0",
												"3": "1005.86334",
												"4": "111.11995",
												"5": "1501.7646",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100006.8",
												"10": "199989.97"
											},
											{
												"0": "84fa64f6",
												"1": "84fdf8e6",
												"2": "0",
												"3": "1012.19745",
												"4": "85.83525",
												"5": "1504.5223",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.55",
												"10": "199998.97"
											},
											{
												"0": "84fa64f7",
												"1": "84fdf8e7",
												"2": "1",
												"3": "1004.6998",
												"4": "111.285805",
												"5": "1496.6711",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.85",
												"10": "199994.66"
											},
											{
												"0": "84fa64f8",
												"1": "84fdf8e8",
												"2": "0",
												"3": "1011.6993",
												"4": "102.319916",
												"5": "1505.3451",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.79",
												"10": "199995.19"
											},
											{
												"0": "84fa64f9",
												"1": "84fdf8e9",
												"2": "1",
												"3": "1002.1378",
												"4": "119.35408",
												"5": "1499.8535",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.13",
												"10": "199994.67"
											},
											{
												"0": "84fa64fa",
												"1": "84fdf8ea",
												"2": "1",
												"3": "1013.07776",
												"4": "105.46514",
												"5": "1508.5156",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.07",
												"10": "200006.78"
											},
											{
												"0": "84fa64fb",
												"1": "84fdf8eb",
												"2": "1",
												"3": "1006.9411",
												"4": "67.332085",
												"5": "1492.1301",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.45",
												"10": "199998.84"
											},
											{
												"0": "84fa64fc",
												"1": "84fdf8ec",
												"2": "0",
												"3": "1003.5015",
												"4": "110.04998",
												"5": "1507.4076",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.95",
												"10": "199987.48"
											},
											{
												"0": "84fa64fd",
												"1": "84fdf8ed",
												"2": "1",
												"3": "1009.78973",
												"4": "95.42557",
												"5": "1505.2633",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99993.54",
												"10": "199997.28"
											},
											{
												"0": "84fa64fe",
												"1": "84fdf8ee",
												"2": "0",
												"3": "1009.48035",
												"4": "101.500084",
												"5": "1500.9158",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.8",
												"10": "200000.25"
											},
											{
												"0": "84fa64ff",
												"1": "84fdf8ef",
												"2": "1",
												"3": "1005.29",
												"4": "103.39943",
												"5": "1515.031",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.7",
												"10": "199995.9"
											},
											{
												"0": "84fa6500",
												"1": "84fdf8f0",
												"2": "0",
												"3": "1005.5608",
												"4": "114.70808",
												"5": "1511.2324",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100001.23",
												"10": "199996.28"
											},
											{
												"0": "84fa6501",
												"1": "84fdf8f1",
												"2": "0",
												"3": "1002.90137",
												"4": "83.56222",
												"5": "1504.983",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100002.77",
												"10": "200002.73"
											},
											{
												"0": "84fb1886",
												"1": "84feabb8",
												"2": "0",
												"3": "1002.515",
												"4": "100.93814",
												"5": "1511.9867",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.33",
												"10": "199995.31"
											},
											{
												"0": "84fb1887",
												"1": "84feabb9",
												"2": "1",
												"3": "1010.24023",
												"4": "88.75027",
												"5": "1506.5083",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.38",
												"10": "199994.02"
											},
											{
												"0": "84fb1888",
												"1": "84feabba",
												"2": "1",
												"3": "1000.89716",
												"4": "110.35057",
												"5": "1514.7688",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.414",
												"10": "199984.12"
											},
											{
												"0": "84fb1889",
												"1": "84feabbb",
												"2": "0",
												"3": "1005.2421",
												"4": "110.58271",
												"5": "1506.5525",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99999.31",
												"10": "200000.38"
											},
											{
												"0": "84fb188a",
												"1": "84feabbc",
												"2": "1",
												"3": "1007.05756",
												"4": "88.29904",
												"5": "1508.3499",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.35",
												"10": "199991.16"
											},
											{
												"0": "84fb188b",
												"1": "84feabbd",
												"2": "0",
												"3": "1014.48096",
												"4": "93.78957",
												"5": "1518.2972",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.06",
												"10": "199990.86"
											},
											{
												"0": "84fb188c",
												"1": "84feabbe",
												"2": "1",
												"3": "1005.7315",
												"4": "108.057755",
												"5": "1521.759",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.99",
												"10": "199999.97"
											},
											{
												"0": "84fb188d",
												"1": "84feabbf",
												"2": "0",
												"3": "1004.4725",
												"4": "85.33201",
												"5": "1513.8011",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.37",
												"10": "199994.16"
											},
											{
												"0": "84fb188e",
												"1": "84feabc0",
												"2": "0",
												"3": "1013.8214",
												"4": "99.05358",
												"5": "1518.2936",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.375",
												"10": "199988.39"
											},
											{
												"0": "84fb188f",
												"1": "84feabc1",
												"2": "0",
												"3": "1007.8627",
												"4": "86.49665",
												"5": "1507.1073",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.086",
												"10": "199994.78"
											},
											{
												"0": "84fb1890",
												"1": "84feabc2",
												"2": "1",
												"3": "1013.291",
												"4": "101.07383",
												"5": "1510.8385",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.34",
												"10": "199992.66"
											},
											{
												"0": "84fb1891",
												"1": "84feabc3",
												"2": "0",
												"3": "1005.74164",
												"4": "108.63317",
												"5": "1502.4822",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.67",
												"10": "199990.28"
											},
											{
												"0": "84fb1892",
												"1": "84feabc4",
												"2": "0",
												"3": "1006.90076",
												"4": "89.052574",
												"5": "1501.8417",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.14",
												"10": "199995.42"
											},
											{
												"0": "84fb1893",
												"1": "84feabc5",
												"2": "1",
												"3": "1003.3695",
												"4": "103.88294",
												"5": "1505.2953",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.56",
												"10": "199997.05"
											},
											{
												"0": "84fb1894",
												"1": "84feabc6",
												"2": "0",
												"3": "1005.2521",
												"4": "114.731445",
												"5": "1506.6913",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.44",
												"10": "200001.7"
											},
											{
												"0": "84fb1895",
												"1": "84feabc7",
												"2": "0",
												"3": "1008.4533",
												"4": "100.835175",
												"5": "1500.1335",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100004.03",
												"10": "200000.58"
											},
											{
												"0": "84fb1896",
												"1": "84feabc8",
												"2": "1",
												"3": "1005.6796",
												"4": "115.95838",
												"5": "1507.9932",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.5",
												"10": "199991.77"
											},
											{
												"0": "84fb1897",
												"1": "84feabc9",
												"2": "1",
												"3": "1010.8787",
												"4": "97.10904",
												"5": "1510.5985",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99993.266",
												"10": "199999.83"
											},
											{
												"0": "84fb1898",
												"1": "84feabca",
												"2": "0",
												"3": "1007.97015",
												"4": "82.73498",
												"5": "1495.4413",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.445",
												"10": "199993.1"
											},
											{
												"0": "84fb1899",
												"1": "84feabcb",
												"2": "1",
												"3": "998.00903",
												"4": "89.69108",
												"5": "1497.843",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.78",
												"10": "199999.48"
											},
											{
												"0": "84fb189a",
												"1": "84feabcc",
												"2": "0",
												"3": "1011.56134",
												"4": "88.2886",
												"5": "1510.9244",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100009.195",
												"10": "199993.8"
											},
											{
												"0": "84fb189b",
												"1": "84feabcd",
												"2": "0",
												"3": "1007.01385",
												"4": "111.41556",
												"5": "1503.8215",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.72",
												"10": "200002.48"
											},
											{
												"0": "84fb189c",
												"1": "84feabce",
												"2": "1",
												"3": "1015.97156",
												"4": "98.32933",
												"5": "1512.1926",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.914",
												"10": "199992.2"
											},
											{
												"0": "84fb189d",
												"1": "84feabcf",
												"2": "1",
												"3": "1002.7268",
												"4": "112.63464",
												"5": "1488.0433",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.05",
												"10": "199994.77"
											},
											{
												"0": "84fb189e",
												"1": "84feabd0",
												"2": "0",
												"3": "1005.98267",
												"4": "103.31427",
												"5": "1509.3254",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.01",
												"10": "199989.7"
											},
											{
												"0": "84fb189f",
												"1": "84feabd1",
												"2": "0",
												"3": "1001.2929",
												"4": "119.31028",
												"5": "1503.6334",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100010.33",
												"10": "199986.53"
											},
											{
												"0": "84fb18a0",
												"1": "84feabd2",
												"2": "1",
												"3": "1011.49176",
												"4": "91.07985",
												"5": "1503.1062",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99992.87",
												"10": "199999.53"
											},
											{
												"0": "84fb18a1",
												"1": "84feabd3",
												"2": "0",
												"3": "1017.8758",
												"4": "95.012344",
												"5": "1515.8872",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.805",
												"10": "199997.22"
											},
											{
												"0": "84fb18a2",
												"1": "84feabd4",
												"2": "1",
												"3": "1003.9203",
												"4": "109.23808",
												"5": "1504.6075",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.086",
												"10": "199991.72"
											},
											{
												"0": "84fb18a3",
												"1": "84feabd5",
												"2": "1",
												"3": "1007.87573",
												"4": "89.290794",
												"5": "1481.4988",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.79",
												"10": "200000.0"
											},
											{
												"0": "84fb18a4",
												"1": "84feabd6",
												"2": "1",
												"3": "1009.0143",
												"4": "108.89302",
												"5": "1506.4454",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.72",
												"10": "199994.06"
											},
											{
												"0": "84fb18a5",
												"1": "84feabd7",
												"2": "0",
												"3": "1007.98883",
												"4": "114.19361",
												"5": "1513.3903",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.43",
												"10": "199995.48"
											},
											{
												"0": "84fb18a6",
												"1": "84feabd8",
												"2": "1",
												"3": "998.5039",
												"4": "92.921974",
												"5": "1491.8723",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.195",
												"10": "199996.84"
											},
											{
												"0": "84fb18a7",
												"1": "84feabd9",
												"2": "1",
												"3": "986.9455",
												"4": "90.41138",
												"5": "1485.661",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.45",
												"10": "200000.42"
											},
											{
												"0": "84fb18a8",
												"1": "84feabda",
												"2": "0",
												"3": "1008.61176",
												"4": "110.62163",
												"5": "1503.5549",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.46",
												"10": "200002.77"
											},
											{
												"0": "84fb18a9",
												"1": "84feabdb",
												"2": "0",
												"3": "1007.4006",
												"4": "104.66412",
												"5": "1513.2368",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.98",
												"10": "199990.6"
											},
											{
												"0": "84fb18aa",
												"1": "84feabdc",
												"2": "1",
												"3": "1005.5698",
												"4": "96.35725",
												"5": "1513.1472",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.93",
												"10": "199995.3"
											},
											{
												"0": "84fb18ab",
												"1": "84feabdd",
												"2": "0",
												"3": "1010.8013",
												"4": "104.5258",
												"5": "1502.3257",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.63",
												"10": "199991.22"
											},
											{
												"0": "84fb18ac",
												"1": "84feabde",
												"2": "1",
												"3": "1007.2753",
												"4": "104.28342",
												"5": "1513.7872",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.695",
												"10": "199998.19"
											},
											{
												"0": "84fb18ad",
												"1": "84feabdf",
												"2": "0",
												"3": "1004.48303",
												"4": "113.09991",
												"5": "1510.3019",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.04",
												"10": "200002.17"
											},
											{
												"0": "84fb18ae",
												"1": "84feabe0",
												"2": "0",
												"3": "1006.2446",
												"4": "118.39202",
												"5": "1513.1885",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.23",
												"10": "199994.45"
											},
											{
												"0": "84fb18af",
												"1": "84feabe1",
												"2": "1",
												"3": "1005.77246",
												"4": "104.51182",
												"5": "1507.3313",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.63",
												"10": "199996.52"
											},
											{
												"0": "84fb18b0",
												"1": "84feabe2",
												"2": "0",
												"3": "1016.5039",
												"4": "95.53135",
												"5": "1503.895",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99999.78",
												"10": "199996.97"
											},
											{
												"0": "84fb18b1",
												"1": "84feabe3",
												"2": "1",
												"3": "1001.4021",
												"4": "98.11399",
												"5": "1501.9038",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.586",
												"10": "199994.22"
											},
											{
												"0": "84fb18b2",
												"1": "84feabe4",
												"2": "1",
												"3": "1005.7014",
												"4": "114.35853",
												"5": "1500.123",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99987.51",
												"10": "199995.06"
											},
											{
												"0": "84fb18b3",
												"1": "84feabe5",
												"2": "0",
												"3": "1012.47833",
												"4": "100.292",
												"5": "1507.461",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.25",
												"10": "199992.67"
											},
											{
												"0": "84fb18b4",
												"1": "84feabe6",
												"2": "0",
												"3": "1005.0033",
												"4": "89.32005",
												"5": "1507.4474",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100007.016",
												"10": "199995.33"
											},
											{
												"0": "84fb18b5",
												"1": "84feabe7",
												"2": "1",
												"3": "1005.7192",
												"4": "106.80408",
												"5": "1507.7054",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.65",
												"10": "199989.19"
											},
											{
												"0": "84fb18b6",
												"1": "84feabe8",
												"2": "1",
												"3": "1002.567",
												"4": "89.65934",
												"5": "1511.6207",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.05",
												"10": "199992.34"
											},
											{
												"0": "84fb18b7",
												"1": "84feabe9",
												"2": "1",
												"3": "1008.47675",
												"4": "101.24056",
												"5": "1514.1283",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.09",
												"10": "199990.86"
											},
											{
												"0": "84fb18b8",
												"1": "84feabea",
												"2": "0",
												"3": "1012.73334",
												"4": "96.123665",
												"5": "1515.8445",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.83",
												"10": "199992.08"
											},
											{
												"0": "84fb18b9",
												"1": "84feabeb",
												"2": "1",
												"3": "1006.0402",
												"4": "100.599106",
												"5": "1512.1996",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100003.266",
												"10": "199997.05"
											},
											{
												"0": "84fb18ba",
												"1": "84feabec",
												"2": "0",
												"3": "998.69653",
												"4": "106.25343",
												"5": "1512.4592",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.516",
												"10": "199993.5"
											},
											{
												"0": "84fb18bb",
												"1": "84feabed",
												"2": "0",
												"3": "1009.9991",
												"4": "95.42075",
												"5": "1516.5072",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100007.1",
												"10": "199995.73"
											},
											{
												"0": "84fb18bc",
												"1": "84feabee",
												"2": "0",
												"3": "1014.78766",
												"4": "84.3674",
												"5": "1513.1224",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100006.88",
												"10": "199994.78"
											},
											{
												"0": "84fb18bd",
												"1": "84feabef",
												"2": "1",
												"3": "997.92694",
												"4": "112.46989",
												"5": "1506.3086",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99997.01",
												"10": "199991.81"
											},
											{
												"0": "84fb18be",
												"1": "84feabf0",
												"2": "0",
												"3": "1006.3864",
												"4": "88.358826",
												"5": "1504.7887",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100006.445",
												"10": "199990.6"
											},
											{
												"0": "84fb18bf",
												"1": "84feabf1",
												"2": "0",
												"3": "1011.5688",
												"4": "99.95936",
												"5": "1502.9331",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100004.45",
												"10": "200002.72"
											},
											{
												"0": "84fb18c0",
												"1": "84feabf2",
												"2": "1",
												"3": "1012.06445",
												"4": "91.47781",
												"5": "1515.7916",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.53",
												"10": "199990.52"
											},
											{
												"0": "84fb18c1",
												"1": "84feabf3",
												"2": "1",
												"3": "1016.88403",
												"4": "92.57862",
												"5": "1508.682",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.02",
												"10": "199998.3"
											},
											{
												"0": "84fb18c2",
												"1": "84feabf4",
												"2": "1",
												"3": "1009.75946",
												"4": "101.100624",
												"5": "1506.305",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.66",
												"10": "199995.58"
											},
											{
												"0": "84fb18c3",
												"1": "84feabf5",
												"2": "1",
												"3": "1005.4619",
												"4": "94.49615",
												"5": "1516.3911",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.695",
												"10": "200005.19"
											},
											{
												"0": "84fb18c4",
												"1": "84feabf6",
												"2": "1",
												"3": "1013.86926",
												"4": "97.34967",
												"5": "1511.5132",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99987.83",
												"10": "199995.2"
											},
											{
												"0": "84fb18c5",
												"1": "84feabf7",
												"2": "0",
												"3": "1007.9675",
												"4": "103.58294",
												"5": "1521.8851",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.66",
												"10": "200002.02"
											},
											{
												"0": "84fb18c6",
												"1": "84feabf8",
												"2": "1",
												"3": "1013.18005",
												"4": "102.46774",
												"5": "1511.9645",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.305",
												"10": "200003.11"
											},
											{
												"0": "84fb18c7",
												"1": "84feabf9",
												"2": "1",
												"3": "1004.2593",
												"4": "105.14185",
												"5": "1498.6761",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.734",
												"10": "199995.78"
											},
											{
												"0": "84fb18c8",
												"1": "84feabfa",
												"2": "1",
												"3": "1009.17993",
												"4": "107.38293",
												"5": "1514.72",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100002.484",
												"10": "199996.19"
											},
											{
												"0": "84fb18c9",
												"1": "84feabfb",
												"2": "1",
												"3": "1003.1416",
												"4": "115.35302",
												"5": "1509.0726",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.92",
												"10": "199991.23"
											},
											{
												"0": "84fb18ca",
												"1": "84feabfc",
												"2": "1",
												"3": "1014.95184",
												"4": "77.99572",
												"5": "1497.8138",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.22",
												"10": "199994.44"
											},
											{
												"0": "84fb18cb",
												"1": "84feabfd",
												"2": "1",
												"3": "1007.86304",
												"4": "84.602036",
												"5": "1507.0093",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99994.695",
												"10": "199998.4"
											},
											{
												"0": "84fb18cc",
												"1": "84feabfe",
												"2": "0",
												"3": "1005.19617",
												"4": "91.48726",
												"5": "1513.5144",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.19",
												"10": "199995.39"
											},
											{
												"0": "84fb18cd",
												"1": "84feabff",
												"2": "1",
												"3": "1010.15155",
												"4": "101.3792",
												"5": "1513.0101",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.94",
												"10": "199995.64"
											},
											{
												"0": "84fb18ce",
												"1": "84feac00",
												"2": "1",
												"3": "1003.04504",
												"4": "89.036095",
												"5": "1503.598",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.35",
												"10": "199992.83"
											},
											{
												"0": "84fb18cf",
												"1": "84feac01",
												"2": "0",
												"3": "1004.3461",
												"4": "107.3408",
												"5": "1523.1257",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.95",
												"10": "199992.92"
											},
											{
												"0": "84fb18d0",
												"1": "84feac02",
												"2": "1",
												"3": "1004.4993",
												"4": "106.49185",
												"5": "1490.292",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.53",
												"10": "199998.14"
											},
											{
												"0": "84fb18d1",
												"1": "84feac03",
												"2": "1",
												"3": "1010.63165",
												"4": "103.61299",
												"5": "1488.1721",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.805",
												"10": "199990.48"
											},
											{
												"0": "84fb18d2",
												"1": "84feac04",
												"2": "0",
												"3": "1007.0248",
												"4": "103.63046",
												"5": "1497.9226",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.75",
												"10": "199989.7"
											},
											{
												"0": "84fb18d3",
												"1": "84feac05",
												"2": "0",
												"3": "1002.34503",
												"4": "116.062164",
												"5": "1510.2078",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100005.22",
												"10": "200001.34"
											},
											{
												"0": "84fb18d4",
												"1": "84feac06",
												"2": "1",
												"3": "1002.8026",
												"4": "107.16346",
												"5": "1501.3137",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100000.1",
												"10": "199996.0"
											},
											{
												"0": "84fb18d5",
												"1": "84feac07",
												"2": "0",
												"3": "997.9159",
												"4": "99.98341",
												"5": "1506.8059",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.695",
												"10": "199997.52"
											},
											{
												"0": "84fb18d6",
												"1": "84feac08",
												"2": "0",
												"3": "1011.90137",
												"4": "110.179245",
												"5": "1503.9493",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.88",
												"10": "199989.9"
											},
											{
												"0": "84fb18d7",
												"1": "84feac09",
												"2": "1",
												"3": "1016.32806",
												"4": "102.84475",
												"5": "1496.355",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99992.164",
												"10": "199989.2"
											},
											{
												"0": "84fb18d8",
												"1": "84feac0a",
												"2": "0",
												"3": "1007.5368",
												"4": "109.15302",
												"5": "1516.983",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.75",
												"10": "199997.8"
											},
											{
												"0": "84fb18d9",
												"1": "84feac0b",
												"2": "0",
												"3": "1001.2707",
												"4": "98.24518",
												"5": "1504.8644",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.93",
												"10": "200004.05"
											},
											{
												"0": "84fb18da",
												"1": "84feac0c",
												"2": "1",
												"3": "1005.3766",
												"4": "101.56357",
												"5": "1506.0281",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.72",
												"10": "199988.3"
											},
											{
												"0": "84fb18db",
												"1": "84feac0d",
												"2": "0",
												"3": "1006.2492",
												"4": "90.01147",
												"5": "1509.1378",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100017.11",
												"10": "199989.4"
											},
											{
												"0": "84fb18dc",
												"1": "84feac0e",
												"2": "1",
												"3": "1006.9419",
												"4": "98.26389",
												"5": "1505.0166",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99997.055",
												"10": "199993.31"
											},
											{
												"0": "84fb18dd",
												"1": "84feac0f",
												"2": "0",
												"3": "1011.37823",
												"4": "96.65543",
												"5": "1504.7515",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100009.56",
												"10": "199999.1"
											},
											{
												"0": "84fb18de",
												"1": "84feac10",
												"2": "1",
												"3": "1012.53217",
												"4": "101.4492",
												"5": "1527.9752",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.53",
												"10": "200002.28"
											},
											{
												"0": "84fb18df",
												"1": "84feac11",
												"2": "1",
												"3": "1004.9831",
												"4": "105.28363",
												"5": "1514.6584",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99991.52",
												"10": "199996.83"
											},
											{
												"0": "84fb18e0",
												"1": "84feac12",
												"2": "0",
												"3": "1012.25726",
												"4": "101.747345",
												"5": "1511.3273",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.1",
												"10": "199998.36"
											},
											{
												"0": "84fb18e1",
												"1": "84feac13",
												"2": "0",
												"3": "1007.9013",
												"4": "108.22072",
												"5": "1504.9849",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.37",
												"10": "199997.78"
											},
											{
												"0": "84fb18e2",
												"1": "84feac14",
												"2": "0",
												"3": "1009.6587",
												"4": "104.83317",
												"5": "1504.4032",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.164",
												"10": "199996.34"
											},
											{
												"0": "84fb18e3",
												"1": "84feac15",
												"2": "1",
												"3": "1007.46405",
												"4": "114.90114",
												"5": "1496.329",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.375",
												"10": "199988.45"
											},
											{
												"0": "84fb18e4",
												"1": "84feac16",
												"2": "1",
												"3": "1003.34766",
												"4": "113.30181",
												"5": "1499.6055",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99991.55",
												"10": "199990.22"
											},
											{
												"0": "84fb18e5",
												"1": "84feac17",
												"2": "1",
												"3": "1002.347",
												"4": "101.42993",
												"5": "1501.1752",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.88",
												"10": "199996.06"
											},
											{
												"0": "84fb18e6",
												"1": "84feac18",
												"2": "1",
												"3": "1003.28925",
												"4": "115.64995",
												"5": "1511.2598",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.72",
												"10": "199996.83"
											},
											{
												"0": "84fb18e7",
												"1": "84feac19",
												"2": "0",
												"3": "1013.8945",
												"4": "92.234505",
												"5": "1513.6433",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100006.36",
												"10": "199992.23"
											},
											{
												"0": "84fb18e8",
												"1": "84feac1a",
												"2": "0",
												"3": "1014.82446",
												"4": "84.98217",
												"5": "1504.9031",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100003.266",
												"10": "199995.97"
											},
											{
												"0": "84fb18e9",
												"1": "84feac1b",
												"2": "0",
												"3": "1002.5478",
												"4": "114.15289",
												"5": "1517.5914",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99992.74",
												"10": "200003.03"
											},
											{
												"0": "84fb18ea",
												"1": "84feac1c",
												"2": "1",
												"3": "1000.54156",
												"4": "100.599396",
												"5": "1507.0253",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99993.484",
												"10": "199995.56"
											},
											{
												"0": "84fb18eb",
												"1": "84feac1d",
												"2": "0",
												"3": "1020.7815",
												"4": "89.15484",
												"5": "1520.1006",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100004.26",
												"10": "200001.8"
											},
											{
												"0": "84fb18ec",
												"1": "84feac1e",
												"2": "0",
												"3": "1006.2488",
												"4": "110.913536",
												"5": "1508.3082",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100004.65",
												"10": "199996.33"
											},
											{
												"0": "84fb18ed",
												"1": "84feac1f",
												"2": "1",
												"3": "1016.83014",
												"4": "96.487404",
												"5": "1497.9685",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100001.2",
												"10": "199995.62"
											},
											{
												"0": "84fb18ee",
												"1": "84feac20",
												"2": "0",
												"3": "999.7873",
												"4": "78.71357",
												"5": "1503.9244",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100003.6",
												"10": "200001.28"
											},
											{
												"0": "84fb18ef",
												"1": "84feac21",
												"2": "1",
												"3": "1008.3724",
												"4": "112.0654",
												"5": "1512.7142",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99985.21",
												"10": "199993.55"
											},
											{
												"0": "84fb18f0",
												"1": "84feac22",
												"2": "1",
												"3": "1003.6676",
												"4": "110.330696",
												"5": "1509.7473",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.48",
												"10": "199993.94"
											},
											{
												"0": "84fb18f1",
												"1": "84feac23",
												"2": "1",
												"3": "1001.5113",
												"4": "109.52284",
												"5": "1510.0833",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.01",
												"10": "199999.2"
											},
											{
												"0": "84fb18f2",
												"1": "84feac24",
												"2": "0",
												"3": "1005.2203",
												"4": "99.335655",
												"5": "1507.8839",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100010.836",
												"10": "199990.31"
											},
											{
												"0": "84fb18f3",
												"1": "84feac25",
												"2": "1",
												"3": "1016.1812",
												"4": "100.27808",
												"5": "1513.6824",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.63",
												"10": "200001.5"
											},
											{
												"0": "84fb18f4",
												"1": "84feac26",
												"2": "0",
												"3": "1014.0884",
												"4": "91.48514",
												"5": "1493.4265",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.055",
												"10": "199985.97"
											},
											{
												"0": "84fb18f5",
												"1": "84feac27",
												"2": "0",
												"3": "1018.5366",
												"4": "99.134544",
												"5": "1513.984",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.14",
												"10": "199991.02"
											},
											{
												"0": "84fb18f6",
												"1": "84feac28",
												"2": "1",
												"3": "1015.29034",
												"4": "77.27453",
												"5": "1500.4323",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.3",
												"10": "199994.28"
											},
											{
												"0": "84fb18f7",
												"1": "84feac29",
												"2": "0",
												"3": "1003.4122",
												"4": "115.98948",
												"5": "1510.4971",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.85",
												"10": "199994.3"
											},
											{
												"0": "84fb18f8",
												"1": "84feac2a",
												"2": "1",
												"3": "1004.5584",
												"4": "82.077194",
												"5": "1501.3417",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99983.95",
												"10": "199990.48"
											},
											{
												"0": "84fb18f9",
												"1": "84feac2b",
												"2": "0",
												"3": "1008.90094",
												"4": "93.83318",
												"5": "1515.8024",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100004.68",
												"10": "199995.88"
											},
											{
												"0": "84fb18fa",
												"1": "84feac2c",
												"2": "0",
												"3": "1007.3081",
												"4": "113.92981",
												"5": "1504.3162",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.14",
												"10": "200002.28"
											},
											{
												"0": "84fb18fb",
												"1": "84feac2d",
												"2": "1",
												"3": "998.46246",
												"4": "96.59304",
												"5": "1509.2512",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.67",
												"10": "199992.92"
											},
											{
												"0": "84fb18fc",
												"1": "84feac2e",
												"2": "1",
												"3": "1006.93463",
												"4": "111.160416",
												"5": "1508.5378",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.17",
												"10": "200000.89"
											},
											{
												"0": "84fb18fd",
												"1": "84feac2f",
												"2": "1",
												"3": "1012.3878",
												"4": "111.44955",
												"5": "1511.5018",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.21",
												"10": "199994.48"
											},
											{
												"0": "84fb18fe",
												"1": "84feac30",
												"2": "1",
												"3": "1016.80786",
												"4": "94.18676",
												"5": "1493.9684",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.79",
												"10": "199994.34"
											},
											{
												"0": "84fb18ff",
												"1": "84feac31",
												"2": "1",
												"3": "1010.3523",
												"4": "102.4879",
												"5": "1512.5052",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.53",
												"10": "199997.92"
											},
											{
												"0": "84fb1900",
												"1": "84feac32",
												"2": "1",
												"3": "999.45905",
												"4": "97.84498",
												"5": "1500.1746",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.94",
												"10": "200001.44"
											},
											{
												"0": "84fb1901",
												"1": "84feac33",
												"2": "0",
												"3": "1009.6804",
												"4": "101.59482",
												"5": "1510.887",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.05",
												"10": "199996.92"
											},
											{
												"0": "84fb1902",
												"1": "84feac34",
												"2": "1",
												"3": "1006.57043",
												"4": "107.58406",
												"5": "1518.8638",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.195",
												"10": "199992.12"
											},
											{
												"0": "84fb1903",
												"1": "84feac35",
												"2": "0",
												"3": "1013.85455",
												"4": "87.48346",
												"5": "1512.8772",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.99",
												"10": "199992.67"
											},
											{
												"0": "84fb1904",
												"1": "84feac36",
												"2": "1",
												"3": "1001.78186",
												"4": "91.32511",
												"5": "1509.6343",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.164",
												"10": "200002.66"
											},
											{
												"0": "84fb1905",
												"1": "84feac37",
												"2": "1",
												"3": "1010.25977",
												"4": "96.58452",
												"5": "1511.3633",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99993.11",
												"10": "199997.7"
											},
											{
												"0": "84fb1906",
												"1": "84feac38",
												"2": "0",
												"3": "1007.4324",
												"4": "96.031815",
												"5": "1511.1613",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100002.17",
												"10": "200004.64"
											},
											{
												"0": "84fb1907",
												"1": "84feac39",
												"2": "1",
												"3": "1006.9325",
												"4": "121.49165",
												"5": "1505.2611",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.31",
												"10": "199995.89"
											},
											{
												"0": "84fb1908",
												"1": "84feac3a",
												"2": "1",
												"3": "1006.578",
												"4": "111.519104",
												"5": "1502.0706",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.64",
												"10": "199997.4"
											},
											{
												"0": "84fb1909",
												"1": "84feac3b",
												"2": "1",
												"3": "997.04846",
												"4": "92.9612",
												"5": "1507.2677",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.43",
												"10": "199994.62"
											},
											{
												"0": "84fb190a",
												"1": "84feac3c",
												"2": "1",
												"3": "1006.54944",
												"4": "101.905815",
												"5": "1504.456",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.48",
												"10": "199996.86"
											},
											{
												"0": "84fb190b",
												"1": "84feac3d",
												"2": "0",
												"3": "1001.5672",
												"4": "101.368065",
												"5": "1508.9032",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.13",
												"10": "199991.31"
											},
											{
												"0": "84fb190c",
												"1": "84feac3e",
												"2": "1",
												"3": "1008.5791",
												"4": "112.122475",
												"5": "1504.8894",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.45",
												"10": "199994.72"
											},
											{
												"0": "84fb190d",
												"1": "84feac3f",
												"2": "1",
												"3": "1017.80524",
												"4": "83.124535",
												"5": "1521.5566",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.555",
												"10": "199995.55"
											},
											{
												"0": "84fb190e",
												"1": "84feac40",
												"2": "0",
												"3": "1000.57916",
												"4": "105.0048",
												"5": "1503.8309",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.14",
												"10": "200003.12"
											},
											{
												"0": "84fb190f",
												"1": "84feac41",
												"2": "0",
												"3": "1001.1938",
												"4": "89.45111",
												"5": "1510.42",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.85",
												"10": "199997.28"
											},
											{
												"0": "84fb1910",
												"1": "84feac42",
												"2": "1",
												"3": "1007.044",
												"4": "113.81246",
												"5": "1505.2808",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.266",
												"10": "199994.36"
											},
											{
												"0": "84fb1911",
												"1": "84feac43",
												"2": "1",
												"3": "1002.4552",
												"4": "120.593124",
												"5": "1499.1858",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.74",
												"10": "199993.33"
											},
											{
												"0": "84fb1912",
												"1": "84feac44",
												"2": "0",
												"3": "1006.6277",
												"4": "104.50253",
												"5": "1507.1033",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.29",
												"10": "199996.64"
											},
											{
												"0": "84fb1913",
												"1": "84feac45",
												"2": "0",
												"3": "1002.4104",
												"4": "75.71309",
												"5": "1497.1211",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.58",
												"10": "199991.56"
											},
											{
												"0": "84fb1914",
												"1": "84feac46",
												"2": "1",
												"3": "997.30444",
												"4": "114.152336",
												"5": "1499.0625",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.98",
												"10": "199994.94"
											},
											{
												"0": "84fb1915",
												"1": "84feac47",
												"2": "1",
												"3": "1005.4925",
												"4": "90.52805",
												"5": "1515.3057",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99998.01",
												"10": "199998.39"
											},
											{
												"0": "84fb1916",
												"1": "84feac48",
												"2": "1",
												"3": "999.61584",
												"4": "114.37476",
												"5": "1513.0361",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.01",
												"10": "199995.48"
											},
											{
												"0": "84fb1917",
												"1": "84feac49",
												"2": "0",
												"3": "1010.23773",
												"4": "105.10298",
												"5": "1504.7727",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100005.39",
												"10": "200004.2"
											},
											{
												"0": "84fb1918",
												"1": "84feac4a",
												"2": "1",
												"3": "1008.1083",
												"4": "108.25641",
												"5": "1512.6144",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100004.625",
												"10": "199995.11"
											},
											{
												"0": "84fb1919",
												"1": "84feac4b",
												"2": "0",
												"3": "1004.8888",
												"4": "78.0144",
												"5": "1510.2025",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.87",
												"10": "199999.53"
											},
											{
												"0": "84fb191a",
												"1": "84feac4c",
												"2": "0",
												"3": "1011.29596",
												"4": "107.856026",
												"5": "1513.0483",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.2",
												"10": "200003.19"
											},
											{
												"0": "84fb191b",
												"1": "84feac4d",
												"2": "1",
												"3": "1017.4476",
												"4": "100.57091",
												"5": "1500.5759",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99987.51",
												"10": "199995.75"
											},
											{
												"0": "84fb191c",
												"1": "84feac4e",
												"2": "1",
												"3": "1005.289",
												"4": "100.720146",
												"5": "1503.0352",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.98",
												"10": "199990.78"
											},
											{
												"0": "84fb191d",
												"1": "84feac4f",
												"2": "1",
												"3": "1005.26263",
												"4": "105.18751",
												"5": "1521.9019",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.11",
												"10": "199993.52"
											},
											{
												"0": "84fb191e",
												"1": "84feac50",
												"2": "1",
												"3": "1004.5875",
												"4": "122.91208",
												"5": "1508.3984",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.64",
												"10": "199996.42"
											},
											{
												"0": "84fb191f",
												"1": "84feac51",
												"2": "0",
												"3": "1001.6296",
												"4": "94.55235",
												"5": "1497.5057",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.055",
												"10": "199992.62"
											},
											{
												"0": "84fb1920",
												"1": "84feac52",
												"2": "1",
												"3": "1003.69586",
												"4": "87.04193",
												"5": "1513.8242",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.875",
												"10": "199992.67"
											},
											{
												"0": "84fb1921",
												"1": "84feac53",
												"2": "1",
												"3": "1005.24615",
												"4": "74.63907",
												"5": "1497.1206",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.93",
												"10": "199993.55"
											},
											{
												"0": "84fb19be",
												"1": "84feacf0",
												"2": "0",
												"3": "1018.482",
												"4": "85.61327",
												"5": "1508.2451",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.21",
												"10": "199998.11"
											},
											{
												"0": "84fb19bf",
												"1": "84feacf1",
												"2": "0",
												"3": "1004.9263",
												"4": "106.481384",
												"5": "1525.355",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.01",
												"10": "200001.75"
											},
											{
												"0": "84fb19c0",
												"1": "84feacf2",
												"2": "0",
												"3": "1011.1673",
												"4": "91.17541",
												"5": "1516.2101",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100000.375",
												"10": "200006.0"
											},
											{
												"0": "84fb19c1",
												"1": "84feacf3",
												"2": "1",
												"3": "1007.95197",
												"4": "102.39454",
												"5": "1508.3932",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.67",
												"10": "199992.14"
											},
											{
												"0": "84fb19c2",
												"1": "84feacf4",
												"2": "0",
												"3": "1006.12695",
												"4": "94.73046",
												"5": "1503.2319",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.18",
												"10": "199996.84"
											},
											{
												"0": "84fb19c3",
												"1": "84feacf5",
												"2": "1",
												"3": "1007.87646",
												"4": "95.21509",
												"5": "1507.0791",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99987.22",
												"10": "199993.34"
											},
											{
												"0": "84fb19c4",
												"1": "84feacf6",
												"2": "1",
												"3": "1006.77185",
												"4": "107.87877",
												"5": "1518.4608",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99989.37",
												"10": "199991.58"
											},
											{
												"0": "84fb19c5",
												"1": "84feacf7",
												"2": "0",
												"3": "1017.0826",
												"4": "94.97644",
												"5": "1500.5856",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100007.83",
												"10": "199999.73"
											},
											{
												"0": "84fb19c6",
												"1": "84feacf8",
												"2": "0",
												"3": "1002.39056",
												"4": "112.145874",
												"5": "1500.8824",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.195",
												"10": "199996.17"
											},
											{
												"0": "84fb19c7",
												"1": "84feacf9",
												"2": "1",
												"3": "1010.1375",
												"4": "96.658775",
												"5": "1504.4403",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.83",
												"10": "199994.64"
											},
											{
												"0": "84fb19c8",
												"1": "84feacfa",
												"2": "0",
												"3": "1011.35065",
												"4": "106.91032",
												"5": "1511.7976",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.08",
												"10": "199991.69"
											},
											{
												"0": "84fb19c9",
												"1": "84feacfb",
												"2": "0",
												"3": "1012.2866",
												"4": "103.14829",
												"5": "1508.5055",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.445",
												"10": "199991.22"
											},
											{
												"0": "84fb19ca",
												"1": "84feacfc",
												"2": "1",
												"3": "1010.7936",
												"4": "101.7714",
												"5": "1503.068",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99983.32",
												"10": "199993.11"
											},
											{
												"0": "84fb19cb",
												"1": "84feacfd",
												"2": "0",
												"3": "1004.75635",
												"4": "95.919716",
												"5": "1509.1558",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.39",
												"10": "199994.06"
											},
											{
												"0": "84fb19cc",
												"1": "84feacfe",
												"2": "1",
												"3": "1013.4426",
												"4": "105.60898",
												"5": "1519.2394",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.93",
												"10": "199992.72"
											},
											{
												"0": "84fb19cd",
												"1": "84feacff",
												"2": "1",
												"3": "1010.8858",
												"4": "107.11346",
												"5": "1510.0499",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.945",
												"10": "199998.66"
											},
											{
												"0": "84fb19ce",
												"1": "84fead00",
												"2": "0",
												"3": "1010.3358",
												"4": "91.1439",
												"5": "1505.026",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.945",
												"10": "199999.64"
											},
											{
												"0": "84fb19cf",
												"1": "84fead01",
												"2": "0",
												"3": "1009.3987",
												"4": "92.09902",
												"5": "1502.6775",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100009.01",
												"10": "199990.05"
											},
											{
												"0": "84fb19d0",
												"1": "84fead02",
												"2": "1",
												"3": "998.01245",
												"4": "99.17825",
												"5": "1505.5725",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.1",
												"10": "199995.23"
											},
											{
												"0": "84fb19d1",
												"1": "84fead03",
												"2": "1",
												"3": "1014.13776",
												"4": "103.72688",
												"5": "1513.975",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.13",
												"10": "199994.23"
											},
											{
												"0": "84fb19d2",
												"1": "84fead04",
												"2": "0",
												"3": "1010.9819",
												"4": "106.74328",
												"5": "1503.1864",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.4",
												"10": "199990.22"
											},
											{
												"0": "84fb19d3",
												"1": "84fead05",
												"2": "1",
												"3": "1009.3234",
												"4": "100.61408",
												"5": "1507.4734",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.15",
												"10": "199992.92"
											},
											{
												"0": "84fb19d4",
												"1": "84fead06",
												"2": "0",
												"3": "1001.89526",
												"4": "115.54801",
												"5": "1516.7334",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.72",
												"10": "199994.55"
											},
											{
												"0": "84fb19d5",
												"1": "84fead07",
												"2": "1",
												"3": "997.3922",
												"4": "113.81722",
												"5": "1514.2124",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.15",
												"10": "199994.69"
											},
											{
												"0": "84fb19d6",
												"1": "84fead08",
												"2": "1",
												"3": "1010.8201",
												"4": "101.99456",
												"5": "1504.5647",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.45",
												"10": "199999.69"
											},
											{
												"0": "84fb19d7",
												"1": "84fead09",
												"2": "0",
												"3": "1010.7245",
												"4": "105.65025",
												"5": "1508.1958",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.67",
												"10": "199996.7"
											},
											{
												"0": "84fb19d8",
												"1": "84fead0a",
												"2": "0",
												"3": "1008.73584",
												"4": "87.64626",
												"5": "1502.4166",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100002.195",
												"10": "199997.44"
											},
											{
												"0": "84fb19d9",
												"1": "84fead0b",
												"2": "1",
												"3": "1024.3064",
												"4": "101.02505",
												"5": "1507.7804",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.95",
												"10": "199991.94"
											},
											{
												"0": "84fb19da",
												"1": "84fead0c",
												"2": "0",
												"3": "1009.3591",
												"4": "106.53698",
												"5": "1503.7904",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.2",
												"10": "199997.33"
											},
											{
												"0": "84fb19db",
												"1": "84fead0d",
												"2": "0",
												"3": "1009.3427",
												"4": "89.41431",
												"5": "1503.3279",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.42",
												"10": "199990.34"
											},
											{
												"0": "84fb19dc",
												"1": "84fead0e",
												"2": "0",
												"3": "1017.53186",
												"4": "96.783676",
												"5": "1499.5321",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100011.24",
												"10": "199987.06"
											},
											{
												"0": "84fb19dd",
												"1": "84fead0f",
												"2": "1",
												"3": "1005.59015",
												"4": "106.306526",
												"5": "1494.8068",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.35",
												"10": "200003.95"
											},
											{
												"0": "84fb19de",
												"1": "84fead10",
												"2": "0",
												"3": "1005.0484",
												"4": "96.51889",
												"5": "1510.218",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.65",
												"10": "199994.86"
											},
											{
												"0": "84fb19df",
												"1": "84fead11",
												"2": "1",
												"3": "1005.3029",
												"4": "113.34161",
												"5": "1507.0066",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.39",
												"10": "199998.47"
											},
											{
												"0": "84fb19e0",
												"1": "84fead12",
												"2": "0",
												"3": "1013.4768",
												"4": "97.42336",
												"5": "1516.1542",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100011.4",
												"10": "199989.72"
											},
											{
												"0": "84fb19e1",
												"1": "84fead13",
												"2": "1",
												"3": "1011.17535",
												"4": "99.78195",
												"5": "1504.7797",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.234",
												"10": "199994.06"
											},
											{
												"0": "84fb19e2",
												"1": "84fead14",
												"2": "1",
												"3": "1002.0814",
												"4": "95.367775",
												"5": "1508.4019",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.12",
												"10": "199992.73"
											},
											{
												"0": "84fb19e3",
												"1": "84fead15",
												"2": "0",
												"3": "1008.59625",
												"4": "105.41431",
												"5": "1505.2113",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99998.516",
												"10": "200002.84"
											},
											{
												"0": "84fb19e4",
												"1": "84fead16",
												"2": "1",
												"3": "991.946",
												"4": "92.82633",
												"5": "1501.996",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.555",
												"10": "200001.11"
											},
											{
												"0": "84fb19e5",
												"1": "84fead17",
												"2": "1",
												"3": "1002.1131",
												"4": "97.84364",
												"5": "1506.8761",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.27",
												"10": "199997.73"
											},
											{
												"0": "84fb19e6",
												"1": "84fead18",
												"2": "1",
												"3": "1007.0589",
												"4": "105.8241",
												"5": "1517.0671",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99989.58",
												"10": "199989.84"
											},
											{
												"0": "84fb19e7",
												"1": "84fead19",
												"2": "0",
												"3": "999.7757",
												"4": "98.94086",
												"5": "1524.064",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.55",
												"10": "199992.42"
											},
											{
												"0": "84fb19e8",
												"1": "84fead1a",
												"2": "1",
												"3": "999.65265",
												"4": "113.159004",
												"5": "1515.3451",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.8",
												"10": "199994.1"
											},
											{
												"0": "84fb19e9",
												"1": "84fead1b",
												"2": "1",
												"3": "1005.0906",
												"4": "95.00037",
												"5": "1504.6088",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99988.92",
												"10": "199994.95"
											},
											{
												"0": "84fb19ea",
												"1": "84fead1c",
												"2": "1",
												"3": "1003.85376",
												"4": "118.77819",
												"5": "1495.7389",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.15",
												"10": "199993.53"
											},
											{
												"0": "84fb19eb",
												"1": "84fead1d",
												"2": "0",
												"3": "1009.8063",
												"4": "111.91913",
												"5": "1508.0912",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.5",
												"10": "199988.3"
											},
											{
												"0": "84fb19ec",
												"1": "84fead1e",
												"2": "0",
												"3": "1006.55566",
												"4": "95.6765",
												"5": "1499.4274",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100003.3",
												"10": "199988.52"
											},
											{
												"0": "84fb19ed",
												"1": "84fead1f",
												"2": "0",
												"3": "1009.32367",
												"4": "104.2379",
												"5": "1505.2944",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.66",
												"10": "199996.84"
											},
											{
												"0": "84fb19ee",
												"1": "84fead20",
												"2": "0",
												"3": "1011.28906",
												"4": "102.02071",
												"5": "1512.4146",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.336",
												"10": "200000.69"
											},
											{
												"0": "84fb19ef",
												"1": "84fead21",
												"2": "1",
												"3": "1008.35345",
												"4": "98.31365",
												"5": "1509.9261",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.805",
												"10": "200002.69"
											},
											{
												"0": "84fb19f0",
												"1": "84fead22",
												"2": "1",
												"3": "1006.6927",
												"4": "99.57894",
												"5": "1503.4271",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.86",
												"10": "199995.36"
											},
											{
												"0": "84fb19f1",
												"1": "84fead23",
												"2": "1",
												"3": "1014.8746",
												"4": "87.15329",
												"5": "1502.4806",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.086",
												"10": "199998.61"
											},
											{
												"0": "84fb19f2",
												"1": "84fead24",
												"2": "1",
												"3": "1000.96326",
												"4": "112.44559",
												"5": "1495.3722",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.6",
												"10": "199990.02"
											},
											{
												"0": "84fb19f3",
												"1": "84fead25",
												"2": "0",
												"3": "1003.70966",
												"4": "119.47017",
												"5": "1499.1619",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.23",
												"10": "199988.81"
											},
											{
												"0": "84fb19f4",
												"1": "84fead26",
												"2": "1",
												"3": "1010.0124",
												"4": "105.8892",
												"5": "1497.3826",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.55",
												"10": "199994.34"
											},
											{
												"0": "84fb19f5",
												"1": "84fead27",
												"2": "1",
												"3": "995.966",
												"4": "83.83184",
												"5": "1476.436",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.61",
												"10": "199997.03"
											},
											{
												"0": "84fb19f6",
												"1": "84fead28",
												"2": "1",
												"3": "1007.95374",
												"4": "103.68084",
												"5": "1513.859",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99993.695",
												"10": "199998.2"
											},
											{
												"0": "84fb19f7",
												"1": "84fead29",
												"2": "0",
												"3": "1004.2113",
												"4": "120.087975",
												"5": "1512.0847",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100008.016",
												"10": "199992.05"
											},
											{
												"0": "84fb19f8",
												"1": "84fead2a",
												"2": "0",
												"3": "1003.5197",
												"4": "95.91771",
												"5": "1513.5865",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.1",
												"10": "199992.66"
											},
											{
												"0": "84fb19f9",
												"1": "84fead2b",
												"2": "0",
												"3": "1014.4698",
												"4": "93.25638",
												"5": "1518.3075",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.03",
												"10": "199990.36"
											},
											{
												"0": "84fb19fa",
												"1": "84fead2c",
												"2": "0",
												"3": "1011.3951",
												"4": "104.0526",
												"5": "1506.6436",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.516",
												"10": "199990.97"
											},
											{
												"0": "84fb19fb",
												"1": "84fead2d",
												"2": "0",
												"3": "1006.44556",
												"4": "97.86042",
												"5": "1519.7876",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.15",
												"10": "199997.03"
											},
											{
												"0": "84fb19fc",
												"1": "84fead2e",
												"2": "0",
												"3": "998.0975",
												"4": "126.259285",
												"5": "1496.7439",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.43",
												"10": "199997.97"
											},
											{
												"0": "84fb19fd",
												"1": "84fead2f",
												"2": "0",
												"3": "1009.0829",
												"4": "96.782646",
												"5": "1509.7952",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.125",
												"10": "199993.94"
											},
											{
												"0": "84fb19fe",
												"1": "84fead30",
												"2": "1",
												"3": "1016.067",
												"4": "93.63412",
												"5": "1523.2623",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.37",
												"10": "199997.55"
											},
											{
												"0": "84fb19ff",
												"1": "84fead31",
												"2": "1",
												"3": "1009.7058",
												"4": "107.58333",
												"5": "1503.8177",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.49",
												"10": "199996.67"
											},
											{
												"0": "84fb1a00",
												"1": "84fead32",
												"2": "0",
												"3": "1006.8429",
												"4": "107.934494",
												"5": "1501.719",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100009.81",
												"10": "199991.47"
											},
											{
												"0": "84fb1a01",
												"1": "84fead33",
												"2": "1",
												"3": "999.97034",
												"4": "98.3067",
												"5": "1512.5195",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99995.71",
												"10": "199995.19"
											},
											{
												"0": "84fb1a02",
												"1": "84fead34",
												"2": "1",
												"3": "1003.96375",
												"4": "104.931694",
												"5": "1506.2836",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99994.28",
												"10": "199995.53"
											},
											{
												"0": "84fb1a03",
												"1": "84fead35",
												"2": "1",
												"3": "1004.0109",
												"4": "85.06968",
												"5": "1488.5729",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.26",
												"10": "199994.77"
											},
											{
												"0": "84fb1a04",
												"1": "84fead36",
												"2": "1",
												"3": "1009.9958",
												"4": "85.93319",
												"5": "1504.6383",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.586",
												"10": "199999.31"
											},
											{
												"0": "84fb1a05",
												"1": "84fead37",
												"2": "0",
												"3": "1008.94116",
												"4": "84.22714",
												"5": "1501.0367",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100010.26",
												"10": "199992.72"
											},
											{
												"0": "84fb1a06",
												"1": "84fead38",
												"2": "1",
												"3": "1000.44904",
												"4": "92.91808",
												"5": "1507.3303",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.59",
												"10": "199994.7"
											},
											{
												"0": "84fb1a07",
												"1": "84fead39",
												"2": "1",
												"3": "1006.93805",
												"4": "92.54758",
												"5": "1500.7189",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.125",
												"10": "199997.19"
											},
											{
												"0": "84fb1a08",
												"1": "84fead3a",
												"2": "1",
												"3": "1011.0697",
												"4": "111.61335",
												"5": "1514.1329",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.305",
												"10": "199993.62"
											},
											{
												"0": "84fb1a09",
												"1": "84fead3b",
												"2": "1",
												"3": "1008.4517",
												"4": "94.40393",
												"5": "1500.0533",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.28",
												"10": "200001.86"
											},
											{
												"0": "84fb1a0a",
												"1": "84fead3c",
												"2": "1",
												"3": "1007.4834",
												"4": "93.39283",
												"5": "1512.8899",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.266",
												"10": "199994.16"
											},
											{
												"0": "84fb1a0b",
												"1": "84fead3d",
												"2": "0",
												"3": "1010.2948",
												"4": "116.66481",
												"5": "1504.0908",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.34",
												"10": "199993.78"
											},
											{
												"0": "84fb1a0c",
												"1": "84fead3e",
												"2": "1",
												"3": "1011.904",
												"4": "81.71621",
												"5": "1514.059",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.23",
												"10": "199997.38"
											},
											{
												"0": "84fb1a0d",
												"1": "84fead3f",
												"2": "0",
												"3": "1011.3655",
												"4": "85.10612",
												"5": "1499.2888",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.13",
												"10": "200000.61"
											},
											{
												"0": "84fb1a0e",
												"1": "84fead40",
												"2": "1",
												"3": "1018.5942",
												"4": "93.76567",
												"5": "1518.1125",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.984",
												"10": "199997.05"
											},
											{
												"0": "84fb1a0f",
												"1": "84fead41",
												"2": "0",
												"3": "1012.1205",
												"4": "110.54364",
												"5": "1511.4629",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.96",
												"10": "199996.34"
											},
											{
												"0": "84fb1a10",
												"1": "84fead42",
												"2": "1",
												"3": "1007.8676",
												"4": "75.36882",
												"5": "1501.9203",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.984",
												"10": "199994.23"
											},
											{
												"0": "84fb1a11",
												"1": "84fead43",
												"2": "1",
												"3": "1018.7265",
												"4": "90.38747",
												"5": "1510.6168",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.05",
												"10": "199992.11"
											},
											{
												"0": "84fb1a12",
												"1": "84fead44",
												"2": "0",
												"3": "991.8949",
												"4": "96.62685",
												"5": "1506.5027",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.984",
												"10": "199997.25"
											},
											{
												"0": "84fb1a13",
												"1": "84fead45",
												"2": "1",
												"3": "1011.5589",
												"4": "107.32213",
												"5": "1511.8983",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.8",
												"10": "199992.45"
											},
											{
												"0": "84fb1a14",
												"1": "84fead46",
												"2": "1",
												"3": "1012.2399",
												"4": "82.924385",
												"5": "1504.3966",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100001.09",
												"10": "199998.98"
											},
											{
												"0": "84fb1a15",
												"1": "84fead47",
												"2": "1",
												"3": "1006.10297",
												"4": "104.38834",
												"5": "1508.3743",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.38",
												"10": "199991.31"
											},
											{
												"0": "84fb1a16",
												"1": "84fead48",
												"2": "0",
												"3": "1009.08887",
												"4": "89.61005",
												"5": "1505.3652",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.42",
												"10": "199989.1"
											},
											{
												"0": "84fb1a17",
												"1": "84fead49",
												"2": "1",
												"3": "1013.0488",
												"4": "109.32493",
												"5": "1506.2588",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.83",
												"10": "200002.67"
											},
											{
												"0": "84fb1a18",
												"1": "84fead4a",
												"2": "0",
												"3": "1010.182",
												"4": "102.14313",
												"5": "1510.1368",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.805",
												"10": "200001.7"
											},
											{
												"0": "84fb1a19",
												"1": "84fead4b",
												"2": "1",
												"3": "1012.08264",
												"4": "101.409225",
												"5": "1506.3878",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.82",
												"10": "199992.64"
											},
											{
												"0": "84fb1a1a",
												"1": "84fead4c",
												"2": "0",
												"3": "1012.74445",
												"4": "89.22394",
												"5": "1519.582",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.875",
												"10": "199995.66"
											},
											{
												"0": "84fb1a1b",
												"1": "84fead4d",
												"2": "1",
												"3": "1003.1095",
												"4": "90.982445",
												"5": "1501.3821",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.83",
												"10": "199994.98"
											},
											{
												"0": "84fb1a1c",
												"1": "84fead4e",
												"2": "0",
												"3": "999.57367",
												"4": "84.101006",
												"5": "1506.9904",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.42",
												"10": "200001.0"
											},
											{
												"0": "84fb1a1d",
												"1": "84fead4f",
												"2": "0",
												"3": "1002.14844",
												"4": "89.44758",
												"5": "1512.2394",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.58",
												"10": "199998.62"
											},
											{
												"0": "84fb1a1e",
												"1": "84fead50",
												"2": "0",
												"3": "1007.73047",
												"4": "96.33567",
												"5": "1516.0443",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.266",
												"10": "199996.34"
											},
											{
												"0": "84fb1a1f",
												"1": "84fead51",
												"2": "0",
												"3": "1010.9067",
												"4": "80.69493",
												"5": "1495.5812",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.55",
												"10": "200002.34"
											},
											{
												"0": "84fb1a20",
												"1": "84fead52",
												"2": "0",
												"3": "1009.6053",
												"4": "79.75067",
												"5": "1502.1816",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100011.17",
												"10": "199989.88"
											},
											{
												"0": "84fb1a21",
												"1": "84fead53",
												"2": "1",
												"3": "1004.56635",
												"4": "106.853806",
												"5": "1499.1727",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.04",
												"10": "199988.78"
											},
											{
												"0": "84fb1a22",
												"1": "84fead54",
												"2": "1",
												"3": "1014.785",
												"4": "88.823784",
												"5": "1516.2473",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.586",
												"10": "199995.84"
											},
											{
												"0": "84fb1a23",
												"1": "84fead55",
												"2": "0",
												"3": "1004.6148",
												"4": "114.50366",
												"5": "1499.5486",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.055",
												"10": "199990.17"
											},
											{
												"0": "84fb1a24",
												"1": "84fead56",
												"2": "0",
												"3": "1013.634",
												"4": "97.70729",
												"5": "1507.1991",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100003.66",
												"10": "199998.97"
											},
											{
												"0": "84fb1a25",
												"1": "84fead57",
												"2": "1",
												"3": "1006.1385",
												"4": "95.78221",
												"5": "1494.6886",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.18",
												"10": "199998.05"
											},
											{
												"0": "84fb1a26",
												"1": "84fead58",
												"2": "1",
												"3": "1010.8397",
												"4": "103.71661",
												"5": "1507.6437",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.17",
												"10": "199995.55"
											},
											{
												"0": "84fb1a27",
												"1": "84fead59",
												"2": "1",
												"3": "998.6513",
												"4": "117.7919",
												"5": "1493.1481",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.836",
												"10": "199997.2"
											},
											{
												"0": "84fb1a28",
												"1": "84fead5a",
												"2": "1",
												"3": "1003.5839",
												"4": "89.74833",
												"5": "1517.6816",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.29",
												"10": "199996.39"
											},
											{
												"0": "84fb1a29",
												"1": "84fead5b",
												"2": "1",
												"3": "1004.09863",
												"4": "112.19622",
												"5": "1514.0541",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.16",
												"10": "199998.38"
											},
											{
												"0": "84fb1a2a",
												"1": "84fead5c",
												"2": "1",
												"3": "1004.18",
												"4": "108.70166",
												"5": "1507.5836",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.484",
												"10": "199989.88"
											},
											{
												"0": "84fb1a2b",
												"1": "84fead5d",
												"2": "1",
												"3": "1010.1681",
												"4": "99.80735",
												"5": "1510.592",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.13",
												"10": "199992.36"
											},
											{
												"0": "84fb1a2c",
												"1": "84fead5e",
												"2": "1",
												"3": "1005.8142",
												"4": "117.56125",
												"5": "1513.3035",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.26",
												"10": "199999.06"
											},
											{
												"0": "84fb1a2d",
												"1": "84fead5f",
												"2": "0",
												"3": "1011.0446",
												"4": "98.039246",
												"5": "1512.4332",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100001.805",
												"10": "199996.6"
											},
											{
												"0": "84fb1a2e",
												"1": "84fead60",
												"2": "1",
												"3": "997.67957",
												"4": "78.32801",
												"5": "1503.335",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99990.3",
												"10": "199994.38"
											},
											{
												"0": "84fb1a2f",
												"1": "84fead61",
												"2": "1",
												"3": "1005.19806",
												"4": "103.17501",
												"5": "1514.5505",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.164",
												"10": "199993.39"
											},
											{
												"0": "84fb1a30",
												"1": "84fead62",
												"2": "1",
												"3": "1007.4803",
												"4": "113.16496",
												"5": "1508.3145",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.03",
												"10": "199995.47"
											},
											{
												"0": "84fb1a31",
												"1": "84fead63",
												"2": "0",
												"3": "1010.4151",
												"4": "86.721565",
												"5": "1505.0426",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.33",
												"10": "199994.5"
											},
											{
												"0": "84fb1a32",
												"1": "84fead64",
												"2": "0",
												"3": "1005.6089",
												"4": "101.966705",
												"5": "1517.2861",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.125",
												"10": "199997.39"
											},
											{
												"0": "84fb1a33",
												"1": "84fead65",
												"2": "0",
												"3": "1004.1967",
												"4": "110.36908",
												"5": "1508.076",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.02",
												"10": "199989.34"
											},
											{
												"0": "84fb1a34",
												"1": "84fead66",
												"2": "0",
												"3": "1010.1948",
												"4": "91.9648",
												"5": "1504.8917",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.13",
												"10": "200000.73"
											},
											{
												"0": "84fb1a35",
												"1": "84fead67",
												"2": "1",
												"3": "1002.3673",
												"4": "109.98277",
												"5": "1508.9827",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.43",
												"10": "199985.03"
											},
											{
												"0": "84fb1a36",
												"1": "84fead68",
												"2": "0",
												"3": "1000.518",
												"4": "94.13908",
												"5": "1507.9877",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.28",
												"10": "199991.0"
											},
											{
												"0": "84fb1a37",
												"1": "84fead69",
												"2": "1",
												"3": "1006.1206",
												"4": "112.05509",
												"5": "1498.5947",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.66",
												"10": "199993.55"
											},
											{
												"0": "84fb1a38",
												"1": "84fead6a",
												"2": "1",
												"3": "1016.9497",
												"4": "102.76056",
												"5": "1488.6742",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.12",
												"10": "199994.52"
											},
											{
												"0": "84fb1a39",
												"1": "84fead6b",
												"2": "0",
												"3": "1003.913",
												"4": "112.8901",
												"5": "1511.3185",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100006.04",
												"10": "199995.14"
											},
											{
												"0": "84fb1a3a",
												"1": "84fead6c",
												"2": "1",
												"3": "1006.011",
												"4": "107.76482",
												"5": "1515.3362",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99991.09",
												"10": "199995.75"
											},
											{
												"0": "84fb1a3b",
												"1": "84fead6d",
												"2": "0",
												"3": "1010.2704",
												"4": "99.52743",
												"5": "1513.3978",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.56",
												"10": "199996.78"
											},
											{
												"0": "84fb1a3c",
												"1": "84fead6e",
												"2": "0",
												"3": "999.401",
												"4": "103.13848",
												"5": "1503.8582",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.664",
												"10": "199997.88"
											},
											{
												"0": "84fb1a3d",
												"1": "84fead6f",
												"2": "0",
												"3": "1006.8864",
												"4": "118.47522",
												"5": "1507.2566",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100005.68",
												"10": "199998.7"
											},
											{
												"0": "84fb1a3e",
												"1": "84fead70",
												"2": "1",
												"3": "1003.5037",
												"4": "87.30777",
												"5": "1512.4465",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.89",
												"10": "199996.27"
											},
											{
												"0": "84fb1a3f",
												"1": "84fead71",
												"2": "1",
												"3": "1017.15814",
												"4": "89.257545",
												"5": "1507.692",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.97",
												"10": "199988.05"
											},
											{
												"0": "84fb1a40",
												"1": "84fead72",
												"2": "1",
												"3": "1003.38684",
												"4": "88.657074",
												"5": "1518.0256",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.3",
												"10": "199997.89"
											},
											{
												"0": "84fb1a41",
												"1": "84fead73",
												"2": "1",
												"3": "1003.73895",
												"4": "112.159",
												"5": "1499.1785",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.44",
												"10": "199992.48"
											},
											{
												"0": "84fb1a42",
												"1": "84fead74",
												"2": "0",
												"3": "1002.5523",
												"4": "106.02032",
												"5": "1508.7603",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.02",
												"10": "199992.9"
											},
											{
												"0": "84fb1a43",
												"1": "84fead75",
												"2": "1",
												"3": "1005.9684",
												"4": "96.82164",
												"5": "1506.2212",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100005.03",
												"10": "199994.47"
											},
											{
												"0": "84fb1a44",
												"1": "84fead76",
												"2": "1",
												"3": "1008.00116",
												"4": "116.40569",
												"5": "1497.4657",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.625",
												"10": "199997.86"
											},
											{
												"0": "84fb1a45",
												"1": "84fead77",
												"2": "0",
												"3": "1011.39716",
												"4": "109.22824",
												"5": "1508.7622",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100011.84",
												"10": "199992.95"
											},
											{
												"0": "84fb1a46",
												"1": "84fead78",
												"2": "1",
												"3": "1012.4975",
												"4": "89.584694",
												"5": "1518.0991",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.67",
												"10": "199994.25"
											},
											{
												"0": "84fb1a47",
												"1": "84fead79",
												"2": "0",
												"3": "995.0992",
												"4": "94.63907",
												"5": "1493.6394",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100002.03",
												"10": "199998.69"
											},
											{
												"0": "84fb1a48",
												"1": "84fead7a",
												"2": "1",
												"3": "1005.37164",
												"4": "101.850945",
												"5": "1518.9855",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100002.47",
												"10": "199998.31"
											},
											{
												"0": "84fb1a49",
												"1": "84fead7b",
												"2": "0",
												"3": "1005.55707",
												"4": "91.16962",
												"5": "1505.6425",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.26",
												"10": "200001.05"
											},
											{
												"0": "84fb1a4a",
												"1": "84fead7c",
												"2": "0",
												"3": "1007.8759",
												"4": "103.43846",
												"5": "1515.903",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100008.414",
												"10": "199999.64"
											},
											{
												"0": "84fb1a4b",
												"1": "84fead7d",
												"2": "1",
												"3": "1006.5065",
												"4": "106.46773",
												"5": "1498.1284",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.445",
												"10": "200001.25"
											},
											{
												"0": "84fb1a4c",
												"1": "84fead7e",
												"2": "1",
												"3": "1003.94037",
												"4": "107.56861",
												"5": "1492.585",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99995.38",
												"10": "199997.97"
											},
											{
												"0": "84fb1a4d",
												"1": "84fead7f",
												"2": "0",
												"3": "1000.1368",
												"4": "91.430115",
												"5": "1499.3639",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.75",
												"10": "199998.66"
											},
											{
												"0": "84fb1a4e",
												"1": "84fead80",
												"2": "1",
												"3": "1007.20905",
												"4": "107.15999",
												"5": "1504.5339",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.055",
												"10": "199997.84"
											},
											{
												"0": "84fb1a4f",
												"1": "84fead81",
												"2": "1",
												"3": "1007.82416",
												"4": "91.417854",
												"5": "1504.3296",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.21",
												"10": "199996.23"
											},
											{
												"0": "84fb1a50",
												"1": "84fead82",
												"2": "1",
												"3": "1010.4374",
												"4": "103.3362",
												"5": "1496.9489",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.7",
												"10": "199998.77"
											},
											{
												"0": "84fb1a51",
												"1": "84fead83",
												"2": "0",
												"3": "1015.03406",
												"4": "98.92881",
												"5": "1509.9506",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100011.74",
												"10": "199992.58"
											},
											{
												"0": "84fb1a52",
												"1": "84fead84",
												"2": "1",
												"3": "1015.77966",
												"4": "95.02295",
												"5": "1509.7031",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.09",
												"10": "199991.23"
											},
											{
												"0": "84fb1a53",
												"1": "84fead85",
												"2": "0",
												"3": "996.2306",
												"4": "93.98009",
												"5": "1516.3976",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.984",
												"10": "199990.11"
											},
											{
												"0": "84fb1a54",
												"1": "84fead86",
												"2": "0",
												"3": "1001.2098",
												"4": "116.39013",
												"5": "1499.7238",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.0",
												"10": "200000.6"
											},
											{
												"0": "84fb1a55",
												"1": "84fead87",
												"2": "1",
												"3": "1009.96545",
												"4": "105.975655",
												"5": "1494.3057",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.04",
												"10": "199994.84"
											},
											{
												"0": "84fb1a56",
												"1": "84fead88",
												"2": "0",
												"3": "1005.19763",
												"4": "110.08419",
												"5": "1511.3364",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.41",
												"10": "199996.56"
											},
											{
												"0": "84fb1a57",
												"1": "84fead89",
												"2": "0",
												"3": "1011.40704",
												"4": "101.42634",
												"5": "1517.0571",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.9",
												"10": "199999.05"
											},
											{
												"0": "84fb1a58",
												"1": "84fead8a",
												"2": "0",
												"3": "1008.72943",
												"4": "100.5503",
												"5": "1513.8706",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100000.99",
												"10": "200002.14"
											},
											{
												"0": "84fb1a59",
												"1": "84fead8b",
												"2": "0",
												"3": "1006.1248",
												"4": "91.03475",
												"5": "1503.798",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100013.73",
												"10": "199984.31"
											},
											{
												"0": "84fb1af6",
												"1": "84feae28",
												"2": "0",
												"3": "1007.0787",
												"4": "111.48535",
												"5": "1517.959",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.875",
												"10": "200001.12"
											},
											{
												"0": "84fb1af7",
												"1": "84feae29",
												"2": "1",
												"3": "1009.4339",
												"4": "106.39251",
												"5": "1513.2976",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99998.55",
												"10": "199996.06"
											},
											{
												"0": "84fb1af8",
												"1": "84feae2a",
												"2": "1",
												"3": "1005.6928",
												"4": "101.721855",
												"5": "1516.1598",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.92",
												"10": "199989.36"
											},
											{
												"0": "84fb1af9",
												"1": "84feae2b",
												"2": "0",
												"3": "1003.011",
												"4": "114.6634",
												"5": "1491.8448",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.164",
												"10": "199998.1"
											},
											{
												"0": "84fb1afa",
												"1": "84feae2c",
												"2": "1",
												"3": "1007.543",
												"4": "102.23392",
												"5": "1509.1223",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.445",
												"10": "199996.95"
											},
											{
												"0": "84fb1afb",
												"1": "84feae2d",
												"2": "1",
												"3": "1016.1998",
												"4": "86.27814",
												"5": "1524.0885",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.36",
												"10": "199994.7"
											},
											{
												"0": "84fb1afc",
												"1": "84feae2e",
												"2": "0",
												"3": "1009.51416",
												"4": "104.95165",
												"5": "1515.9758",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100005.3",
												"10": "199990.55"
											},
											{
												"0": "84fb1afd",
												"1": "84feae2f",
												"2": "1",
												"3": "1002.45734",
												"4": "112.4188",
												"5": "1498.1136",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99991.445",
												"10": "199995.25"
											},
											{
												"0": "84fb1afe",
												"1": "84feae30",
												"2": "1",
												"3": "997.71875",
												"4": "115.92616",
												"5": "1494.4098",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.61",
												"10": "199996.72"
											},
											{
												"0": "84fb1aff",
												"1": "84feae31",
												"2": "1",
												"3": "1013.82733",
												"4": "95.320145",
												"5": "1510.9202",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99986.664",
												"10": "199990.52"
											},
											{
												"0": "84fb1b00",
												"1": "84feae32",
												"2": "1",
												"3": "1012.6008",
												"4": "87.49356",
												"5": "1498.2389",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.805",
												"10": "200001.22"
											},
											{
												"0": "84fb1b01",
												"1": "84feae33",
												"2": "1",
												"3": "1012.8637",
												"4": "97.357704",
												"5": "1513.2339",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.875",
												"10": "199997.86"
											},
											{
												"0": "84fb1b02",
												"1": "84feae34",
												"2": "0",
												"3": "1011.503",
												"4": "77.744514",
												"5": "1515.3177",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100009.266",
												"10": "199992.64"
											},
											{
												"0": "84fb1b03",
												"1": "84feae35",
												"2": "0",
												"3": "997.4903",
												"4": "91.64379",
												"5": "1497.8304",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.92",
												"10": "199991.61"
											},
											{
												"0": "84fb1b04",
												"1": "84feae36",
												"2": "0",
												"3": "1011.3629",
												"4": "102.54189",
												"5": "1526.8307",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100001.65",
												"10": "200001.72"
											},
											{
												"0": "84fb1b05",
												"1": "84feae37",
												"2": "0",
												"3": "1000.42303",
												"4": "94.95601",
												"5": "1499.1029",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100004.805",
												"10": "200002.47"
											},
											{
												"0": "84fb1b06",
												"1": "84feae38",
												"2": "1",
												"3": "1008.23456",
												"4": "105.60243",
												"5": "1512.3713",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.26",
												"10": "199992.86"
											},
											{
												"0": "84fb1b07",
												"1": "84feae39",
												"2": "0",
												"3": "1015.00525",
												"4": "101.62708",
												"5": "1502.3032",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.13",
												"10": "199999.53"
											},
											{
												"0": "84fb1b08",
												"1": "84feae3a",
												"2": "1",
												"3": "1009.6394",
												"4": "102.952835",
												"5": "1502.2988",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99986.77",
												"10": "199998.22"
											},
											{
												"0": "84fb1b09",
												"1": "84feae3b",
												"2": "0",
												"3": "999.83325",
												"4": "96.38898",
												"5": "1513.3304",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.41",
												"10": "199998.12"
											},
											{
												"0": "84fb1b0a",
												"1": "84feae3c",
												"2": "1",
												"3": "1003.6966",
												"4": "104.778595",
												"5": "1497.065",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.51",
												"10": "199990.8"
											},
											{
												"0": "84fb1b0b",
												"1": "84feae3d",
												"2": "0",
												"3": "1008.28015",
												"4": "93.44363",
												"5": "1513.9194",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.86",
												"10": "199998.2"
											},
											{
												"0": "84fb1b0c",
												"1": "84feae3e",
												"2": "0",
												"3": "1015.76196",
												"4": "98.242455",
												"5": "1523.622",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.24",
												"10": "199990.83"
											},
											{
												"0": "84fb1b0d",
												"1": "84feae3f",
												"2": "0",
												"3": "1013.0766",
												"4": "86.74539",
												"5": "1512.9297",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100008.92",
												"10": "199995.03"
											},
											{
												"0": "84fb1b0e",
												"1": "84feae40",
												"2": "0",
												"3": "1006.20447",
												"4": "98.64908",
												"5": "1513.2812",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99999.34",
												"10": "200000.03"
											},
											{
												"0": "84fb1b0f",
												"1": "84feae41",
												"2": "1",
												"3": "1013.67065",
												"4": "89.08329",
												"5": "1517.5525",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.28",
												"10": "199994.2"
											},
											{
												"0": "84fb1b10",
												"1": "84feae42",
												"2": "1",
												"3": "1012.118",
												"4": "108.690254",
												"5": "1520.3109",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.76",
												"10": "199997.61"
											},
											{
												"0": "84fb1b11",
												"1": "84feae43",
												"2": "1",
												"3": "1002.01904",
												"4": "101.55871",
												"5": "1521.0496",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.805",
												"10": "199998.11"
											},
											{
												"0": "84fb1b12",
												"1": "84feae44",
												"2": "0",
												"3": "1011.99805",
												"4": "96.45981",
												"5": "1519.9235",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100007.71",
												"10": "199994.45"
											},
											{
												"0": "84fb1b13",
												"1": "84feae45",
												"2": "1",
												"3": "1008.5629",
												"4": "93.6966",
												"5": "1512.3276",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.08",
												"10": "199995.3"
											},
											{
												"0": "84fb1b14",
												"1": "84feae46",
												"2": "1",
												"3": "1004.7404",
												"4": "109.19475",
												"5": "1511.2085",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99987.77",
												"10": "199994.2"
											},
											{
												"0": "84fb1b15",
												"1": "84feae47",
												"2": "0",
												"3": "1002.4655",
												"4": "108.163795",
												"5": "1504.4558",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.984",
												"10": "200003.83"
											},
											{
												"0": "84fb1b16",
												"1": "84feae48",
												"2": "0",
												"3": "1017.752",
												"4": "80.36923",
												"5": "1504.1852",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99998.08",
												"10": "199999.28"
											},
											{
												"0": "84fb1b17",
												"1": "84feae49",
												"2": "0",
												"3": "1016.20154",
												"4": "91.16608",
												"5": "1513.524",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.34",
												"10": "199995.14"
											},
											{
												"0": "84fb1b18",
												"1": "84feae4a",
												"2": "0",
												"3": "1011.71045",
												"4": "98.69087",
												"5": "1497.6233",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.484",
												"10": "199991.84"
											},
											{
												"0": "84fb1b19",
												"1": "84feae4b",
												"2": "0",
												"3": "1001.76324",
												"4": "111.267685",
												"5": "1509.3234",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.24",
												"10": "199996.36"
											},
											{
												"0": "84fb1b1a",
												"1": "84feae4c",
												"2": "1",
												"3": "1007.66077",
												"4": "106.35519",
												"5": "1509.5526",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.08",
												"10": "199991.05"
											},
											{
												"0": "84fb1b1b",
												"1": "84feae4d",
												"2": "1",
												"3": "1008.5137",
												"4": "110.96013",
												"5": "1517.9329",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99991.18",
												"10": "199994.39"
											},
											{
												"0": "84fb1b1c",
												"1": "84feae4e",
												"2": "0",
												"3": "1009.53674",
												"4": "110.73452",
												"5": "1515.6578",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100007.586",
												"10": "199998.17"
											},
											{
												"0": "84fb1b1d",
												"1": "84feae4f",
												"2": "0",
												"3": "1004.2857",
												"4": "117.095695",
												"5": "1496.7009",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100013.68",
												"10": "199988.73"
											},
											{
												"0": "84fb1b1e",
												"1": "84feae50",
												"2": "0",
												"3": "1007.3269",
												"4": "113.059586",
												"5": "1511.3442",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.484",
												"10": "199989.33"
											},
											{
												"0": "84fb1b1f",
												"1": "84feae51",
												"2": "0",
												"3": "1009.0202",
												"4": "78.628044",
												"5": "1499.666",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.055",
												"10": "199987.69"
											},
											{
												"0": "84fb1b20",
												"1": "84feae52",
												"2": "1",
												"3": "1015.449",
												"4": "94.84519",
												"5": "1512.811",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.91",
												"10": "199994.58"
											},
											{
												"0": "84fb1b21",
												"1": "84feae53",
												"2": "0",
												"3": "1007.73334",
												"4": "90.22268",
												"5": "1497.5604",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99992.05",
												"10": "200002.4"
											},
											{
												"0": "84fb1b22",
												"1": "84feae54",
												"2": "0",
												"3": "1006.5908",
												"4": "105.51811",
												"5": "1506.8256",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.695",
												"10": "199992.55"
											},
											{
												"0": "84fb1b23",
												"1": "84feae55",
												"2": "0",
												"3": "1002.1172",
												"4": "96.41384",
												"5": "1499.4281",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.76",
												"10": "199994.34"
											},
											{
												"0": "84fb1b24",
												"1": "84feae56",
												"2": "1",
												"3": "1006.3122",
												"4": "101.74253",
												"5": "1518.6844",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.31",
												"10": "199989.42"
											},
											{
												"0": "84fb1b25",
												"1": "84feae57",
												"2": "1",
												"3": "1002.2229",
												"4": "101.702095",
												"5": "1507.5132",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.22",
												"10": "199992.1"
											},
											{
												"0": "84fb1b26",
												"1": "84feae58",
												"2": "1",
												"3": "1003.47565",
												"4": "98.358215",
												"5": "1500.4185",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.38",
												"10": "199993.2"
											},
											{
												"0": "84fb1b27",
												"1": "84feae59",
												"2": "1",
												"3": "1010.0995",
												"4": "108.43458",
												"5": "1516.204",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.8",
												"10": "199996.14"
											},
											{
												"0": "84fb1b28",
												"1": "84feae5a",
												"2": "0",
												"3": "1009.4231",
												"4": "95.3662",
												"5": "1512.2164",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.73",
												"10": "199999.64"
											},
											{
												"0": "84fb1b29",
												"1": "84feae5b",
												"2": "0",
												"3": "1004.6847",
												"4": "114.76963",
												"5": "1504.659",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99993.53",
												"10": "200002.25"
											},
											{
												"0": "84fb1b2a",
												"1": "84feae5c",
												"2": "0",
												"3": "1006.30304",
												"4": "105.594734",
												"5": "1508.9786",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100008.77",
												"10": "199997.5"
											},
											{
												"0": "84fb1b2b",
												"1": "84feae5d",
												"2": "0",
												"3": "1004.03357",
												"4": "116.66891",
												"5": "1510.3938",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.07",
												"10": "199992.27"
											},
											{
												"0": "84fb1b2c",
												"1": "84feae5e",
												"2": "0",
												"3": "1004.6447",
												"4": "74.460365",
												"5": "1510.2463",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.24",
												"10": "199993.94"
											},
											{
												"0": "84fb1b2d",
												"1": "84feae5f",
												"2": "0",
												"3": "1002.0744",
												"4": "102.06787",
												"5": "1509.7588",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.42",
												"10": "199993.5"
											},
											{
												"0": "84fb1b2e",
												"1": "84feae60",
												"2": "0",
												"3": "1007.6546",
												"4": "108.70958",
												"5": "1505.5913",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.36",
												"10": "200000.6"
											},
											{
												"0": "84fb1b2f",
												"1": "84feae61",
												"2": "1",
												"3": "1004.5258",
												"4": "116.17715",
												"5": "1511.0663",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.805",
												"10": "199993.83"
											},
											{
												"0": "84fb1b30",
												"1": "84feae62",
												"2": "0",
												"3": "1000.29065",
												"4": "107.82324",
												"5": "1498.1471",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.72",
												"10": "199995.73"
											},
											{
												"0": "84fb1b31",
												"1": "84feae63",
												"2": "0",
												"3": "1003.94434",
												"4": "95.78979",
												"5": "1515.7448",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.03",
												"10": "199989.19"
											},
											{
												"0": "84fb1b32",
												"1": "84feae64",
												"2": "1",
												"3": "1012.4004",
												"4": "90.81899",
												"5": "1510.4231",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.8",
												"10": "199996.44"
											},
											{
												"0": "84fb1b33",
												"1": "84feae65",
												"2": "1",
												"3": "1002.15015",
												"4": "112.30585",
												"5": "1519.1605",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100003.26",
												"10": "199999.11"
											},
											{
												"0": "84fb1b34",
												"1": "84feae66",
												"2": "1",
												"3": "1015.36346",
												"4": "94.06796",
												"5": "1507.4874",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.19",
												"10": "199996.78"
											},
											{
												"0": "84fb1b35",
												"1": "84feae67",
												"2": "0",
												"3": "1004.5809",
												"4": "104.19857",
												"5": "1492.8824",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.61",
												"10": "199995.11"
											},
											{
												"0": "84fb1b36",
												"1": "84feae68",
												"2": "0",
												"3": "1001.097",
												"4": "94.59343",
												"5": "1500.0166",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.805",
												"10": "199994.06"
											},
											{
												"0": "84fb1b37",
												"1": "84feae69",
												"2": "0",
												"3": "1003.1807",
												"4": "86.40105",
												"5": "1503.4509",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.86",
												"10": "199997.06"
											},
											{
												"0": "84fb1b38",
												"1": "84feae6a",
												"2": "1",
												"3": "1007.19464",
												"4": "90.64187",
												"5": "1505.0812",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.586",
												"10": "199998.2"
											},
											{
												"0": "84fb1b39",
												"1": "84feae6b",
												"2": "1",
												"3": "1006.2117",
												"4": "98.57247",
												"5": "1505.2933",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.47",
												"10": "199988.66"
											},
											{
												"0": "84fb1b3a",
												"1": "84feae6c",
												"2": "0",
												"3": "1009.5484",
												"4": "103.39592",
												"5": "1503.1478",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.375",
												"10": "199996.19"
											},
											{
												"0": "84fb1b3b",
												"1": "84feae6d",
												"2": "1",
												"3": "1010.92456",
												"4": "84.06859",
												"5": "1495.5547",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.52",
												"10": "200001.03"
											},
											{
												"0": "84fb1b3c",
												"1": "84feae6e",
												"2": "0",
												"3": "1005.7341",
												"4": "110.73023",
												"5": "1507.516",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.19",
												"10": "199996.36"
											},
											{
												"0": "84fb1b3d",
												"1": "84feae6f",
												"2": "1",
												"3": "1011.69507",
												"4": "99.94811",
												"5": "1500.0581",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.805",
												"10": "199998.12"
											},
											{
												"0": "84fb1b3e",
												"1": "84feae70",
												"2": "1",
												"3": "1013.6765",
												"4": "100.681335",
												"5": "1516.1223",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99996.49",
												"10": "199989.77"
											},
											{
												"0": "84fb1b3f",
												"1": "84feae71",
												"2": "1",
												"3": "1012.9978",
												"4": "96.21744",
												"5": "1507.1282",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.42",
												"10": "199996.31"
											},
											{
												"0": "84fb1b40",
												"1": "84feae72",
												"2": "0",
												"3": "1003.5422",
												"4": "114.17504",
												"5": "1502.7919",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.125",
												"10": "199996.45"
											},
											{
												"0": "84fb1b41",
												"1": "84feae73",
												"2": "0",
												"3": "1008.56885",
												"4": "112.66276",
												"5": "1497.7303",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.34",
												"10": "199999.16"
											},
											{
												"0": "84fb1b42",
												"1": "84feae74",
												"2": "0",
												"3": "995.84607",
												"4": "99.060036",
												"5": "1480.7059",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.63",
												"10": "199989.48"
											},
											{
												"0": "84fb1b43",
												"1": "84feae75",
												"2": "0",
												"3": "1024.9995",
												"4": "78.518234",
												"5": "1509.3135",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100008.06",
												"10": "199995.23"
											},
											{
												"0": "84fb1b44",
												"1": "84feae76",
												"2": "1",
												"3": "1011.2655",
												"4": "82.89999",
												"5": "1510.003",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99993.45",
												"10": "199993.53"
											},
											{
												"0": "84fb1b45",
												"1": "84feae77",
												"2": "0",
												"3": "1010.553",
												"4": "101.75504",
												"5": "1507.7047",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.86",
												"10": "199993.25"
											},
											{
												"0": "84fb1b46",
												"1": "84feae78",
												"2": "0",
												"3": "1004.70844",
												"4": "115.84953",
												"5": "1506.0432",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.15",
												"10": "200001.25"
											},
											{
												"0": "84fb1b47",
												"1": "84feae79",
												"2": "1",
												"3": "1005.7277",
												"4": "96.22443",
												"5": "1512.6123",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99993.9",
												"10": "199990.98"
											},
											{
												"0": "84fb1b48",
												"1": "84feae7a",
												"2": "0",
												"3": "1007.6659",
												"4": "109.73214",
												"5": "1507.0504",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.586",
												"10": "200001.89"
											},
											{
												"0": "84fb1b49",
												"1": "84feae7b",
												"2": "1",
												"3": "1003.71204",
												"4": "115.6218",
												"5": "1505.9529",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.83",
												"10": "199999.9"
											},
											{
												"0": "84fb1b4a",
												"1": "84feae7c",
												"2": "1",
												"3": "1005.7633",
												"4": "87.16129",
												"5": "1498.9067",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.95",
												"10": "199992.62"
											},
											{
												"0": "84fb1b4b",
												"1": "84feae7d",
												"2": "0",
												"3": "1006.5007",
												"4": "113.23593",
												"5": "1519.2065",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.25",
												"10": "199995.3"
											},
											{
												"0": "84fb1b4c",
												"1": "84feae7e",
												"2": "1",
												"3": "1007.95624",
												"4": "97.11809",
												"5": "1521.2372",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100001.12",
												"10": "199995.44"
											},
											{
												"0": "84fb1b4d",
												"1": "84feae7f",
												"2": "1",
												"3": "1004.4098",
												"4": "78.92971",
												"5": "1502.707",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.78",
												"10": "199994.48"
											},
											{
												"0": "84fb1b4e",
												"1": "84feae80",
												"2": "1",
												"3": "1008.19916",
												"4": "90.75572",
												"5": "1501.2273",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.05",
												"10": "199996.17"
											},
											{
												"0": "84fb1b4f",
												"1": "84feae81",
												"2": "1",
												"3": "1003.5456",
												"4": "107.72902",
												"5": "1499.5018",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99988.1",
												"10": "199987.95"
											},
											{
												"0": "84fb1b50",
												"1": "84feae82",
												"2": "1",
												"3": "1006.42596",
												"4": "88.47078",
												"5": "1494.3927",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99996.53",
												"10": "199992.48"
											},
											{
												"0": "84fb1b51",
												"1": "84feae83",
												"2": "0",
												"3": "999.46985",
												"4": "119.781685",
												"5": "1510.7604",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100006.57",
												"10": "199991.45"
											},
											{
												"0": "84fb1b52",
												"1": "84feae84",
												"2": "1",
												"3": "1001.08594",
												"4": "81.85146",
												"5": "1494.9127",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.11",
												"10": "200002.4"
											},
											{
												"0": "84fb1b53",
												"1": "84feae85",
												"2": "1",
												"3": "1005.2557",
												"4": "121.724236",
												"5": "1496.1776",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.625",
												"10": "199982.27"
											},
											{
												"0": "84fb1b54",
												"1": "84feae86",
												"2": "0",
												"3": "992.0455",
												"4": "99.55184",
												"5": "1502.3743",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100003.06",
												"10": "199995.39"
											},
											{
												"0": "84fb1b55",
												"1": "84feae87",
												"2": "1",
												"3": "1014.2372",
												"4": "87.13159",
												"5": "1506.107",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99998.96",
												"10": "199988.64"
											},
											{
												"0": "84fb1b56",
												"1": "84feae88",
												"2": "1",
												"3": "1009.0832",
												"4": "83.69229",
												"5": "1499.5433",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.57",
												"10": "199997.61"
											},
											{
												"0": "84fb1b57",
												"1": "84feae89",
												"2": "1",
												"3": "1008.90466",
												"4": "113.20077",
												"5": "1510.1296",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99992.44",
												"10": "199997.55"
											},
											{
												"0": "84fb1b58",
												"1": "84feae8a",
												"2": "1",
												"3": "998.9522",
												"4": "85.35002",
												"5": "1486.8173",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.56",
												"10": "200003.53"
											},
											{
												"0": "84fb1b59",
												"1": "84feae8b",
												"2": "0",
												"3": "1009.846",
												"4": "106.266594",
												"5": "1506.8168",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.96",
												"10": "200001.12"
											},
											{
												"0": "84fb1b5a",
												"1": "84feae8c",
												"2": "0",
												"3": "1009.0354",
												"4": "99.62201",
												"5": "1510.7711",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.07",
												"10": "199992.42"
											},
											{
												"0": "84fb1b5b",
												"1": "84feae8d",
												"2": "1",
												"3": "1001.58765",
												"4": "109.08821",
												"5": "1508.4799",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.68",
												"10": "199991.38"
											},
											{
												"0": "84fb1b5c",
												"1": "84feae8e",
												"2": "1",
												"3": "998.55426",
												"4": "99.45289",
												"5": "1513.6931",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.31",
												"10": "199991.88"
											},
											{
												"0": "84fb1b5d",
												"1": "84feae8f",
												"2": "1",
												"3": "1011.80676",
												"4": "101.01647",
												"5": "1503.0525",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.87",
												"10": "199993.11"
											},
											{
												"0": "84fb1b5e",
												"1": "84feae90",
												"2": "0",
												"3": "1000.79626",
												"4": "113.349205",
												"5": "1503.1523",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.16",
												"10": "199998.23"
											},
											{
												"0": "84fb1b5f",
												"1": "84feae91",
												"2": "1",
												"3": "1008.64374",
												"4": "78.97359",
												"5": "1509.9802",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.35",
												"10": "199985.38"
											},
											{
												"0": "84fb1b60",
												"1": "84feae92",
												"2": "1",
												"3": "1013.784",
												"4": "95.3254",
												"5": "1513.994",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.04",
												"10": "199991.47"
											},
											{
												"0": "84fb1b61",
												"1": "84feae93",
												"2": "0",
												"3": "1010.4134",
												"4": "89.65314",
												"5": "1516.7716",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.75",
												"10": "199999.11"
											},
											{
												"0": "84fb1b62",
												"1": "84feae94",
												"2": "0",
												"3": "1009.1714",
												"4": "101.60397",
												"5": "1516.0593",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100001.195",
												"10": "200002.61"
											},
											{
												"0": "84fb1b63",
												"1": "84feae95",
												"2": "1",
												"3": "1014.556",
												"4": "75.68858",
												"5": "1500.9152",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.4",
												"10": "199988.12"
											},
											{
												"0": "84fb1b64",
												"1": "84feae96",
												"2": "1",
												"3": "1006.5723",
												"4": "104.6751",
												"5": "1502.8553",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99990.78",
												"10": "199992.03"
											},
											{
												"0": "84fb1b65",
												"1": "84feae97",
												"2": "1",
												"3": "1017.27094",
												"4": "87.03626",
												"5": "1500.5674",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.62",
												"10": "199998.12"
											},
											{
												"0": "84fb1b66",
												"1": "84feae98",
												"2": "0",
												"3": "996.59155",
												"4": "113.13326",
												"5": "1508.743",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.84",
												"10": "199993.38"
											},
											{
												"0": "84fb1b67",
												"1": "84feae99",
												"2": "1",
												"3": "1019.746",
												"4": "89.23829",
												"5": "1509.9016",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.41",
												"10": "199993.8"
											},
											{
												"0": "84fb1b68",
												"1": "84feae9a",
												"2": "0",
												"3": "1006.425",
												"4": "107.76772",
												"5": "1508.9785",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100006.12",
												"10": "200000.16"
											},
											{
												"0": "84fb1b69",
												"1": "84feae9b",
												"2": "1",
												"3": "1008.0015",
												"4": "101.89518",
												"5": "1509.4485",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.836",
												"10": "199987.94"
											},
											{
												"0": "84fb1b6a",
												"1": "84feae9c",
												"2": "1",
												"3": "1002.9895",
												"4": "103.52986",
												"5": "1508.9957",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99988.914",
												"10": "199993.95"
											},
											{
												"0": "84fb1b6b",
												"1": "84feae9d",
												"2": "1",
												"3": "996.2241",
												"4": "97.76556",
												"5": "1503.9855",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.734",
												"10": "199992.3"
											},
											{
												"0": "84fb1b6c",
												"1": "84feae9e",
												"2": "1",
												"3": "1006.64197",
												"4": "116.70298",
												"5": "1500.4926",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100003.914",
												"10": "200003.3"
											},
											{
												"0": "84fb1b6d",
												"1": "84feae9f",
												"2": "1",
												"3": "1001.13116",
												"4": "116.155014",
												"5": "1498.2963",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.5",
												"10": "199994.27"
											},
											{
												"0": "84fb1b6e",
												"1": "84feaea0",
												"2": "0",
												"3": "1019.85443",
												"4": "85.69951",
												"5": "1516.2727",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100001.266",
												"10": "199999.75"
											},
											{
												"0": "84fb1b6f",
												"1": "84feaea1",
												"2": "0",
												"3": "1012.1294",
												"4": "99.08188",
												"5": "1518.1207",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100011.54",
												"10": "199988.44"
											},
											{
												"0": "84fb1b70",
												"1": "84feaea2",
												"2": "1",
												"3": "1005.9977",
												"4": "114.02679",
												"5": "1508.8807",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.34",
												"10": "199998.34"
											},
											{
												"0": "84fb1b71",
												"1": "84feaea3",
												"2": "0",
												"3": "1004.9816",
												"4": "107.69037",
												"5": "1503.0103",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100008.28",
												"10": "200004.47"
											},
											{
												"0": "84fb1b72",
												"1": "84feaea4",
												"2": "0",
												"3": "1010.4532",
												"4": "108.66355",
												"5": "1506.372",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100004.62",
												"10": "199993.9"
											},
											{
												"0": "84fb1b73",
												"1": "84feaea5",
												"2": "0",
												"3": "1012.47235",
												"4": "104.5949",
												"5": "1501.0466",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.57",
												"10": "200000.67"
											},
											{
												"0": "84fb1b74",
												"1": "84feaea6",
												"2": "0",
												"3": "1004.69836",
												"4": "87.99623",
												"5": "1501.8446",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.63",
												"10": "199998.78"
											},
											{
												"0": "84fb1b75",
												"1": "84feaea7",
												"2": "0",
												"3": "1010.0725",
												"4": "98.4604",
												"5": "1509.9845",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.12",
												"10": "199993.2"
											},
											{
												"0": "84fb1b76",
												"1": "84feaea8",
												"2": "0",
												"3": "1018.58777",
												"4": "92.68065",
												"5": "1508.6251",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.53",
												"10": "199990.14"
											},
											{
												"0": "84fb1b77",
												"1": "84feaea9",
												"2": "1",
												"3": "1015.24524",
												"4": "92.92228",
												"5": "1497.3706",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.21",
												"10": "199994.44"
											},
											{
												"0": "84fb1b78",
												"1": "84feaeaa",
												"2": "1",
												"3": "1007.14764",
												"4": "107.234474",
												"5": "1501.9735",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100002.375",
												"10": "199997.05"
											},
											{
												"0": "84fb1b79",
												"1": "84feaeab",
												"2": "0",
												"3": "1020.437",
												"4": "89.66064",
												"5": "1508.9531",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99988.98",
												"10": "200004.84"
											},
											{
												"0": "84fb1b7a",
												"1": "84feaeac",
												"2": "0",
												"3": "1010.2832",
												"4": "123.17927",
												"5": "1514.7606",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.945",
												"10": "199991.33"
											},
											{
												"0": "84fb1b7b",
												"1": "84feaead",
												"2": "0",
												"3": "1011.9067",
												"4": "89.14604",
												"5": "1501.1093",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100007.0",
												"10": "199997.34"
											},
											{
												"0": "84fb1b7c",
												"1": "84feaeae",
												"2": "1",
												"3": "1008.25366",
												"4": "100.895996",
												"5": "1509.4974",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99989.51",
												"10": "199991.83"
											},
											{
												"0": "84fb1b7d",
												"1": "84feaeaf",
												"2": "1",
												"3": "1005.44104",
												"4": "110.4225",
												"5": "1492.5176",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.51",
												"10": "199994.97"
											},
											{
												"0": "84fb1b7e",
												"1": "84feaeb0",
												"2": "0",
												"3": "1012.18536",
												"4": "100.33388",
												"5": "1507.5393",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.93",
												"10": "199992.8"
											},
											{
												"0": "84fb1b7f",
												"1": "84feaeb1",
												"2": "1",
												"3": "995.2581",
												"4": "109.1985",
												"5": "1508.6937",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.21",
												"10": "199994.52"
											},
											{
												"0": "84fb1b80",
												"1": "84feaeb2",
												"2": "0",
												"3": "1010.33264",
												"4": "113.10713",
												"5": "1509.2782",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.54",
												"10": "199997.28"
											},
											{
												"0": "84fb1b81",
												"1": "84feaeb3",
												"2": "1",
												"3": "1006.15857",
												"4": "116.84127",
												"5": "1498.556",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.67",
												"10": "199999.27"
											},
											{
												"0": "84fb1b82",
												"1": "84feaeb4",
												"2": "1",
												"3": "1000.6359",
												"4": "108.06894",
												"5": "1509.7924",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.88",
												"10": "199990.75"
											},
											{
												"0": "84fb1b83",
												"1": "84feaeb5",
												"2": "0",
												"3": "1007.4619",
												"4": "103.85459",
												"5": "1509.3983",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.83",
												"10": "199987.11"
											},
											{
												"0": "84fb1b84",
												"1": "84feaeb6",
												"2": "1",
												"3": "1012.6944",
												"4": "93.23293",
												"5": "1504.4735",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.125",
												"10": "199997.88"
											},
											{
												"0": "84fb1b85",
												"1": "84feaeb7",
												"2": "1",
												"3": "1005.2739",
												"4": "108.53482",
												"5": "1505.5381",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.57",
												"10": "199995.8"
											},
											{
												"0": "84fb1b86",
												"1": "84feaeb8",
												"2": "1",
												"3": "1003.54193",
												"4": "89.75219",
												"5": "1517.851",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.61",
												"10": "199993.92"
											},
											{
												"0": "84fb1b87",
												"1": "84feaeb9",
												"2": "1",
												"3": "1008.0858",
												"4": "110.74805",
												"5": "1500.5449",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.91",
												"10": "199998.4"
											},
											{
												"0": "84fb1b88",
												"1": "84feaeba",
												"2": "1",
												"3": "1012.8945",
												"4": "87.239815",
												"5": "1509.6974",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.79",
												"10": "199997.14"
											},
											{
												"0": "84fb1b89",
												"1": "84feaebb",
												"2": "0",
												"3": "1011.7129",
												"4": "104.3345",
												"5": "1504.3546",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.09",
												"10": "199996.67"
											},
											{
												"0": "84fb1b8a",
												"1": "84feaebc",
												"2": "0",
												"3": "1010.018",
												"4": "84.21783",
												"5": "1512.489",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.516",
												"10": "199992.16"
											},
											{
												"0": "84fb1b8b",
												"1": "84feaebd",
												"2": "0",
												"3": "1023.83417",
												"4": "84.28737",
												"5": "1507.6201",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.81",
												"10": "199999.44"
											},
											{
												"0": "84fb1b8c",
												"1": "84feaebe",
												"2": "0",
												"3": "1005.20966",
												"4": "83.47849",
												"5": "1507.1007",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.38",
												"10": "199990.31"
											},
											{
												"0": "84fb1b8d",
												"1": "84feaebf",
												"2": "1",
												"3": "1011.4616",
												"4": "107.454666",
												"5": "1514.2896",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.586",
												"10": "199995.53"
											},
											{
												"0": "84fb1b8e",
												"1": "84feaec0",
												"2": "0",
												"3": "1009.56396",
												"4": "80.53221",
												"5": "1512.2898",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100012.484",
												"10": "199987.45"
											},
											{
												"0": "84fb1b8f",
												"1": "84feaec1",
												"2": "0",
												"3": "1015.5239",
												"4": "96.41026",
												"5": "1504.4373",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.98",
												"10": "200003.81"
											},
											{
												"0": "84fb1b90",
												"1": "84feaec2",
												"2": "1",
												"3": "1011.41895",
												"4": "106.87145",
												"5": "1511.1716",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.62",
												"10": "199996.25"
											},
											{
												"0": "84fb1b91",
												"1": "84feaec3",
												"2": "1",
												"3": "1014.885",
												"4": "82.17657",
												"5": "1495.9813",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99992.43",
												"10": "199996.61"
											},
											{
												"0": "84fbc7f0",
												"1": "84ff5ad2",
												"2": "0",
												"3": "1008.2675",
												"4": "105.448586",
												"5": "1513.4286",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.055",
												"10": "199992.92"
											},
											{
												"0": "84fbc7f1",
												"1": "84ff5ad3",
												"2": "0",
												"3": "1011.1157",
												"4": "82.881454",
												"5": "1502.2583",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100003.68",
												"10": "199997.44"
											},
											{
												"0": "84fbc7f2",
												"1": "84ff5ad4",
												"2": "0",
												"3": "1002.5529",
												"4": "90.71523",
												"5": "1507.8937",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100003.92",
												"10": "200002.4"
											},
											{
												"0": "84fbc7f3",
												"1": "84ff5ad5",
												"2": "0",
												"3": "1008.8458",
												"4": "111.93142",
												"5": "1504.2764",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100001.13",
												"10": "199992.47"
											},
											{
												"0": "84fbc7f4",
												"1": "84ff5ad6",
												"2": "0",
												"3": "1011.97797",
												"4": "94.66366",
												"5": "1505.5099",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.54",
												"10": "199999.78"
											},
											{
												"0": "84fbc7f5",
												"1": "84ff5ad7",
												"2": "0",
												"3": "1008.26215",
												"4": "103.95915",
												"5": "1516.4479",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.03",
												"10": "199996.2"
											},
											{
												"0": "84fbc7f6",
												"1": "84ff5ad8",
												"2": "1",
												"3": "1000.1743",
												"4": "89.869125",
												"5": "1496.3738",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.66",
												"10": "199993.55"
											},
											{
												"0": "84fbc7f7",
												"1": "84ff5ad9",
												"2": "1",
												"3": "1007.58765",
												"4": "98.96454",
												"5": "1531.9188",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.03",
												"10": "199997.33"
											},
											{
												"0": "84fbc7f8",
												"1": "84ff5ada",
												"2": "1",
												"3": "1006.2232",
												"4": "79.40936",
												"5": "1507.0216",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.02",
												"10": "199995.1"
											},
											{
												"0": "84fbc7f9",
												"1": "84ff5adb",
												"2": "0",
												"3": "1009.1986",
												"4": "106.6802",
												"5": "1511.9218",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.91",
												"10": "200004.61"
											},
											{
												"0": "84fbc7fa",
												"1": "84ff5adc",
												"2": "1",
												"3": "1012.01794",
												"4": "100.15847",
												"5": "1499.7395",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.61",
												"10": "199991.34"
											},
											{
												"0": "84fbc7fb",
												"1": "84ff5add",
												"2": "0",
												"3": "1011.2714",
												"4": "94.07996",
												"5": "1509.8857",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.516",
												"10": "199990.47"
											},
											{
												"0": "84fbc7fc",
												"1": "84ff5ade",
												"2": "1",
												"3": "1002.3417",
												"4": "105.894005",
												"5": "1510.1337",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.13",
												"10": "199996.56"
											},
											{
												"0": "84fbc7fd",
												"1": "84ff5adf",
												"2": "1",
												"3": "1024.4606",
												"4": "94.16212",
												"5": "1519.255",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.06",
												"10": "199995.38"
											},
											{
												"0": "84fbc7fe",
												"1": "84ff5ae0",
												"2": "0",
												"3": "1002.53265",
												"4": "95.45643",
												"5": "1497.491",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.44",
												"10": "199991.47"
											},
											{
												"0": "84fbc7ff",
												"1": "84ff5ae1",
												"2": "1",
												"3": "1013.4993",
												"4": "97.72537",
												"5": "1497.2756",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.11",
												"10": "199996.78"
											},
											{
												"0": "84fbc800",
												"1": "84ff5ae2",
												"2": "1",
												"3": "1015.9321",
												"4": "93.79897",
												"5": "1510.5634",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.21",
												"10": "199998.19"
											},
											{
												"0": "84fbc801",
												"1": "84ff5ae3",
												"2": "1",
												"3": "1011.79645",
												"4": "110.35558",
												"5": "1512.1432",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.15",
												"10": "199993.52"
											},
											{
												"0": "84fbc802",
												"1": "84ff5ae4",
												"2": "1",
												"3": "1006.79407",
												"4": "83.073074",
												"5": "1507.4681",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.22",
												"10": "199992.23"
											},
											{
												"0": "84fbc803",
												"1": "84ff5ae5",
												"2": "0",
												"3": "1011.70917",
												"4": "80.440346",
												"5": "1502.4202",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.555",
												"10": "199995.2"
											},
											{
												"0": "84fbc804",
												"1": "84ff5ae6",
												"2": "0",
												"3": "1003.3152",
												"4": "98.362564",
												"5": "1500.7745",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100018.37",
												"10": "199987.84"
											},
											{
												"0": "84fbc805",
												"1": "84ff5ae7",
												"2": "1",
												"3": "1007.78864",
												"4": "108.91866",
												"5": "1494.6176",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.66",
												"10": "200001.05"
											},
											{
												"0": "84fbc806",
												"1": "84ff5ae8",
												"2": "0",
												"3": "1011.37164",
												"4": "110.18765",
												"5": "1503.4329",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.45",
												"10": "199995.34"
											},
											{
												"0": "84fbc807",
												"1": "84ff5ae9",
												"2": "0",
												"3": "1005.97675",
												"4": "82.33186",
												"5": "1516.0347",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.83",
												"10": "199997.42"
											},
											{
												"0": "84fbc808",
												"1": "84ff5aea",
												"2": "0",
												"3": "1009.4522",
												"4": "99.1329",
												"5": "1501.9977",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100011.79",
												"10": "199988.67"
											},
											{
												"0": "84fbc809",
												"1": "84ff5aeb",
												"2": "0",
												"3": "1001.62396",
												"4": "100.195305",
												"5": "1517.3419",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100006.414",
												"10": "199993.03"
											},
											{
												"0": "84fbc80a",
												"1": "84ff5aec",
												"2": "0",
												"3": "1015.87006",
												"4": "95.16246",
												"5": "1520.641",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.25",
												"10": "199994.55"
											},
											{
												"0": "84fbc80b",
												"1": "84ff5aed",
												"2": "1",
												"3": "1016.68365",
												"4": "91.441315",
												"5": "1514.9889",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.47",
												"10": "199997.06"
											},
											{
												"0": "84fbc80c",
												"1": "84ff5aee",
												"2": "0",
												"3": "1010.81354",
												"4": "101.25688",
												"5": "1525.5437",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.57",
												"10": "199996.25"
											},
											{
												"0": "84fbc80d",
												"1": "84ff5aef",
												"2": "0",
												"3": "1013.5749",
												"4": "101.19949",
												"5": "1510.9961",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.45",
												"10": "199996.34"
											},
											{
												"0": "84fbc80e",
												"1": "84ff5af0",
												"2": "1",
												"3": "1008.68835",
												"4": "93.05173",
												"5": "1514.39",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.59",
												"10": "200000.48"
											},
											{
												"0": "84fbc80f",
												"1": "84ff5af1",
												"2": "1",
												"3": "1006.18524",
												"4": "113.87631",
												"5": "1505.7297",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.87",
												"10": "199992.42"
											},
											{
												"0": "84fbc810",
												"1": "84ff5af2",
												"2": "0",
												"3": "1006.9686",
												"4": "104.64862",
												"5": "1502.498",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.234",
												"10": "199996.7"
											},
											{
												"0": "84fbc811",
												"1": "84ff5af3",
												"2": "1",
												"3": "1009.4824",
												"4": "104.34118",
												"5": "1510.3099",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.89",
												"10": "199988.84"
											},
											{
												"0": "84fbc812",
												"1": "84ff5af4",
												"2": "1",
												"3": "995.0281",
												"4": "117.20728",
												"5": "1499.4424",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.336",
												"10": "199994.0"
											},
											{
												"0": "84fbc813",
												"1": "84ff5af5",
												"2": "1",
												"3": "1010.8536",
												"4": "101.568794",
												"5": "1505.2059",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.71",
												"10": "199992.16"
											},
											{
												"0": "84fbc814",
												"1": "84ff5af6",
												"2": "1",
												"3": "1004.24963",
												"4": "117.790436",
												"5": "1504.4579",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.39",
												"10": "200000.53"
											},
											{
												"0": "84fbc815",
												"1": "84ff5af7",
												"2": "1",
												"3": "1009.0903",
												"4": "96.59383",
												"5": "1499.4949",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.195",
												"10": "199995.48"
											},
											{
												"0": "84fbc816",
												"1": "84ff5af8",
												"2": "1",
												"3": "1011.4407",
												"4": "87.27638",
												"5": "1513.2595",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.44",
												"10": "199999.56"
											},
											{
												"0": "84fbc817",
												"1": "84ff5af9",
												"2": "1",
												"3": "1005.3977",
												"4": "98.32945",
												"5": "1507.9437",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.234",
												"10": "199992.14"
											},
											{
												"0": "84fbc818",
												"1": "84ff5afa",
												"2": "0",
												"3": "1008.5588",
												"4": "105.421555",
												"5": "1508.5509",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.75",
												"10": "200003.92"
											},
											{
												"0": "84fbc819",
												"1": "84ff5afb",
												"2": "1",
												"3": "1012.8198",
												"4": "85.9768",
												"5": "1504.9242",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.21",
												"10": "199995.31"
											},
											{
												"0": "84fbc81a",
												"1": "84ff5afc",
												"2": "0",
												"3": "1009.7668",
												"4": "90.44022",
												"5": "1506.849",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.445",
												"10": "199994.45"
											},
											{
												"0": "84fbc81b",
												"1": "84ff5afd",
												"2": "0",
												"3": "1003.714",
												"4": "113.09672",
												"5": "1506.052",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.53",
												"10": "199994.11"
											},
											{
												"0": "84fbc81c",
												"1": "84ff5afe",
												"2": "1",
												"3": "1007.4974",
												"4": "106.78394",
												"5": "1509.9033",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.61",
												"10": "199996.44"
											},
											{
												"0": "84fbc81d",
												"1": "84ff5aff",
												"2": "1",
												"3": "1010.8221",
												"4": "100.49124",
												"5": "1506.7037",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.414",
												"10": "199997.34"
											},
											{
												"0": "84fbc81e",
												"1": "84ff5b00",
												"2": "0",
												"3": "1007.294",
												"4": "107.90016",
												"5": "1509.1658",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100002.164",
												"10": "200003.67"
											},
											{
												"0": "84fbc81f",
												"1": "84ff5b01",
												"2": "0",
												"3": "1004.36346",
												"4": "83.62822",
												"5": "1508.4337",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.53",
												"10": "199998.31"
											},
											{
												"0": "84fbc820",
												"1": "84ff5b02",
												"2": "1",
												"3": "1007.6828",
												"4": "111.63743",
												"5": "1515.9048",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100001.34",
												"10": "200001.45"
											},
											{
												"0": "84fbc821",
												"1": "84ff5b03",
												"2": "0",
												"3": "998.71094",
												"4": "122.497086",
												"5": "1510.75",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.99",
												"10": "199991.25"
											},
											{
												"0": "84fbc822",
												"1": "84ff5b04",
												"2": "1",
												"3": "1005.87787",
												"4": "104.97304",
												"5": "1505.1906",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.34",
												"10": "199992.03"
											},
											{
												"0": "84fbc823",
												"1": "84ff5b05",
												"2": "0",
												"3": "1009.2264",
												"4": "106.74007",
												"5": "1503.2172",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100002.09",
												"10": "199993.88"
											},
											{
												"0": "84fbc824",
												"1": "84ff5b06",
												"2": "1",
												"3": "1004.8947",
												"4": "119.65039",
												"5": "1510.0686",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.89",
												"10": "199994.72"
											},
											{
												"0": "84fbc825",
												"1": "84ff5b07",
												"2": "1",
												"3": "1008.35974",
												"4": "88.37702",
												"5": "1509.9125",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.0",
												"10": "199998.92"
											},
											{
												"0": "84fbc826",
												"1": "84ff5b08",
												"2": "0",
												"3": "996.50946",
												"4": "117.527214",
												"5": "1501.916",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.65",
												"10": "199992.95"
											},
											{
												"0": "84fbc827",
												"1": "84ff5b09",
												"2": "1",
												"3": "1004.8964",
												"4": "86.32203",
												"5": "1507.1885",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.66",
												"10": "199992.2"
											},
											{
												"0": "84fbc828",
												"1": "84ff5b0a",
												"2": "0",
												"3": "1006.73773",
												"4": "107.672874",
												"5": "1507.8257",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.664",
												"10": "199998.2"
											},
											{
												"0": "84fbc829",
												"1": "84ff5b0b",
												"2": "0",
												"3": "1004.65265",
												"4": "92.97257",
												"5": "1506.2035",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.75",
												"10": "200004.03"
											},
											{
												"0": "84fbc82a",
												"1": "84ff5b0c",
												"2": "1",
												"3": "1007.24786",
												"4": "76.76745",
												"5": "1505.7542",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.31",
												"10": "199991.0"
											},
											{
												"0": "84fbc82b",
												"1": "84ff5b0d",
												"2": "0",
												"3": "1011.2204",
												"4": "92.8906",
												"5": "1508.2267",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.79",
												"10": "199994.1"
											},
											{
												"0": "84fbc82c",
												"1": "84ff5b0e",
												"2": "0",
												"3": "1005.70953",
												"4": "102.05289",
												"5": "1522.4795",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.08",
												"10": "199994.42"
											},
											{
												"0": "84fbc82d",
												"1": "84ff5b0f",
												"2": "0",
												"3": "1016.46075",
												"4": "94.672066",
												"5": "1524.1106",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100014.1",
												"10": "199988.97"
											},
											{
												"0": "84fbc82e",
												"1": "84ff5b10",
												"2": "0",
												"3": "1000.6493",
												"4": "101.744774",
												"5": "1500.57",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.945",
												"10": "199993.84"
											},
											{
												"0": "84fbc82f",
												"1": "84ff5b11",
												"2": "1",
												"3": "1007.7883",
												"4": "76.89134",
												"5": "1517.9204",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.61",
												"10": "199994.6"
											},
											{
												"0": "84fbc830",
												"1": "84ff5b12",
												"2": "0",
												"3": "1023.14215",
												"4": "78.764725",
												"5": "1510.725",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.32",
												"10": "199999.02"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "CustomerId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "string"
											},
											{
												"key": "2",
												"name": "Rating",
												"type": "bigint"
											},
											{
												"key": "3",
												"name": "Cost",
												"type": "float"
											},
											{
												"key": "4",
												"name": "Size",
												"type": "float"
											},
											{
												"key": "5",
												"name": "Price",
												"type": "float"
											},
											{
												"key": "6",
												"name": "PrimaryBrandId",
												"type": "bigint"
											},
											{
												"key": "7",
												"name": "GenderId",
												"type": "bigint"
											},
											{
												"key": "8",
												"name": "MaritalStatus",
												"type": "bigint"
											},
											{
												"key": "9",
												"name": "LowerIncomeBound",
												"type": "float"
											},
											{
												"key": "10",
												"name": "UpperIncomeBound",
												"type": "float"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"2"
											],
											"isStacked": false
										}
									}
								}
							},
							"b38a070f-7c6f-4a09-842a-608f851393d1": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "84fa61f6",
												"1": "84fdf5e6",
												"2": "1",
												"3": "1007.3703",
												"4": "100.9638",
												"5": "1504.0232",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.89",
												"10": "199993.3"
											},
											{
												"0": "84fa61f7",
												"1": "84fdf5e7",
												"2": "1",
												"3": "1009.0166",
												"4": "96.59175",
												"5": "1518.7986",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100003.62",
												"10": "199996.44"
											},
											{
												"0": "84fa61f8",
												"1": "84fdf5e8",
												"2": "1",
												"3": "1017.6357",
												"4": "101.38068",
												"5": "1501.3119",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.05",
												"10": "199989.2"
											},
											{
												"0": "84fa61f9",
												"1": "84fdf5e9",
												"2": "1",
												"3": "1016.6712",
												"4": "79.58175",
												"5": "1508.1149",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.766",
												"10": "199992.02"
											},
											{
												"0": "84fa61fa",
												"1": "84fdf5ea",
												"2": "0",
												"3": "1013.79095",
												"4": "91.339966",
												"5": "1517.5458",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100005.98",
												"10": "199996.42"
											},
											{
												"0": "84fa61fb",
												"1": "84fdf5eb",
												"2": "0",
												"3": "1006.5799",
												"4": "115.14108",
												"5": "1502.5461",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.805",
												"10": "199993.95"
											},
											{
												"0": "84fa61fc",
												"1": "84fdf5ec",
												"2": "1",
												"3": "1000.5137",
												"4": "80.513954",
												"5": "1572.8137",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.92",
												"10": "200000.39"
											},
											{
												"0": "84fa61fd",
												"1": "84fdf5ed",
												"2": "0",
												"3": "1003.7582",
												"4": "105.4664",
												"5": "1519.8564",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.68",
												"10": "199995.81"
											},
											{
												"0": "84fa61fe",
												"1": "84fdf5ee",
												"2": "1",
												"3": "1010.87427",
												"4": "82.881546",
												"5": "1570.9713",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.88",
												"10": "199993.94"
											},
											{
												"0": "84fa61ff",
												"1": "84fdf5ef",
												"2": "1",
												"3": "1006.59534",
												"4": "117.92625",
												"5": "1564.8926",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.43",
												"10": "199990.92"
											},
											{
												"0": "84fa6200",
												"1": "84fdf5f0",
												"2": "1",
												"3": "1007.6017",
												"4": "104.28117",
												"5": "1511.4437",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99991.445",
												"10": "199997.08"
											},
											{
												"0": "84fa6201",
												"1": "84fdf5f1",
												"2": "1",
												"3": "1007.5086",
												"4": "69.58855",
												"5": "1573.5664",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.625",
												"10": "200004.19"
											},
											{
												"0": "84fa6202",
												"1": "84fdf5f2",
												"2": "1",
												"3": "1011.01776",
												"4": "96.93414",
												"5": "1514.5658",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99992.92",
												"10": "199997.69"
											},
											{
												"0": "84fa6203",
												"1": "84fdf5f3",
												"2": "0",
												"3": "1001.9893",
												"4": "110.82803",
												"5": "1505.5265",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100013.63",
												"10": "199990.16"
											},
											{
												"0": "84fa6204",
												"1": "84fdf5f4",
												"2": "1",
												"3": "999.9027",
												"4": "113.381805",
												"5": "1511.2642",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99994.1",
												"10": "199999.19"
											},
											{
												"0": "84fa6205",
												"1": "84fdf5f5",
												"2": "1",
												"3": "1010.59296",
												"4": "95.068375",
												"5": "1508.7966",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99997.766",
												"10": "199995.47"
											},
											{
												"0": "84fa6206",
												"1": "84fdf5f6",
												"2": "1",
												"3": "1004.37335",
												"4": "113.30274",
												"5": "1519.3402",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.086",
												"10": "199991.23"
											},
											{
												"0": "84fa6207",
												"1": "84fdf5f7",
												"2": "0",
												"3": "1000.4937",
												"4": "111.04916",
												"5": "1574.9695",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100016.766",
												"10": "199985.53"
											},
											{
												"0": "84fa6208",
												"1": "84fdf5f8",
												"2": "0",
												"3": "1006.55164",
												"4": "104.8999",
												"5": "1512.8274",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99993.34",
												"10": "199998.6"
											},
											{
												"0": "84fa6209",
												"1": "84fdf5f9",
												"2": "0",
												"3": "1001.3984",
												"4": "117.264694",
												"5": "1503.787",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.22",
												"10": "200001.44"
											},
											{
												"0": "84fa620a",
												"1": "84fdf5fa",
												"2": "0",
												"3": "1007.7925",
												"4": "87.71814",
												"5": "1516.6099",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100012.07",
												"10": "199994.58"
											},
											{
												"0": "84fa620b",
												"1": "84fdf5fb",
												"2": "1",
												"3": "1021.7862",
												"4": "89.299805",
												"5": "1511.9569",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.04",
												"10": "199993.1"
											},
											{
												"0": "84fa620c",
												"1": "84fdf5fc",
												"2": "0",
												"3": "1008.24133",
												"4": "106.57309",
												"5": "1509.3888",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.35",
												"10": "200001.3"
											},
											{
												"0": "84fa620d",
												"1": "84fdf5fd",
												"2": "0",
												"3": "1005.19763",
												"4": "99.94678",
												"5": "1506.0522",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.164",
												"10": "199991.12"
											},
											{
												"0": "84fa620e",
												"1": "84fdf5fe",
												"2": "0",
												"3": "1008.3458",
												"4": "107.51884",
												"5": "1500.3544",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.69",
												"10": "199994.45"
											},
											{
												"0": "84fa620f",
												"1": "84fdf5ff",
												"2": "0",
												"3": "1007.56683",
												"4": "102.44174",
												"5": "1512.2609",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.11",
												"10": "199996.8"
											},
											{
												"0": "84fa6210",
												"1": "84fdf600",
												"2": "1",
												"3": "1008.7391",
												"4": "110.059204",
												"5": "1502.2828",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.26",
												"10": "199997.34"
											},
											{
												"0": "84fa6211",
												"1": "84fdf601",
												"2": "1",
												"3": "1000.2438",
												"4": "109.64265",
												"5": "1507.403",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99998.65",
												"10": "199987.02"
											},
											{
												"0": "84fa6212",
												"1": "84fdf602",
												"2": "1",
												"3": "1000.6752",
												"4": "121.403046",
												"5": "1574.0977",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.7",
												"10": "199995.12"
											},
											{
												"0": "84fa6213",
												"1": "84fdf603",
												"2": "1",
												"3": "1006.74713",
												"4": "98.74666",
												"5": "1507.7097",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.914",
												"10": "199991.28"
											},
											{
												"0": "84fa6214",
												"1": "84fdf604",
												"2": "0",
												"3": "1014.4838",
												"4": "95.94507",
												"5": "1529.2463",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100012.6",
												"10": "199994.8"
											},
											{
												"0": "84fa6215",
												"1": "84fdf605",
												"2": "0",
												"3": "996.40814",
												"4": "87.937805",
												"5": "1504.9442",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.164",
												"10": "199993.16"
											},
											{
												"0": "84fa6216",
												"1": "84fdf606",
												"2": "1",
												"3": "1013.66925",
												"4": "98.60425",
												"5": "1502.8704",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.08",
												"10": "199989.19"
											},
											{
												"0": "84fa6217",
												"1": "84fdf607",
												"2": "0",
												"3": "1012.93225",
												"4": "72.67189",
												"5": "1569.327",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.64",
												"10": "199995.44"
											},
											{
												"0": "84fa6218",
												"1": "84fdf608",
												"2": "0",
												"3": "1014.81757",
												"4": "95.94698",
												"5": "1508.2642",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.33",
												"10": "199993.34"
											},
											{
												"0": "84fa6219",
												"1": "84fdf609",
												"2": "0",
												"3": "1016.3798",
												"4": "75.12366",
												"5": "1567.683",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.85",
												"10": "200003.2"
											},
											{
												"0": "84fa621a",
												"1": "84fdf60a",
												"2": "0",
												"3": "998.26355",
												"4": "90.6955",
												"5": "1504.7203",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100013.56",
												"10": "199988.61"
											},
											{
												"0": "84fa621b",
												"1": "84fdf60b",
												"2": "0",
												"3": "1007.22003",
												"4": "109.772705",
												"5": "1573.4478",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100001.81",
												"10": "200003.81"
											},
											{
												"0": "84fa621c",
												"1": "84fdf60c",
												"2": "1",
												"3": "1002.6765",
												"4": "116.03156",
												"5": "1509.3916",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.5",
												"10": "199998.22"
											},
											{
												"0": "84fa621d",
												"1": "84fdf60d",
												"2": "1",
												"3": "1002.1133",
												"4": "86.000854",
												"5": "1511.9421",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.9",
												"10": "199993.53"
											},
											{
												"0": "84fa621e",
												"1": "84fdf60e",
												"2": "0",
												"3": "1013.9551",
												"4": "88.451096",
												"5": "1502.1837",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.62",
												"10": "199991.98"
											},
											{
												"0": "84fa621f",
												"1": "84fdf60f",
												"2": "1",
												"3": "997.8997",
												"4": "90.079254",
												"5": "1500.6868",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.72",
												"10": "200000.44"
											},
											{
												"0": "84fa6220",
												"1": "84fdf610",
												"2": "0",
												"3": "1011.6124",
												"4": "90.8671",
												"5": "1508.4431",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.55",
												"10": "199996.73"
											},
											{
												"0": "84fa6221",
												"1": "84fdf611",
												"2": "0",
												"3": "1013.80774",
												"4": "108.75123",
												"5": "1504.5591",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99993.75",
												"10": "200006.3"
											},
											{
												"0": "84fa6222",
												"1": "84fdf612",
												"2": "0",
												"3": "1006.32764",
												"4": "116.70997",
												"5": "1574.1959",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.96",
												"10": "199997.06"
											},
											{
												"0": "84fa6223",
												"1": "84fdf613",
												"2": "0",
												"3": "1011.3758",
												"4": "110.66713",
												"5": "1533.7218",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100000.81",
												"10": "199999.66"
											},
											{
												"0": "84fa6224",
												"1": "84fdf614",
												"2": "1",
												"3": "1005.84937",
												"4": "113.33688",
												"5": "1505.6324",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.125",
												"10": "199994.9"
											},
											{
												"0": "84fa6225",
												"1": "84fdf615",
												"2": "1",
												"3": "1008.10205",
												"4": "115.184746",
												"5": "1572.6805",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.03",
												"10": "199993.98"
											},
											{
												"0": "84fa6226",
												"1": "84fdf616",
												"2": "0",
												"3": "1017.1347",
												"4": "91.35335",
												"5": "1508.642",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.75",
												"10": "199997.1"
											},
											{
												"0": "84fa6227",
												"1": "84fdf617",
												"2": "0",
												"3": "998.2338",
												"4": "100.366844",
												"5": "1506.7955",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.35",
												"10": "199996.81"
											},
											{
												"0": "84fa6228",
												"1": "84fdf618",
												"2": "1",
												"3": "1013.95233",
												"4": "107.825226",
												"5": "1503.0101",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.08",
												"10": "200001.45"
											},
											{
												"0": "84fa6229",
												"1": "84fdf619",
												"2": "0",
												"3": "1004.07385",
												"4": "110.23711",
												"5": "1524.4114",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.28",
												"10": "200007.48"
											},
											{
												"0": "84fa622a",
												"1": "84fdf61a",
												"2": "1",
												"3": "1015.2539",
												"4": "97.823326",
												"5": "1517.3856",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100001.06",
												"10": "199997.42"
											},
											{
												"0": "84fa622b",
												"1": "84fdf61b",
												"2": "1",
												"3": "1005.4436",
												"4": "107.95358",
												"5": "1505.5764",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99996.56",
												"10": "199998.3"
											},
											{
												"0": "84fa622c",
												"1": "84fdf61c",
												"2": "1",
												"3": "1004.2307",
												"4": "118.06785",
												"5": "1506.9719",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.2",
												"10": "199992.22"
											},
											{
												"0": "84fa622d",
												"1": "84fdf61d",
												"2": "1",
												"3": "1010.0313",
												"4": "90.97641",
												"5": "1502.8436",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.27",
												"10": "199992.77"
											},
											{
												"0": "84fa622e",
												"1": "84fdf61e",
												"2": "1",
												"3": "1007.0913",
												"4": "113.258316",
												"5": "1567.3784",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.35",
												"10": "199998.86"
											},
											{
												"0": "84fa622f",
												"1": "84fdf61f",
												"2": "0",
												"3": "1011.8403",
												"4": "101.94185",
												"5": "1503.3372",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.54",
												"10": "199987.62"
											},
											{
												"0": "84fa6230",
												"1": "84fdf620",
												"2": "1",
												"3": "1007.5164",
												"4": "114.97758",
												"5": "1503.8619",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.9",
												"10": "199996.03"
											},
											{
												"0": "84fa6231",
												"1": "84fdf621",
												"2": "0",
												"3": "1010.6103",
												"4": "103.13192",
												"5": "1528.2584",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100004.19",
												"10": "199998.55"
											},
											{
												"0": "84fa6232",
												"1": "84fdf622",
												"2": "0",
												"3": "987.84406",
												"4": "95.5169",
												"5": "1564.512",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.06",
												"10": "199990.39"
											},
											{
												"0": "84fa6233",
												"1": "84fdf623",
												"2": "0",
												"3": "1001.71045",
												"4": "111.70722",
												"5": "1512.9645",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.98",
												"10": "199997.36"
											},
											{
												"0": "84fa6234",
												"1": "84fdf624",
												"2": "0",
												"3": "1006.2745",
												"4": "98.63407",
												"5": "1512.5195",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.95",
												"10": "199996.08"
											},
											{
												"0": "84fa6235",
												"1": "84fdf625",
												"2": "0",
												"3": "1008.74023",
												"4": "99.70729",
												"5": "1504.1356",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.93",
												"10": "200004.06"
											},
											{
												"0": "84fa6236",
												"1": "84fdf626",
												"2": "1",
												"3": "997.32874",
												"4": "96.26517",
												"5": "1509.3201",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.1",
												"10": "199994.84"
											},
											{
												"0": "84fa6237",
												"1": "84fdf627",
												"2": "0",
												"3": "1006.7293",
												"4": "111.91",
												"5": "1510.9448",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.96",
												"10": "199988.78"
											},
											{
												"0": "84fa6238",
												"1": "84fdf628",
												"2": "0",
												"3": "1007.4654",
												"4": "93.55456",
												"5": "1503.72",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.164",
												"10": "199993.4"
											},
											{
												"0": "84fa6239",
												"1": "84fdf629",
												"2": "1",
												"3": "1015.6864",
												"4": "90.47398",
												"5": "1506.5687",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.74",
												"10": "199995.66"
											},
											{
												"0": "84fa623a",
												"1": "84fdf62a",
												"2": "0",
												"3": "997.5653",
												"4": "86.43973",
												"5": "1573.7607",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100006.02",
												"10": "199995.47"
											},
											{
												"0": "84fa623b",
												"1": "84fdf62b",
												"2": "0",
												"3": "1012.48785",
												"4": "103.153564",
												"5": "1505.111",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.5",
												"10": "199996.6"
											},
											{
												"0": "84fa623c",
												"1": "84fdf62c",
												"2": "0",
												"3": "1012.9345",
												"4": "104.42383",
												"5": "1506.1058",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.9",
												"10": "199998.81"
											},
											{
												"0": "84fa623d",
												"1": "84fdf62d",
												"2": "1",
												"3": "1000.6611",
												"4": "92.75416",
												"5": "1571.4159",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.21",
												"10": "199997.61"
											},
											{
												"0": "84fa623e",
												"1": "84fdf62e",
												"2": "1",
												"3": "999.9255",
												"4": "90.270874",
												"5": "1508.8367",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.51",
												"10": "199992.33"
											},
											{
												"0": "84fa623f",
												"1": "84fdf62f",
												"2": "1",
												"3": "1012.076",
												"4": "111.78121",
												"5": "1502.0425",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.82",
												"10": "199993.9"
											},
											{
												"0": "84fa6240",
												"1": "84fdf630",
												"2": "0",
												"3": "1008.18524",
												"4": "114.35108",
												"5": "1503.966",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100003.53",
												"10": "200000.38"
											},
											{
												"0": "84fa6241",
												"1": "84fdf631",
												"2": "1",
												"3": "1008.87964",
												"4": "91.67943",
												"5": "1511.3073",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.03",
												"10": "199999.67"
											},
											{
												"0": "84fa6242",
												"1": "84fdf632",
												"2": "1",
												"3": "1012.6998",
												"4": "81.81702",
												"5": "1503.2184",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.33",
												"10": "199991.55"
											},
											{
												"0": "84fa6243",
												"1": "84fdf633",
												"2": "0",
												"3": "1007.0423",
												"4": "102.74617",
												"5": "1502.0575",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100012.0",
												"10": "199987.75"
											},
											{
												"0": "84fa6244",
												"1": "84fdf634",
												"2": "1",
												"3": "1007.93665",
												"4": "110.136665",
												"5": "1514.8041",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.14",
												"10": "199992.75"
											},
											{
												"0": "84fa6245",
												"1": "84fdf635",
												"2": "1",
												"3": "1001.38666",
												"4": "91.64457",
												"5": "1514.7065",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.85",
												"10": "199998.27"
											},
											{
												"0": "84fa6246",
												"1": "84fdf636",
												"2": "0",
												"3": "998.7523",
												"4": "90.72949",
												"5": "1506.3961",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.26",
												"10": "199995.39"
											},
											{
												"0": "84fa6247",
												"1": "84fdf637",
												"2": "0",
												"3": "1004.2654",
												"4": "97.36056",
												"5": "1506.2438",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.8",
												"10": "199994.34"
											},
											{
												"0": "84fa6248",
												"1": "84fdf638",
												"2": "0",
												"3": "1004.8387",
												"4": "116.91454",
												"5": "1505.6803",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100004.96",
												"10": "199998.81"
											},
											{
												"0": "84fa6249",
												"1": "84fdf639",
												"2": "1",
												"3": "1015.40094",
												"4": "76.986855",
												"5": "1512.7028",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99997.33",
												"10": "200001.66"
											},
											{
												"0": "84fa624a",
												"1": "84fdf63a",
												"2": "1",
												"3": "1000.0319",
												"4": "113.36066",
												"5": "1507.0566",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.09",
												"10": "199994.12"
											},
											{
												"0": "84fa624b",
												"1": "84fdf63b",
												"2": "1",
												"3": "1012.57886",
												"4": "75.75878",
												"5": "1504.2468",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.28",
												"10": "199994.16"
											},
											{
												"0": "84fa624c",
												"1": "84fdf63c",
												"2": "0",
												"3": "999.6358",
												"4": "119.592804",
												"5": "1512.5842",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.28",
												"10": "200010.69"
											},
											{
												"0": "84fa624d",
												"1": "84fdf63d",
												"2": "1",
												"3": "998.1961",
												"4": "92.49852",
												"5": "1501.5432",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.05",
												"10": "199992.28"
											},
											{
												"0": "84fa624e",
												"1": "84fdf63e",
												"2": "1",
												"3": "1002.9443",
												"4": "110.599815",
												"5": "1505.5073",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.77",
												"10": "200004.55"
											},
											{
												"0": "84fa624f",
												"1": "84fdf63f",
												"2": "1",
												"3": "1009.73206",
												"4": "112.85776",
												"5": "1503.2206",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.86",
												"10": "199995.14"
											},
											{
												"0": "84fa6250",
												"1": "84fdf640",
												"2": "0",
												"3": "1007.1105",
												"4": "100.39834",
												"5": "1507.2678",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100008.18",
												"10": "199993.84"
											},
											{
												"0": "84fa6251",
												"1": "84fdf641",
												"2": "1",
												"3": "1004.189",
												"4": "76.16396",
												"5": "1568.4879",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99988.195",
												"10": "199992.64"
											},
											{
												"0": "84fa6252",
												"1": "84fdf642",
												"2": "1",
												"3": "995.5943",
												"4": "88.44843",
												"5": "1572.708",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.766",
												"10": "199993.0"
											},
											{
												"0": "84fa6253",
												"1": "84fdf643",
												"2": "0",
												"3": "1009.37823",
												"4": "92.07071",
												"5": "1501.2407",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.41",
												"10": "199996.19"
											},
											{
												"0": "84fa6254",
												"1": "84fdf644",
												"2": "1",
												"3": "1009.1966",
												"4": "104.14306",
												"5": "1508.0121",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.65",
												"10": "199994.77"
											},
											{
												"0": "84fa6255",
												"1": "84fdf645",
												"2": "0",
												"3": "1006.6566",
												"4": "93.21787",
												"5": "1515.1943",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.41",
												"10": "199997.67"
											},
											{
												"0": "84fa6256",
												"1": "84fdf646",
												"2": "0",
												"3": "1008.4443",
												"4": "105.2184",
												"5": "1517.198",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100011.555",
												"10": "199993.1"
											},
											{
												"0": "84fa6257",
												"1": "84fdf647",
												"2": "0",
												"3": "1004.32025",
												"4": "76.22097",
												"5": "1506.7433",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100014.5",
												"10": "199997.53"
											},
											{
												"0": "84fa6258",
												"1": "84fdf648",
												"2": "1",
												"3": "1007.3914",
												"4": "103.76118",
												"5": "1507.2433",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.98",
												"10": "200002.94"
											},
											{
												"0": "84fa6259",
												"1": "84fdf649",
												"2": "0",
												"3": "1009.0623",
												"4": "110.60865",
												"5": "1510.054",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.37",
												"10": "199993.6"
											},
											{
												"0": "84fa625a",
												"1": "84fdf64a",
												"2": "0",
												"3": "1009.7255",
												"4": "121.6303",
												"5": "1573.3203",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.55",
												"10": "199989.27"
											},
											{
												"0": "84fa625b",
												"1": "84fdf64b",
												"2": "0",
												"3": "1008.0056",
												"4": "110.62411",
												"5": "1500.1392",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.02",
												"10": "199995.92"
											},
											{
												"0": "84fa625c",
												"1": "84fdf64c",
												"2": "0",
												"3": "1014.5155",
												"4": "86.56738",
												"5": "1501.1223",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.44",
												"10": "199991.78"
											},
											{
												"0": "84fa625d",
												"1": "84fdf64d",
												"2": "1",
												"3": "1006.8018",
												"4": "104.236145",
												"5": "1514.7982",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99993.4",
												"10": "199993.31"
											},
											{
												"0": "84fa625e",
												"1": "84fdf64e",
												"2": "0",
												"3": "1003.35504",
												"4": "115.63781",
												"5": "1513.3777",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.2",
												"10": "199992.55"
											},
											{
												"0": "84fa625f",
												"1": "84fdf64f",
												"2": "0",
												"3": "1004.7379",
												"4": "116.57368",
												"5": "1508.4009",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100012.02",
												"10": "199995.73"
											},
											{
												"0": "84fa6260",
												"1": "84fdf650",
												"2": "1",
												"3": "1002.5024",
												"4": "92.940735",
												"5": "1505.7405",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.25",
												"10": "199990.7"
											},
											{
												"0": "84fa6261",
												"1": "84fdf651",
												"2": "1",
												"3": "1020.7799",
												"4": "85.77498",
												"5": "1508.885",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.84",
												"10": "199994.56"
											},
											{
												"0": "84fa6262",
												"1": "84fdf652",
												"2": "0",
												"3": "1008.87714",
												"4": "82.62276",
												"5": "1507.4791",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100004.86",
												"10": "199995.05"
											},
											{
												"0": "84fa6263",
												"1": "84fdf653",
												"2": "0",
												"3": "1009.14746",
												"4": "111.99028",
												"5": "1501.7739",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100004.45",
												"10": "199993.25"
											},
											{
												"0": "84fa6264",
												"1": "84fdf654",
												"2": "0",
												"3": "1010.57056",
												"4": "103.74594",
												"5": "1515.4358",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100000.484",
												"10": "200000.78"
											},
											{
												"0": "84fa6265",
												"1": "84fdf655",
												"2": "1",
												"3": "1002.3103",
												"4": "113.61789",
												"5": "1506.3407",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.09",
												"10": "199999.19"
											},
											{
												"0": "84fa6266",
												"1": "84fdf656",
												"2": "1",
												"3": "1007.4876",
												"4": "104.535484",
												"5": "1512.0907",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.516",
												"10": "200001.33"
											},
											{
												"0": "84fa6267",
												"1": "84fdf657",
												"2": "1",
												"3": "1010.9406",
												"4": "91.34944",
												"5": "1512.1292",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100002.32",
												"10": "199995.69"
											},
											{
												"0": "84fa6268",
												"1": "84fdf658",
												"2": "0",
												"3": "999.7842",
												"4": "110.312",
												"5": "1507.8765",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.875",
												"10": "199993.08"
											},
											{
												"0": "84fa6269",
												"1": "84fdf659",
												"2": "0",
												"3": "1006.46747",
												"4": "89.83904",
												"5": "1512.6381",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.41",
												"10": "199992.36"
											},
											{
												"0": "84fa626a",
												"1": "84fdf65a",
												"2": "1",
												"3": "1007.02716",
												"4": "109.795616",
												"5": "1510.4318",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.16",
												"10": "199994.45"
											},
											{
												"0": "84fa626b",
												"1": "84fdf65b",
												"2": "0",
												"3": "1005.91907",
												"4": "113.81577",
												"5": "1507.9287",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100002.836",
												"10": "199996.72"
											},
											{
												"0": "84fa626c",
												"1": "84fdf65c",
												"2": "0",
												"3": "1000.9431",
												"4": "116.16062",
												"5": "1508.1245",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.08",
												"10": "199998.19"
											},
											{
												"0": "84fa626d",
												"1": "84fdf65d",
												"2": "0",
												"3": "1012.3146",
												"4": "95.61117",
												"5": "1510.9723",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.76",
												"10": "199992.92"
											},
											{
												"0": "84fa626e",
												"1": "84fdf65e",
												"2": "0",
												"3": "994.47473",
												"4": "95.34197",
												"5": "1512.4426",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100011.164",
												"10": "199994.19"
											},
											{
												"0": "84fa626f",
												"1": "84fdf65f",
												"2": "1",
												"3": "1000.00354",
												"4": "103.86274",
												"5": "1512.7207",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.71",
												"10": "199998.98"
											},
											{
												"0": "84fa6270",
												"1": "84fdf660",
												"2": "1",
												"3": "1005.0606",
												"4": "125.39134",
												"5": "1572.0746",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.28",
												"10": "199992.39"
											},
											{
												"0": "84fa6271",
												"1": "84fdf661",
												"2": "1",
												"3": "1006.43274",
												"4": "91.38149",
												"5": "1521.1549",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100002.945",
												"10": "199994.77"
											},
											{
												"0": "84fa6272",
												"1": "84fdf662",
												"2": "0",
												"3": "1012.13965",
												"4": "99.14232",
												"5": "1508.656",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.51",
												"10": "199996.17"
											},
											{
												"0": "84fa6273",
												"1": "84fdf663",
												"2": "1",
												"3": "1010.0191",
												"4": "102.62186",
												"5": "1506.5253",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.41",
												"10": "199993.9"
											},
											{
												"0": "84fa6274",
												"1": "84fdf664",
												"2": "1",
												"3": "1013.6138",
												"4": "94.37386",
												"5": "1502.2332",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99986.8",
												"10": "199993.55"
											},
											{
												"0": "84fa6275",
												"1": "84fdf665",
												"2": "0",
												"3": "1002.5237",
												"4": "113.58871",
												"5": "1505.4739",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.234",
												"10": "199995.03"
											},
											{
												"0": "84fa6276",
												"1": "84fdf666",
												"2": "0",
												"3": "1010.71423",
												"4": "96.698975",
												"5": "1512.7831",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100009.51",
												"10": "199991.36"
											},
											{
												"0": "84fa6277",
												"1": "84fdf667",
												"2": "0",
												"3": "1007.3253",
												"4": "109.98761",
												"5": "1503.4974",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.82",
												"10": "199990.73"
											},
											{
												"0": "84fa6278",
												"1": "84fdf668",
												"2": "0",
												"3": "1003.89545",
												"4": "110.09814",
												"5": "1509.8628",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.79",
												"10": "199998.86"
											},
											{
												"0": "84fa6279",
												"1": "84fdf669",
												"2": "1",
												"3": "1003.2442",
												"4": "97.48945",
												"5": "1510.2512",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.336",
												"10": "199993.27"
											},
											{
												"0": "84fa627a",
												"1": "84fdf66a",
												"2": "0",
												"3": "1015.5623",
												"4": "95.93568",
												"5": "1518.9084",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.22",
												"10": "199990.4"
											},
											{
												"0": "84fa627b",
												"1": "84fdf66b",
												"2": "1",
												"3": "1004.1766",
												"4": "113.78102",
												"5": "1569.2576",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.484",
												"10": "199998.33"
											},
											{
												"0": "84fa627c",
												"1": "84fdf66c",
												"2": "0",
												"3": "1015.3842",
												"4": "103.16695",
												"5": "1511.5953",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.875",
												"10": "199989.62"
											},
											{
												"0": "84fa627d",
												"1": "84fdf66d",
												"2": "0",
												"3": "1005.63196",
												"4": "97.3451",
												"5": "1504.6406",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100011.66",
												"10": "199989.75"
											},
											{
												"0": "84fa627e",
												"1": "84fdf66e",
												"2": "0",
												"3": "1019.1323",
												"4": "85.257225",
												"5": "1503.3206",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.88",
												"10": "199997.42"
											},
											{
												"0": "84fa627f",
												"1": "84fdf66f",
												"2": "1",
												"3": "1012.6265",
												"4": "97.38938",
												"5": "1514.7611",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99995.5",
												"10": "199993.77"
											},
											{
												"0": "84fa6280",
												"1": "84fdf670",
												"2": "0",
												"3": "1009.9519",
												"4": "106.15315",
												"5": "1516.9296",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.25",
												"10": "200000.86"
											},
											{
												"0": "84fa6281",
												"1": "84fdf671",
												"2": "0",
												"3": "1009.236",
												"4": "79.11352",
												"5": "1504.3751",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100012.81",
												"10": "199987.92"
											},
											{
												"0": "84fa6282",
												"1": "84fdf672",
												"2": "1",
												"3": "1008.40814",
												"4": "101.62771",
												"5": "1505.1565",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.375",
												"10": "200000.81"
											},
											{
												"0": "84fa6283",
												"1": "84fdf673",
												"2": "1",
												"3": "1008.6432",
												"4": "93.78198",
												"5": "1574.7932",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.09",
												"10": "200000.66"
											},
											{
												"0": "84fa6284",
												"1": "84fdf674",
												"2": "1",
												"3": "1012.9357",
												"4": "85.496735",
												"5": "1506.2318",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.016",
												"10": "199990.25"
											},
											{
												"0": "84fa6285",
												"1": "84fdf675",
												"2": "1",
												"3": "1008.1131",
												"4": "92.1038",
												"5": "1565.9707",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.19",
												"10": "199993.6"
											},
											{
												"0": "84fa6286",
												"1": "84fdf676",
												"2": "0",
												"3": "1000.36993",
												"4": "90.650536",
												"5": "1506.5497",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.06",
												"10": "199991.83"
											},
											{
												"0": "84fa6287",
												"1": "84fdf677",
												"2": "0",
												"3": "1001.47",
												"4": "82.22916",
												"5": "1573.6667",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.9",
												"10": "199998.45"
											},
											{
												"0": "84fa6288",
												"1": "84fdf678",
												"2": "0",
												"3": "1009.76306",
												"4": "107.714554",
												"5": "1502.0886",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100005.08",
												"10": "199998.45"
											},
											{
												"0": "84fa6289",
												"1": "84fdf679",
												"2": "0",
												"3": "1012.85645",
												"4": "104.68228",
												"5": "1574.9175",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.29",
												"10": "199996.89"
											},
											{
												"0": "84fa628a",
												"1": "84fdf67a",
												"2": "1",
												"3": "1008.7902",
												"4": "85.441124",
												"5": "1506.2347",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99998.45",
												"10": "199989.5"
											},
											{
												"0": "84fa628b",
												"1": "84fdf67b",
												"2": "1",
												"3": "1017.30835",
												"4": "95.24498",
												"5": "1515.4302",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99989.61",
												"10": "200001.7"
											},
											{
												"0": "84fa628c",
												"1": "84fdf67c",
												"2": "0",
												"3": "1009.6937",
												"4": "110.21076",
												"5": "1505.0612",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.88",
												"10": "199995.33"
											},
											{
												"0": "84fa628d",
												"1": "84fdf67d",
												"2": "1",
												"3": "1011.0733",
												"4": "92.133835",
												"5": "1513.7375",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100007.35",
												"10": "200004.05"
											},
											{
												"0": "84fa628e",
												"1": "84fdf67e",
												"2": "0",
												"3": "1002.56726",
												"4": "111.79075",
												"5": "1523.9182",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.02",
												"10": "199995.06"
											},
											{
												"0": "84fa628f",
												"1": "84fdf67f",
												"2": "1",
												"3": "1021.85895",
												"4": "81.31342",
												"5": "1502.5096",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99997.195",
												"10": "199996.44"
											},
											{
												"0": "84fa6290",
												"1": "84fdf680",
												"2": "0",
												"3": "1021.0",
												"4": "82.71882",
												"5": "1506.4596",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.97",
												"10": "199997.66"
											},
											{
												"0": "84fa6291",
												"1": "84fdf681",
												"2": "0",
												"3": "1007.9716",
												"4": "107.71871",
												"5": "1507.5956",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100009.04",
												"10": "199996.05"
											},
											{
												"0": "84fa632e",
												"1": "84fdf71e",
												"2": "0",
												"3": "1002.5113",
												"4": "92.500656",
												"5": "1504.8065",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.56",
												"10": "199997.95"
											},
											{
												"0": "84fa632f",
												"1": "84fdf71f",
												"2": "1",
												"3": "1006.0662",
												"4": "102.762505",
												"5": "1510.7823",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.086",
												"10": "199995.66"
											},
											{
												"0": "84fa6330",
												"1": "84fdf720",
												"2": "1",
												"3": "1013.9844",
												"4": "97.49917",
												"5": "1501.1248",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.82",
												"10": "199996.45"
											},
											{
												"0": "84fa6331",
												"1": "84fdf721",
												"2": "1",
												"3": "1014.9741",
												"4": "85.43863",
												"5": "1574.6216",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.375",
												"10": "199990.39"
											},
											{
												"0": "84fa6332",
												"1": "84fdf722",
												"2": "0",
												"3": "1010.36456",
												"4": "98.35442",
												"5": "1514.3397",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.6",
												"10": "199995.67"
											},
											{
												"0": "84fa6333",
												"1": "84fdf723",
												"2": "0",
												"3": "1015.398",
												"4": "86.81655",
												"5": "1514.9633",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.89",
												"10": "199991.34"
											},
											{
												"0": "84fa6334",
												"1": "84fdf724",
												"2": "1",
												"3": "1011.0917",
												"4": "105.29565",
												"5": "1509.3137",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99982.055",
												"10": "199990.98"
											},
											{
												"0": "84fa6335",
												"1": "84fdf725",
												"2": "0",
												"3": "1004.69025",
												"4": "119.069016",
												"5": "1502.5275",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.34",
												"10": "199999.6"
											},
											{
												"0": "84fa6336",
												"1": "84fdf726",
												"2": "0",
												"3": "1010.28174",
												"4": "107.90938",
												"5": "1509.8099",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.66",
												"10": "199996.72"
											},
											{
												"0": "84fa6337",
												"1": "84fdf727",
												"2": "1",
												"3": "1014.0283",
												"4": "86.47588",
												"5": "1520.2456",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99996.12",
												"10": "199995.86"
											},
											{
												"0": "84fa6338",
												"1": "84fdf728",
												"2": "1",
												"3": "1007.6911",
												"4": "113.82737",
												"5": "1512.2246",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.914",
												"10": "199999.39"
											},
											{
												"0": "84fa6339",
												"1": "84fdf729",
												"2": "0",
												"3": "1009.57184",
												"4": "107.86921",
												"5": "1515.3647",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.31",
												"10": "199993.17"
											},
											{
												"0": "84fa633a",
												"1": "84fdf72a",
												"2": "1",
												"3": "1006.5026",
												"4": "104.431145",
												"5": "1523.4313",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.16",
												"10": "199992.45"
											},
											{
												"0": "84fa633b",
												"1": "84fdf72b",
												"2": "1",
												"3": "1003.3033",
												"4": "113.63918",
												"5": "1510.0498",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99990.48",
												"10": "199986.64"
											},
											{
												"0": "84fa633c",
												"1": "84fdf72c",
												"2": "0",
												"3": "1008.7266",
												"4": "82.697685",
												"5": "1513.4279",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.984",
												"10": "199995.6"
											},
											{
												"0": "84fa633d",
												"1": "84fdf72d",
												"2": "1",
												"3": "1010.31195",
												"4": "94.919785",
												"5": "1518.8516",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.12",
												"10": "199995.72"
											},
											{
												"0": "84fa633e",
												"1": "84fdf72e",
												"2": "0",
												"3": "1017.75037",
												"4": "84.01665",
												"5": "1508.2744",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.625",
												"10": "199998.22"
											},
											{
												"0": "84fa633f",
												"1": "84fdf72f",
												"2": "0",
												"3": "1020.85956",
												"4": "87.37747",
												"5": "1513.2563",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100004.43",
												"10": "199997.89"
											},
											{
												"0": "84fa6340",
												"1": "84fdf730",
												"2": "0",
												"3": "1011.029",
												"4": "101.05316",
												"5": "1517.1659",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.875",
												"10": "199995.38"
											},
											{
												"0": "84fa6341",
												"1": "84fdf731",
												"2": "0",
												"3": "995.7164",
												"4": "90.224495",
												"5": "1505.4023",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.375",
												"10": "199997.97"
											},
											{
												"0": "84fa6342",
												"1": "84fdf732",
												"2": "1",
												"3": "1012.81824",
												"4": "104.54396",
												"5": "1564.0879",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.78",
												"10": "199997.58"
											},
											{
												"0": "84fa6343",
												"1": "84fdf733",
												"2": "0",
												"3": "1003.0238",
												"4": "103.97229",
												"5": "1517.599",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100001.55",
												"10": "200002.66"
											},
											{
												"0": "84fa6344",
												"1": "84fdf734",
												"2": "1",
												"3": "1004.07947",
												"4": "107.590195",
												"5": "1513.482",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.87",
												"10": "199997.0"
											},
											{
												"0": "84fa6345",
												"1": "84fdf735",
												"2": "1",
												"3": "1015.4837",
												"4": "94.2355",
												"5": "1509.0375",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.34",
												"10": "199998.22"
											},
											{
												"0": "84fa6346",
												"1": "84fdf736",
												"2": "0",
												"3": "1003.6024",
												"4": "74.79817",
												"5": "1572.6365",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.87",
												"10": "199997.98"
											},
											{
												"0": "84fa6347",
												"1": "84fdf737",
												"2": "1",
												"3": "997.4681",
												"4": "123.08458",
												"5": "1509.6791",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.17",
												"10": "199996.45"
											},
											{
												"0": "84fa6348",
												"1": "84fdf738",
												"2": "0",
												"3": "1009.9383",
												"4": "99.39832",
												"5": "1502.086",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100013.32",
												"10": "199991.25"
											},
											{
												"0": "84fa6349",
												"1": "84fdf739",
												"2": "0",
												"3": "1005.7234",
												"4": "115.80604",
												"5": "1516.5046",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.53",
												"10": "199995.88"
											},
											{
												"0": "84fa634a",
												"1": "84fdf73a",
												"2": "0",
												"3": "997.6659",
												"4": "85.2923",
												"5": "1572.8267",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100012.875",
												"10": "199989.92"
											},
											{
												"0": "84fa634b",
												"1": "84fdf73b",
												"2": "0",
												"3": "1008.1969",
												"4": "104.83437",
												"5": "1512.6385",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.15",
												"10": "199995.39"
											},
											{
												"0": "84fa634c",
												"1": "84fdf73c",
												"2": "0",
												"3": "1002.89484",
												"4": "98.00322",
												"5": "1503.7166",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.87",
												"10": "199994.52"
											},
											{
												"0": "84fa634d",
												"1": "84fdf73d",
												"2": "1",
												"3": "1004.5692",
												"4": "102.17854",
												"5": "1571.3374",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.45",
												"10": "199993.23"
											},
											{
												"0": "84fa634e",
												"1": "84fdf73e",
												"2": "0",
												"3": "1012.238",
												"4": "93.68895",
												"5": "1510.9885",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100013.08",
												"10": "199989.6"
											},
											{
												"0": "84fa634f",
												"1": "84fdf73f",
												"2": "0",
												"3": "1005.67456",
												"4": "114.29932",
												"5": "1507.615",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100007.09",
												"10": "199992.44"
											},
											{
												"0": "84fa6350",
												"1": "84fdf740",
												"2": "1",
												"3": "1011.97217",
												"4": "82.5512",
												"5": "1502.4667",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.07",
												"10": "199993.2"
											},
											{
												"0": "84fa6351",
												"1": "84fdf741",
												"2": "0",
												"3": "1010.7489",
												"4": "106.88279",
												"5": "1517.881",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.08",
												"10": "199993.8"
											},
											{
												"0": "84fa6352",
												"1": "84fdf742",
												"2": "1",
												"3": "1010.01495",
												"4": "94.77467",
												"5": "1505.3447",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99984.305",
												"10": "199994.94"
											},
											{
												"0": "84fa6353",
												"1": "84fdf743",
												"2": "1",
												"3": "1002.67456",
												"4": "107.3832",
												"5": "1517.7831",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.32",
												"10": "199990.28"
											},
											{
												"0": "84fa6354",
												"1": "84fdf744",
												"2": "1",
												"3": "1009.3398",
												"4": "86.45765",
												"5": "1515.6649",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.42",
												"10": "199996.11"
											},
											{
												"0": "84fa6355",
												"1": "84fdf745",
												"2": "0",
												"3": "999.4562",
												"4": "106.0865",
												"5": "1512.7631",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.21",
												"10": "199994.64"
											},
											{
												"0": "84fa6356",
												"1": "84fdf746",
												"2": "0",
												"3": "1016.9659",
												"4": "102.29311",
												"5": "1506.4182",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100007.516",
												"10": "199998.92"
											},
											{
												"0": "84fa6357",
												"1": "84fdf747",
												"2": "0",
												"3": "987.5984",
												"4": "95.44947",
												"5": "1518.2028",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.76",
												"10": "199999.72"
											},
											{
												"0": "84fa6358",
												"1": "84fdf748",
												"2": "1",
												"3": "1008.9564",
												"4": "87.80036",
												"5": "1502.5582",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.12",
												"10": "199993.94"
											},
											{
												"0": "84fa6359",
												"1": "84fdf749",
												"2": "0",
												"3": "1002.7793",
												"4": "97.22224",
												"5": "1569.1263",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.92",
												"10": "199992.06"
											},
											{
												"0": "84fa635a",
												"1": "84fdf74a",
												"2": "1",
												"3": "1007.3579",
												"4": "111.90633",
												"5": "1515.4963",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.11",
												"10": "199992.08"
											},
											{
												"0": "84fa635b",
												"1": "84fdf74b",
												"2": "1",
												"3": "1006.93506",
												"4": "113.126884",
												"5": "1507.2966",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.91",
												"10": "199994.95"
											},
											{
												"0": "84fa635c",
												"1": "84fdf74c",
												"2": "1",
												"3": "1006.30334",
												"4": "118.81225",
												"5": "1501.8257",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.734",
												"10": "199994.44"
											},
											{
												"0": "84fa635d",
												"1": "84fdf74d",
												"2": "1",
												"3": "997.6375",
												"4": "78.185104",
												"5": "1572.2257",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99995.055",
												"10": "199998.2"
											},
											{
												"0": "84fa635e",
												"1": "84fdf74e",
												"2": "1",
												"3": "1014.3741",
												"4": "94.69567",
												"5": "1519.1213",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99997.35",
												"10": "200003.1"
											},
											{
												"0": "84fa635f",
												"1": "84fdf74f",
												"2": "1",
												"3": "1016.05725",
												"4": "80.77946",
												"5": "1510.7393",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.25",
												"10": "199996.0"
											},
											{
												"0": "84fa6360",
												"1": "84fdf750",
												"2": "1",
												"3": "1011.3222",
												"4": "92.84054",
												"5": "1507.5034",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.195",
												"10": "199993.56"
											},
											{
												"0": "84fa6361",
												"1": "84fdf751",
												"2": "0",
												"3": "1022.11584",
												"4": "94.084854",
												"5": "1510.1138",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.84",
												"10": "199991.08"
											},
											{
												"0": "84fa6362",
												"1": "84fdf752",
												"2": "0",
												"3": "999.8002",
												"4": "100.67596",
												"5": "1514.1353",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.266",
												"10": "199994.36"
											},
											{
												"0": "84fa6363",
												"1": "84fdf753",
												"2": "0",
												"3": "1005.49097",
												"4": "83.02677",
												"5": "1509.1317",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100014.47",
												"10": "199994.56"
											},
											{
												"0": "84fa6364",
												"1": "84fdf754",
												"2": "1",
												"3": "1008.564",
												"4": "113.29956",
												"5": "1506.8523",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99998.53",
												"10": "199993.8"
											},
											{
												"0": "84fa6365",
												"1": "84fdf755",
												"2": "1",
												"3": "1007.7763",
												"4": "106.626945",
												"5": "1504.2148",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.836",
												"10": "199996.6"
											},
											{
												"0": "84fa6366",
												"1": "84fdf756",
												"2": "0",
												"3": "999.2628",
												"4": "111.41997",
												"5": "1521.3861",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.055",
												"10": "199997.55"
											},
											{
												"0": "84fa6367",
												"1": "84fdf757",
												"2": "1",
												"3": "1012.3035",
												"4": "89.89752",
												"5": "1512.3324",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.26",
												"10": "199997.1"
											},
											{
												"0": "84fa6368",
												"1": "84fdf758",
												"2": "0",
												"3": "1006.5879",
												"4": "99.28835",
												"5": "1512.4586",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.984",
												"10": "199993.95"
											},
											{
												"0": "84fa6369",
												"1": "84fdf759",
												"2": "1",
												"3": "1002.95215",
												"4": "91.38852",
												"5": "1569.5941",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.586",
												"10": "199996.69"
											},
											{
												"0": "84fa636a",
												"1": "84fdf75a",
												"2": "1",
												"3": "1013.29333",
												"4": "83.515015",
												"5": "1510.6948",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99994.11",
												"10": "199994.06"
											},
											{
												"0": "84fa636b",
												"1": "84fdf75b",
												"2": "1",
												"3": "1000.96765",
												"4": "114.53696",
												"5": "1501.0173",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99998.45",
												"10": "199999.36"
											},
											{
												"0": "84fa636c",
												"1": "84fdf75c",
												"2": "0",
												"3": "1005.2557",
												"4": "100.548515",
												"5": "1515.8652",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.44",
												"10": "199989.28"
											},
											{
												"0": "84fa636d",
												"1": "84fdf75d",
												"2": "1",
												"3": "1006.36993",
												"4": "97.22767",
												"5": "1504.3041",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100000.07",
												"10": "200003.33"
											},
											{
												"0": "84fa636e",
												"1": "84fdf75e",
												"2": "1",
												"3": "1006.7667",
												"4": "86.66509",
												"5": "1503.2311",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.76",
												"10": "199992.16"
											},
											{
												"0": "84fa636f",
												"1": "84fdf75f",
												"2": "0",
												"3": "1002.6594",
												"4": "120.46182",
												"5": "1508.3262",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.61",
												"10": "199998.88"
											},
											{
												"0": "84fa6370",
												"1": "84fdf760",
												"2": "1",
												"3": "1012.26544",
												"4": "103.053345",
												"5": "1574.8125",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.32",
												"10": "199995.72"
											},
											{
												"0": "84fa6371",
												"1": "84fdf761",
												"2": "1",
												"3": "1002.1128",
												"4": "89.75354",
												"5": "1505.1055",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99987.4",
												"10": "199987.58"
											},
											{
												"0": "84fa6372",
												"1": "84fdf762",
												"2": "0",
												"3": "1006.22534",
												"4": "100.001595",
												"5": "1501.4551",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100009.414",
												"10": "199999.77"
											},
											{
												"0": "84fa6373",
												"1": "84fdf763",
												"2": "1",
												"3": "1016.86884",
												"4": "95.73085",
												"5": "1510.9329",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.05",
												"10": "199996.2"
											},
											{
												"0": "84fa6374",
												"1": "84fdf764",
												"2": "0",
												"3": "1000.52985",
												"4": "79.61757",
												"5": "1500.7284",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100001.85",
												"10": "199991.78"
											},
											{
												"0": "84fa6375",
												"1": "84fdf765",
												"2": "1",
												"3": "1020.9026",
												"4": "73.163345",
												"5": "1511.8094",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99990.58",
												"10": "200002.28"
											},
											{
												"0": "84fa6376",
												"1": "84fdf766",
												"2": "1",
												"3": "1008.37164",
												"4": "100.9419",
												"5": "1514.8765",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99989.516",
												"10": "199997.6"
											},
											{
												"0": "84fa6377",
												"1": "84fdf767",
												"2": "0",
												"3": "1027.4323",
												"4": "73.86495",
												"5": "1519.1898",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.64",
												"10": "199998.05"
											},
											{
												"0": "84fa6378",
												"1": "84fdf768",
												"2": "0",
												"3": "1012.2139",
												"4": "88.56979",
												"5": "1511.1781",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.16",
												"10": "199996.31"
											},
											{
												"0": "84fa6379",
												"1": "84fdf769",
												"2": "1",
												"3": "1010.1211",
												"4": "108.84566",
												"5": "1500.2936",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.78",
												"10": "199995.05"
											},
											{
												"0": "84fa637a",
												"1": "84fdf76a",
												"2": "1",
												"3": "1007.7974",
												"4": "103.842125",
												"5": "1506.1025",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.66",
												"10": "199998.78"
											},
											{
												"0": "84fa637b",
												"1": "84fdf76b",
												"2": "1",
												"3": "1016.89355",
												"4": "78.63013",
												"5": "1514.8829",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.76",
												"10": "199992.69"
											},
											{
												"0": "84fa637c",
												"1": "84fdf76c",
												"2": "0",
												"3": "1004.7804",
												"4": "99.7355",
												"5": "1506.8667",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.97",
												"10": "199999.4"
											},
											{
												"0": "84fa637d",
												"1": "84fdf76d",
												"2": "1",
												"3": "1007.59607",
												"4": "84.83768",
												"5": "1506.7527",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.945",
												"10": "199992.75"
											},
											{
												"0": "84fa637e",
												"1": "84fdf76e",
												"2": "1",
												"3": "1009.14795",
												"4": "116.88854",
												"5": "1504.1165",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99991.516",
												"10": "199994.84"
											},
											{
												"0": "84fa637f",
												"1": "84fdf76f",
												"2": "1",
												"3": "1010.268",
												"4": "88.681885",
												"5": "1511.6042",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.97",
												"10": "199993.72"
											},
											{
												"0": "84fa6380",
												"1": "84fdf770",
												"2": "1",
												"3": "1011.75854",
												"4": "78.28555",
												"5": "1506.8649",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.91",
												"10": "200002.72"
											},
											{
												"0": "84fa6381",
												"1": "84fdf771",
												"2": "1",
												"3": "1007.67865",
												"4": "111.76162",
												"5": "1505.9956",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.87",
												"10": "199995.25"
											},
											{
												"0": "84fa6382",
												"1": "84fdf772",
												"2": "1",
												"3": "1006.3928",
												"4": "93.95334",
												"5": "1507.5521",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99983.61",
												"10": "199990.03"
											},
											{
												"0": "84fa6383",
												"1": "84fdf773",
												"2": "1",
												"3": "1009.1256",
												"4": "107.24265",
												"5": "1511.8518",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99990.41",
												"10": "200001.66"
											},
											{
												"0": "84fa6384",
												"1": "84fdf774",
												"2": "0",
												"3": "1010.5878",
												"4": "75.08232",
												"5": "1508.4718",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.586",
												"10": "199998.75"
											},
											{
												"0": "84fa6385",
												"1": "84fdf775",
												"2": "1",
												"3": "1012.70966",
												"4": "92.0779",
												"5": "1503.528",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.36",
												"10": "199994.78"
											},
											{
												"0": "84fa6386",
												"1": "84fdf776",
												"2": "0",
												"3": "1009.79095",
												"4": "110.62817",
												"5": "1511.7885",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100008.914",
												"10": "199992.7"
											},
											{
												"0": "84fa6387",
												"1": "84fdf777",
												"2": "1",
												"3": "997.34296",
												"4": "88.50942",
												"5": "1508.0876",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.85",
												"10": "199997.22"
											},
											{
												"0": "84fa6388",
												"1": "84fdf778",
												"2": "1",
												"3": "1010.25055",
												"4": "102.22367",
												"5": "1509.2065",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.08",
												"10": "199998.31"
											},
											{
												"0": "84fa6389",
												"1": "84fdf779",
												"2": "1",
												"3": "1004.7695",
												"4": "104.62824",
												"5": "1505.8026",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99993.51",
												"10": "199997.08"
											},
											{
												"0": "84fa638a",
												"1": "84fdf77a",
												"2": "0",
												"3": "1012.71765",
												"4": "104.16338",
												"5": "1500.3737",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.375",
												"10": "199996.47"
											},
											{
												"0": "84fa638b",
												"1": "84fdf77b",
												"2": "1",
												"3": "1004.124",
												"4": "111.86933",
												"5": "1503.9014",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.97",
												"10": "199997.2"
											},
											{
												"0": "84fa638c",
												"1": "84fdf77c",
												"2": "0",
												"3": "1007.897",
												"4": "114.35418",
												"5": "1510.7457",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100000.74",
												"10": "200000.31"
											},
											{
												"0": "84fa638d",
												"1": "84fdf77d",
												"2": "1",
												"3": "1009.96344",
												"4": "76.5871",
												"5": "1502.3114",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99988.45",
												"10": "199997.8"
											},
											{
												"0": "84fa638e",
												"1": "84fdf77e",
												"2": "0",
												"3": "1010.92676",
												"4": "97.5769",
												"5": "1508.2054",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.94",
												"10": "199997.62"
											},
											{
												"0": "84fa638f",
												"1": "84fdf77f",
												"2": "1",
												"3": "1018.706",
												"4": "85.39296",
												"5": "1515.647",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99995.375",
												"10": "200001.81"
											},
											{
												"0": "84fa6390",
												"1": "84fdf780",
												"2": "0",
												"3": "1009.87256",
												"4": "94.08617",
												"5": "1512.2615",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.22",
												"10": "199990.98"
											},
											{
												"0": "84fa6391",
												"1": "84fdf781",
												"2": "0",
												"3": "1012.2579",
												"4": "103.22093",
												"5": "1500.4542",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.03",
												"10": "199996.25"
											},
											{
												"0": "84fa6392",
												"1": "84fdf782",
												"2": "1",
												"3": "1002.1173",
												"4": "89.160065",
												"5": "1513.4839",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99994.36",
												"10": "199989.48"
											},
											{
												"0": "84fa6393",
												"1": "84fdf783",
												"2": "1",
												"3": "1012.42224",
												"4": "111.70507",
												"5": "1501.7748",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.93",
												"10": "199994.0"
											},
											{
												"0": "84fa6394",
												"1": "84fdf784",
												"2": "1",
												"3": "1012.20935",
												"4": "106.08232",
												"5": "1572.9749",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.62",
												"10": "199990.52"
											},
											{
												"0": "84fa6395",
												"1": "84fdf785",
												"2": "1",
												"3": "1011.1164",
												"4": "97.248856",
												"5": "1514.6848",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.53",
												"10": "199995.19"
											},
											{
												"0": "84fa6396",
												"1": "84fdf786",
												"2": "1",
												"3": "1006.1974",
												"4": "80.21878",
												"5": "1568.7336",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.19",
												"10": "199993.8"
											},
											{
												"0": "84fa6397",
												"1": "84fdf787",
												"2": "0",
												"3": "1007.9595",
												"4": "106.599594",
												"5": "1500.6333",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100012.66",
												"10": "199984.08"
											},
											{
												"0": "84fa6398",
												"1": "84fdf788",
												"2": "0",
												"3": "1008.3789",
												"4": "102.08075",
												"5": "1574.1569",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.41",
												"10": "199998.97"
											},
											{
												"0": "84fa6399",
												"1": "84fdf789",
												"2": "1",
												"3": "1014.4824",
												"4": "95.172386",
												"5": "1515.8743",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.914",
												"10": "199992.19"
											},
											{
												"0": "84fa639a",
												"1": "84fdf78a",
												"2": "0",
												"3": "1005.87054",
												"4": "111.75239",
												"5": "1513.8153",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100011.36",
												"10": "199986.3"
											},
											{
												"0": "84fa639b",
												"1": "84fdf78b",
												"2": "0",
												"3": "1007.83856",
												"4": "112.97177",
												"5": "1514.6855",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.734",
												"10": "199994.95"
											},
											{
												"0": "84fa639c",
												"1": "84fdf78c",
												"2": "0",
												"3": "1002.04297",
												"4": "104.14832",
												"5": "1508.0609",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.01",
												"10": "200006.27"
											},
											{
												"0": "84fa639d",
												"1": "84fdf78d",
												"2": "1",
												"3": "1010.8985",
												"4": "91.609924",
												"5": "1516.9181",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99990.85",
												"10": "199989.27"
											},
											{
												"0": "84fa639e",
												"1": "84fdf78e",
												"2": "0",
												"3": "1000.9746",
												"4": "117.11314",
												"5": "1503.5479",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100006.336",
												"10": "199993.42"
											},
											{
												"0": "84fa639f",
												"1": "84fdf78f",
												"2": "0",
												"3": "996.71857",
												"4": "91.6866",
												"5": "1502.6758",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.305",
												"10": "199996.2"
											},
											{
												"0": "84fa63a0",
												"1": "84fdf790",
												"2": "0",
												"3": "1009.8094",
												"4": "94.929955",
												"5": "1509.3551",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.25",
												"10": "200001.19"
											},
											{
												"0": "84fa63a1",
												"1": "84fdf791",
												"2": "0",
												"3": "1013.263",
												"4": "95.62566",
												"5": "1502.5134",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.336",
												"10": "199992.3"
											},
											{
												"0": "84fa63a2",
												"1": "84fdf792",
												"2": "1",
												"3": "1001.9555",
												"4": "91.90368",
												"5": "1510.5713",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.2",
												"10": "199997.84"
											},
											{
												"0": "84fa63a3",
												"1": "84fdf793",
												"2": "1",
												"3": "1009.1606",
												"4": "115.2342",
												"5": "1570.8976",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.625",
												"10": "199989.39"
											},
											{
												"0": "84fa63a4",
												"1": "84fdf794",
												"2": "0",
												"3": "1010.7139",
												"4": "89.41029",
												"5": "1574.1967",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.14",
												"10": "199989.86"
											},
											{
												"0": "84fa63a5",
												"1": "84fdf795",
												"2": "0",
												"3": "1001.85675",
												"4": "118.47853",
												"5": "1574.4421",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100001.22",
												"10": "200000.7"
											},
											{
												"0": "84fa63a6",
												"1": "84fdf796",
												"2": "0",
												"3": "1007.5103",
												"4": "108.57295",
												"5": "1508.0356",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.32",
												"10": "199989.94"
											},
											{
												"0": "84fa63a7",
												"1": "84fdf797",
												"2": "1",
												"3": "1006.78375",
												"4": "106.73442",
												"5": "1572.4606",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.984",
												"10": "199992.34"
											},
											{
												"0": "84fa63a8",
												"1": "84fdf798",
												"2": "0",
												"3": "1005.2028",
												"4": "122.06513",
												"5": "1506.5098",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.51",
												"10": "199995.73"
											},
											{
												"0": "84fa63a9",
												"1": "84fdf799",
												"2": "0",
												"3": "1001.35675",
												"4": "89.55281",
												"5": "1509.3132",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.4",
												"10": "199995.23"
											},
											{
												"0": "84fa63aa",
												"1": "84fdf79a",
												"2": "0",
												"3": "1006.5873",
												"4": "96.871254",
												"5": "1505.5201",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.695",
												"10": "199990.0"
											},
											{
												"0": "84fa63ab",
												"1": "84fdf79b",
												"2": "1",
												"3": "1003.26154",
												"4": "82.47052",
												"5": "1507.5591",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.48",
												"10": "199999.34"
											},
											{
												"0": "84fa63ac",
												"1": "84fdf79c",
												"2": "0",
												"3": "1007.61096",
												"4": "108.88308",
												"5": "1503.8346",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.83",
												"10": "200001.0"
											},
											{
												"0": "84fa63ad",
												"1": "84fdf79d",
												"2": "0",
												"3": "1006.12866",
												"4": "94.025",
												"5": "1564.4652",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.984",
												"10": "199996.95"
											},
											{
												"0": "84fa63ae",
												"1": "84fdf79e",
												"2": "1",
												"3": "1000.4768",
												"4": "95.53514",
												"5": "1502.7937",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.92",
												"10": "199989.39"
											},
											{
												"0": "84fa63af",
												"1": "84fdf79f",
												"2": "0",
												"3": "1004.098",
												"4": "75.64026",
												"5": "1558.412",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100010.234",
												"10": "199995.06"
											},
											{
												"0": "84fa63b0",
												"1": "84fdf7a0",
												"2": "1",
												"3": "1011.731",
												"4": "100.54751",
												"5": "1504.0369",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.945",
												"10": "199993.45"
											},
											{
												"0": "84fa63b1",
												"1": "84fdf7a1",
												"2": "0",
												"3": "1010.24",
												"4": "98.707245",
												"5": "1511.7255",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.81",
												"10": "199997.58"
											},
											{
												"0": "84fa63b2",
												"1": "84fdf7a2",
												"2": "0",
												"3": "1006.70294",
												"4": "84.68627",
												"5": "1505.9075",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100009.51",
												"10": "199992.8"
											},
											{
												"0": "84fa63b3",
												"1": "84fdf7a3",
												"2": "0",
												"3": "1005.9891",
												"4": "104.89692",
												"5": "1574.361",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.72",
												"10": "199990.08"
											},
											{
												"0": "84fa63b4",
												"1": "84fdf7a4",
												"2": "0",
												"3": "1005.3203",
												"4": "81.38865",
												"5": "1506.9313",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.89",
												"10": "199993.69"
											},
											{
												"0": "84fa63b5",
												"1": "84fdf7a5",
												"2": "0",
												"3": "1001.94867",
												"4": "97.83991",
												"5": "1513.5625",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100011.33",
												"10": "199994.7"
											},
											{
												"0": "84fa63b6",
												"1": "84fdf7a6",
												"2": "1",
												"3": "1010.1929",
												"4": "82.30727",
												"5": "1569.872",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.77",
												"10": "200001.62"
											},
											{
												"0": "84fa63b7",
												"1": "84fdf7a7",
												"2": "0",
												"3": "1005.9187",
												"4": "90.250626",
												"5": "1573.4696",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100000.09",
												"10": "199995.06"
											},
											{
												"0": "84fa63b8",
												"1": "84fdf7a8",
												"2": "1",
												"3": "1011.2575",
												"4": "89.07912",
												"5": "1566.3086",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.33",
												"10": "199992.03"
											},
											{
												"0": "84fa63b9",
												"1": "84fdf7a9",
												"2": "0",
												"3": "1009.56586",
												"4": "97.21449",
												"5": "1529.3606",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.2",
												"10": "200001.12"
											},
											{
												"0": "84fa63ba",
												"1": "84fdf7aa",
												"2": "0",
												"3": "1016.8176",
												"4": "85.78801",
												"5": "1510.5492",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.54",
												"10": "199995.52"
											},
											{
												"0": "84fa63bb",
												"1": "84fdf7ab",
												"2": "0",
												"3": "1009.89105",
												"4": "108.17852",
												"5": "1511.8333",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.43",
												"10": "199992.31"
											},
											{
												"0": "84fa63bc",
												"1": "84fdf7ac",
												"2": "1",
												"3": "1010.2088",
												"4": "112.213974",
												"5": "1502.9447",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.875",
												"10": "199997.47"
											},
											{
												"0": "84fa63bd",
												"1": "84fdf7ad",
												"2": "1",
												"3": "1009.5058",
												"4": "104.652405",
												"5": "1501.066",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.28",
												"10": "199990.12"
											},
											{
												"0": "84fa63be",
												"1": "84fdf7ae",
												"2": "1",
												"3": "1007.4959",
												"4": "117.34327",
												"5": "1503.9265",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.18",
												"10": "200003.38"
											},
											{
												"0": "84fa63bf",
												"1": "84fdf7af",
												"2": "1",
												"3": "1002.6552",
												"4": "118.29401",
												"5": "1510.392",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.9",
												"10": "199994.62"
											},
											{
												"0": "84fa63c0",
												"1": "84fdf7b0",
												"2": "1",
												"3": "1010.9751",
												"4": "106.07785",
												"5": "1514.0099",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.34",
												"10": "199998.92"
											},
											{
												"0": "84fa63c1",
												"1": "84fdf7b1",
												"2": "1",
												"3": "1003.1684",
												"4": "109.268234",
												"5": "1510.9175",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.23",
												"10": "199990.89"
											},
											{
												"0": "84fa63c2",
												"1": "84fdf7b2",
												"2": "0",
												"3": "1007.9046",
												"4": "106.418434",
												"5": "1509.8984",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100014.24",
												"10": "199988.44"
											},
											{
												"0": "84fa63c3",
												"1": "84fdf7b3",
												"2": "1",
												"3": "1003.8226",
												"4": "104.137474",
												"5": "1517.8961",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99995.21",
												"10": "199997.11"
											},
											{
												"0": "84fa63c4",
												"1": "84fdf7b4",
												"2": "1",
												"3": "1002.7003",
												"4": "85.6693",
												"5": "1506.2681",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99997.79",
												"10": "199994.03"
											},
											{
												"0": "84fa63c5",
												"1": "84fdf7b5",
												"2": "0",
												"3": "1003.7751",
												"4": "109.00519",
												"5": "1508.5938",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99997.85",
												"10": "200005.55"
											},
											{
												"0": "84fa63c6",
												"1": "84fdf7b6",
												"2": "1",
												"3": "1007.9602",
												"4": "103.08832",
												"5": "1574.74",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99990.71",
												"10": "199994.94"
											},
											{
												"0": "84fa63c7",
												"1": "84fdf7b7",
												"2": "0",
												"3": "1003.5568",
												"4": "104.223724",
												"5": "1506.2095",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100009.875",
												"10": "199993.0"
											},
											{
												"0": "84fa63c8",
												"1": "84fdf7b8",
												"2": "1",
												"3": "1006.52966",
												"4": "112.94637",
												"5": "1574.8446",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.39",
												"10": "199997.73"
											},
											{
												"0": "84fa63c9",
												"1": "84fdf7b9",
												"2": "1",
												"3": "1009.6299",
												"4": "103.005684",
												"5": "1514.2317",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.125",
												"10": "199997.77"
											},
											{
												"0": "84fa6466",
												"1": "84fdf856",
												"2": "1",
												"3": "1024.0469",
												"4": "78.55328",
												"5": "1510.5775",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.93",
												"10": "199993.16"
											},
											{
												"0": "84fa6467",
												"1": "84fdf857",
												"2": "0",
												"3": "1009.6494",
												"4": "111.274284",
												"5": "1574.4082",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.27",
												"10": "199987.53"
											},
											{
												"0": "84fa6468",
												"1": "84fdf858",
												"2": "1",
												"3": "1008.76636",
												"4": "90.37886",
												"5": "1504.8473",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.51",
												"10": "199996.42"
											},
											{
												"0": "84fa6469",
												"1": "84fdf859",
												"2": "1",
												"3": "1010.59406",
												"4": "107.2255",
												"5": "1520.8763",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.914",
												"10": "199993.08"
											},
											{
												"0": "84fa646a",
												"1": "84fdf85a",
												"2": "1",
												"3": "1014.7685",
												"4": "106.48993",
												"5": "1514.8519",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.12",
												"10": "199995.38"
											},
											{
												"0": "84fa646b",
												"1": "84fdf85b",
												"2": "0",
												"3": "1014.0261",
												"4": "91.50604",
												"5": "1501.4752",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.8",
												"10": "199995.53"
											},
											{
												"0": "84fa646c",
												"1": "84fdf85c",
												"2": "0",
												"3": "1008.13605",
												"4": "98.91727",
												"5": "1505.7056",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.36",
												"10": "199990.7"
											},
											{
												"0": "84fa646d",
												"1": "84fdf85d",
												"2": "0",
												"3": "1013.5124",
												"4": "104.94203",
												"5": "1500.2249",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.34",
												"10": "199993.03"
											},
											{
												"0": "84fa646e",
												"1": "84fdf85e",
												"2": "0",
												"3": "1018.8645",
												"4": "86.65478",
												"5": "1506.1301",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.32",
												"10": "199994.97"
											},
											{
												"0": "84fa646f",
												"1": "84fdf85f",
												"2": "0",
												"3": "1009.72455",
												"4": "101.782875",
												"5": "1569.965",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100005.65",
												"10": "199993.88"
											},
											{
												"0": "84fa6470",
												"1": "84fdf860",
												"2": "1",
												"3": "1000.9859",
												"4": "97.16904",
												"5": "1514.1735",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100000.484",
												"10": "200004.84"
											},
											{
												"0": "84fa6471",
												"1": "84fdf861",
												"2": "0",
												"3": "1019.186",
												"4": "81.49572",
												"5": "1503.1313",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.61",
												"10": "199993.0"
											},
											{
												"0": "84fa6472",
												"1": "84fdf862",
												"2": "0",
												"3": "1001.20465",
												"4": "91.03406",
												"5": "1522.6221",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.12",
												"10": "199994.9"
											},
											{
												"0": "84fa6473",
												"1": "84fdf863",
												"2": "0",
												"3": "1009.07715",
												"4": "102.2294",
												"5": "1511.483",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.086",
												"10": "199996.97"
											},
											{
												"0": "84fa6474",
												"1": "84fdf864",
												"2": "0",
												"3": "1006.24384",
												"4": "91.37185",
												"5": "1518.068",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.086",
												"10": "199991.6"
											},
											{
												"0": "84fa6475",
												"1": "84fdf865",
												"2": "1",
												"3": "1001.2887",
												"4": "69.86339",
												"5": "1572.542",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.63",
												"10": "199994.61"
											},
											{
												"0": "84fa6476",
												"1": "84fdf866",
												"2": "0",
												"3": "1006.0945",
												"4": "91.49166",
												"5": "1503.2345",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.99",
												"10": "200002.34"
											},
											{
												"0": "84fa6477",
												"1": "84fdf867",
												"2": "1",
												"3": "1014.0661",
												"4": "108.475624",
												"5": "1517.4429",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.0",
												"10": "199997.83"
											},
											{
												"0": "84fa6478",
												"1": "84fdf868",
												"2": "1",
												"3": "1006.7946",
												"4": "114.334526",
												"5": "1503.3192",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99993.445",
												"10": "199993.06"
											},
											{
												"0": "84fa6479",
												"1": "84fdf869",
												"2": "0",
												"3": "1004.1965",
												"4": "90.64801",
												"5": "1511.3195",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100012.94",
												"10": "199990.52"
											},
											{
												"0": "84fa647a",
												"1": "84fdf86a",
												"2": "1",
												"3": "1001.59595",
												"4": "99.29584",
												"5": "1566.1473",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100001.484",
												"10": "199996.89"
											},
											{
												"0": "84fa647b",
												"1": "84fdf86b",
												"2": "0",
												"3": "1004.7614",
												"4": "104.52989",
												"5": "1503.444",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.92",
												"10": "200001.8"
											},
											{
												"0": "84fa647c",
												"1": "84fdf86c",
												"2": "1",
												"3": "1004.99347",
												"4": "111.83915",
												"5": "1504.166",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.49",
												"10": "199998.77"
											},
											{
												"0": "84fa647d",
												"1": "84fdf86d",
												"2": "1",
												"3": "1002.63806",
												"4": "121.97194",
												"5": "1514.4604",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.19",
												"10": "199991.77"
											},
											{
												"0": "84fa647e",
												"1": "84fdf86e",
												"2": "0",
												"3": "1003.54535",
												"4": "83.976036",
												"5": "1502.428",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.6",
												"10": "199999.3"
											},
											{
												"0": "84fa647f",
												"1": "84fdf86f",
												"2": "0",
												"3": "1007.69275",
												"4": "109.45954",
												"5": "1503.8948",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.055",
												"10": "199992.84"
											},
											{
												"0": "84fa6480",
												"1": "84fdf870",
												"2": "1",
												"3": "998.7242",
												"4": "108.750824",
												"5": "1514.8464",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.05",
												"10": "199998.83"
											},
											{
												"0": "84fa6481",
												"1": "84fdf871",
												"2": "0",
												"3": "1010.14026",
												"4": "94.06915",
												"5": "1509.004",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100003.74",
												"10": "200002.56"
											},
											{
												"0": "84fa6482",
												"1": "84fdf872",
												"2": "0",
												"3": "999.14734",
												"4": "108.9965",
												"5": "1510.6517",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.8",
												"10": "199994.25"
											},
											{
												"0": "84fa6483",
												"1": "84fdf873",
												"2": "1",
												"3": "1007.0845",
												"4": "83.400154",
												"5": "1569.6665",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.484",
												"10": "199997.28"
											},
											{
												"0": "84fa6484",
												"1": "84fdf874",
												"2": "1",
												"3": "1004.26117",
												"4": "102.71911",
												"5": "1516.291",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100002.51",
												"10": "199993.52"
											},
											{
												"0": "84fa6485",
												"1": "84fdf875",
												"2": "1",
												"3": "1004.6002",
												"4": "107.76291",
												"5": "1516.2505",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.99",
												"10": "200002.62"
											},
											{
												"0": "84fa6486",
												"1": "84fdf876",
												"2": "1",
												"3": "1021.45746",
												"4": "88.25126",
												"5": "1504.3091",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.71",
												"10": "200000.53"
											},
											{
												"0": "84fa6487",
												"1": "84fdf877",
												"2": "1",
												"3": "1010.5525",
												"4": "111.10864",
												"5": "1511.8162",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.625",
												"10": "199994.03"
											},
											{
												"0": "84fa6488",
												"1": "84fdf878",
												"2": "1",
												"3": "1015.2739",
												"4": "81.67949",
												"5": "1505.8484",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99991.164",
												"10": "199995.11"
											},
											{
												"0": "84fa6489",
												"1": "84fdf879",
												"2": "1",
												"3": "1008.5162",
												"4": "107.815506",
												"5": "1507.744",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.3",
												"10": "199994.6"
											},
											{
												"0": "84fa648a",
												"1": "84fdf87a",
												"2": "0",
												"3": "998.11786",
												"4": "101.6953",
												"5": "1509.4985",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.98",
												"10": "199994.39"
											},
											{
												"0": "84fa648b",
												"1": "84fdf87b",
												"2": "0",
												"3": "1007.325",
												"4": "91.715645",
												"5": "1509.7332",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.695",
												"10": "199999.92"
											},
											{
												"0": "84fa648c",
												"1": "84fdf87c",
												"2": "1",
												"3": "1000.30725",
												"4": "103.041336",
												"5": "1514.4248",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99992.75",
												"10": "199994.61"
											},
											{
												"0": "84fa648d",
												"1": "84fdf87d",
												"2": "1",
												"3": "1011.6603",
												"4": "118.52531",
												"5": "1508.0972",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99985.945",
												"10": "199995.75"
											},
											{
												"0": "84fa648e",
												"1": "84fdf87e",
												"2": "1",
												"3": "1015.807",
												"4": "86.79585",
												"5": "1506.2135",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.69",
												"10": "199996.34"
											},
											{
												"0": "84fa648f",
												"1": "84fdf87f",
												"2": "0",
												"3": "1011.7831",
												"4": "95.687164",
												"5": "1506.8519",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100010.25",
												"10": "199986.81"
											},
											{
												"0": "84fa6490",
												"1": "84fdf880",
												"2": "1",
												"3": "994.87244",
												"4": "92.32589",
												"5": "1503.5822",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.57",
												"10": "200004.1"
											},
											{
												"0": "84fa6491",
												"1": "84fdf881",
												"2": "1",
												"3": "1004.1048",
												"4": "106.334015",
												"5": "1503.0596",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99998.32",
												"10": "199996.06"
											},
											{
												"0": "84fa6492",
												"1": "84fdf882",
												"2": "0",
												"3": "1009.5516",
												"4": "101.63319",
												"5": "1510.9795",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.0",
												"10": "199988.27"
											},
											{
												"0": "84fa6493",
												"1": "84fdf883",
												"2": "1",
												"3": "1009.14307",
												"4": "100.23638",
												"5": "1519.055",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.54",
												"10": "199994.72"
											},
											{
												"0": "84fa6494",
												"1": "84fdf884",
												"2": "0",
												"3": "1002.1114",
												"4": "96.406876",
												"5": "1573.7125",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100012.67",
												"10": "199992.02"
											},
											{
												"0": "84fa6495",
												"1": "84fdf885",
												"2": "1",
												"3": "1004.41223",
												"4": "112.19652",
												"5": "1517.8348",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.61",
												"10": "200002.39"
											},
											{
												"0": "84fa6496",
												"1": "84fdf886",
												"2": "1",
												"3": "1013.8692",
												"4": "101.05689",
												"5": "1520.4296",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.34",
												"10": "199997.95"
											},
											{
												"0": "84fa6497",
												"1": "84fdf887",
												"2": "0",
												"3": "1003.76825",
												"4": "113.34245",
												"5": "1512.6871",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100005.25",
												"10": "199988.58"
											},
											{
												"0": "84fa6498",
												"1": "84fdf888",
												"2": "1",
												"3": "1010.2221",
												"4": "99.417336",
												"5": "1508.9272",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.195",
												"10": "199998.9"
											},
											{
												"0": "84fa6499",
												"1": "84fdf889",
												"2": "1",
												"3": "1009.55585",
												"4": "90.47537",
												"5": "1508.636",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.19",
												"10": "199991.55"
											},
											{
												"0": "84fa649a",
												"1": "84fdf88a",
												"2": "1",
												"3": "1022.7534",
												"4": "97.02091",
												"5": "1517.3043",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.086",
												"10": "199998.42"
											},
											{
												"0": "84fa649b",
												"1": "84fdf88b",
												"2": "0",
												"3": "1002.8995",
												"4": "112.93553",
												"5": "1513.2454",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100012.734",
												"10": "199985.08"
											},
											{
												"0": "84fa649c",
												"1": "84fdf88c",
												"2": "1",
												"3": "1000.7544",
												"4": "100.27917",
												"5": "1513.1536",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.92",
												"10": "199997.75"
											},
											{
												"0": "84fa649d",
												"1": "84fdf88d",
												"2": "1",
												"3": "995.5173",
												"4": "92.1416",
												"5": "1567.0652",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.7",
												"10": "199991.16"
											},
											{
												"0": "84fa649e",
												"1": "84fdf88e",
												"2": "1",
												"3": "1005.55994",
												"4": "91.40516",
												"5": "1506.8403",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.516",
												"10": "199991.39"
											},
											{
												"0": "84fa649f",
												"1": "84fdf88f",
												"2": "0",
												"3": "1006.9002",
												"4": "104.61492",
												"5": "1505.4298",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.16",
												"10": "200001.48"
											},
											{
												"0": "84fa64a0",
												"1": "84fdf890",
												"2": "1",
												"3": "997.5602",
												"4": "94.27252",
												"5": "1574.8458",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99993.81",
												"10": "199998.38"
											},
											{
												"0": "84fa64a1",
												"1": "84fdf891",
												"2": "1",
												"3": "997.08746",
												"4": "129.7413",
												"5": "1506.4662",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.54",
												"10": "199996.33"
											},
											{
												"0": "84fa64a2",
												"1": "84fdf892",
												"2": "1",
												"3": "1008.52893",
												"4": "103.69767",
												"5": "1503.1768",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99995.72",
												"10": "199996.14"
											},
											{
												"0": "84fa64a3",
												"1": "84fdf893",
												"2": "0",
												"3": "1009.5551",
												"4": "100.30728",
												"5": "1509.8529",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.66",
												"10": "199999.94"
											},
											{
												"0": "84fa64a4",
												"1": "84fdf894",
												"2": "0",
												"3": "1002.8301",
												"4": "90.00734",
												"5": "1574.6361",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100011.14",
												"10": "199995.34"
											},
											{
												"0": "84fa64a5",
												"1": "84fdf895",
												"2": "0",
												"3": "1017.3536",
												"4": "99.26218",
												"5": "1507.8889",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.0",
												"10": "200000.16"
											},
											{
												"0": "84fa64a6",
												"1": "84fdf896",
												"2": "0",
												"3": "1007.6363",
												"4": "90.69307",
												"5": "1502.9333",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100011.94",
												"10": "199989.47"
											},
											{
												"0": "84fa64a7",
												"1": "84fdf897",
												"2": "1",
												"3": "1015.1457",
												"4": "75.83033",
												"5": "1573.44",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.04",
												"10": "199997.08"
											},
											{
												"0": "84fa64a8",
												"1": "84fdf898",
												"2": "1",
												"3": "1004.70496",
												"4": "109.826675",
												"5": "1512.5121",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.92",
												"10": "199998.28"
											},
											{
												"0": "84fa64a9",
												"1": "84fdf899",
												"2": "1",
												"3": "1001.9357",
												"4": "88.3206",
												"5": "1563.3138",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.43",
												"10": "199997.83"
											},
											{
												"0": "84fa64aa",
												"1": "84fdf89a",
												"2": "1",
												"3": "1012.43085",
												"4": "89.02384",
												"5": "1503.5923",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.0",
												"10": "199997.83"
											},
											{
												"0": "84fa64ab",
												"1": "84fdf89b",
												"2": "1",
												"3": "1008.5395",
												"4": "87.019516",
												"5": "1571.4827",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.98",
												"10": "199989.67"
											},
											{
												"0": "84fa64ac",
												"1": "84fdf89c",
												"2": "0",
												"3": "1007.3925",
												"4": "97.16202",
												"5": "1505.9435",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.18",
												"10": "199993.38"
											},
											{
												"0": "84fa64ad",
												"1": "84fdf89d",
												"2": "0",
												"3": "1004.64026",
												"4": "102.458046",
												"5": "1508.5199",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100015.77",
												"10": "199989.33"
											},
											{
												"0": "84fa64ae",
												"1": "84fdf89e",
												"2": "0",
												"3": "998.20935",
												"4": "80.29037",
												"5": "1558.2333",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99997.99",
												"10": "199993.75"
											},
											{
												"0": "84fa64af",
												"1": "84fdf89f",
												"2": "0",
												"3": "1003.738",
												"4": "112.48369",
												"5": "1506.0624",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.79",
												"10": "200004.11"
											},
											{
												"0": "84fa64b0",
												"1": "84fdf8a0",
												"2": "0",
												"3": "1007.7914",
												"4": "112.905785",
												"5": "1511.4904",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.055",
												"10": "199993.11"
											},
											{
												"0": "84fa64b1",
												"1": "84fdf8a1",
												"2": "0",
												"3": "1002.2377",
												"4": "98.32226",
												"5": "1510.3547",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99992.59",
												"10": "200003.05"
											},
											{
												"0": "84fa64b2",
												"1": "84fdf8a2",
												"2": "0",
												"3": "1017.6604",
												"4": "92.98484",
												"5": "1515.3489",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100002.36",
												"10": "200000.33"
											},
											{
												"0": "84fa64b3",
												"1": "84fdf8a3",
												"2": "1",
												"3": "1011.26807",
												"4": "101.29453",
												"5": "1508.498",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.46",
												"10": "199995.48"
											},
											{
												"0": "84fa64b4",
												"1": "84fdf8a4",
												"2": "0",
												"3": "1012.5232",
												"4": "101.29103",
												"5": "1506.6415",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100009.22",
												"10": "199992.0"
											},
											{
												"0": "84fa64b5",
												"1": "84fdf8a5",
												"2": "0",
												"3": "1009.1596",
												"4": "122.37572",
												"5": "1570.8654",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100022.88",
												"10": "199980.6"
											},
											{
												"0": "84fa64b6",
												"1": "84fdf8a6",
												"2": "1",
												"3": "1009.58704",
												"4": "81.81034",
												"5": "1509.3142",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.24",
												"10": "199998.42"
											},
											{
												"0": "84fa64b7",
												"1": "84fdf8a7",
												"2": "0",
												"3": "1015.1559",
												"4": "99.2604",
												"5": "1505.3279",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.09",
												"10": "199987.42"
											},
											{
												"0": "84fa64b8",
												"1": "84fdf8a8",
												"2": "0",
												"3": "1012.00397",
												"4": "104.54579",
												"5": "1569.3527",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99993.77",
												"10": "200000.14"
											},
											{
												"0": "84fa64b9",
												"1": "84fdf8a9",
												"2": "0",
												"3": "997.94086",
												"4": "118.29181",
												"5": "1512.0386",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.31",
												"10": "199995.4"
											},
											{
												"0": "84fa64ba",
												"1": "84fdf8aa",
												"2": "1",
												"3": "1009.4436",
												"4": "105.51477",
												"5": "1571.0598",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.16",
												"10": "199993.3"
											},
											{
												"0": "84fa64bb",
												"1": "84fdf8ab",
												"2": "1",
												"3": "999.6291",
												"4": "123.52474",
												"5": "1565.177",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.34",
												"10": "199993.1"
											},
											{
												"0": "84fa64bc",
												"1": "84fdf8ac",
												"2": "1",
												"3": "1009.4627",
												"4": "89.517166",
												"5": "1571.8093",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.03",
												"10": "199991.77"
											},
											{
												"0": "84fa64bd",
												"1": "84fdf8ad",
												"2": "0",
												"3": "1009.25653",
												"4": "103.44313",
												"5": "1509.4144",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.12",
												"10": "199995.08"
											},
											{
												"0": "84fa64be",
												"1": "84fdf8ae",
												"2": "1",
												"3": "1006.4792",
												"4": "90.08655",
												"5": "1507.7379",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99994.07",
												"10": "199994.64"
											},
											{
												"0": "84fa64bf",
												"1": "84fdf8af",
												"2": "1",
												"3": "1010.3139",
												"4": "112.53357",
												"5": "1515.9552",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.02",
												"10": "199995.72"
											},
											{
												"0": "84fa64c0",
												"1": "84fdf8b0",
												"2": "0",
												"3": "1004.71185",
												"4": "84.36599",
												"5": "1501.8881",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.02",
												"10": "199988.02"
											},
											{
												"0": "84fa64c1",
												"1": "84fdf8b1",
												"2": "0",
												"3": "1015.6824",
												"4": "94.68691",
												"5": "1574.7777",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100003.875",
												"10": "199995.78"
											},
											{
												"0": "84fa64c2",
												"1": "84fdf8b2",
												"2": "0",
												"3": "1007.58344",
												"4": "93.21509",
												"5": "1505.9427",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100005.875",
												"10": "199999.78"
											},
											{
												"0": "84fa64c3",
												"1": "84fdf8b3",
												"2": "0",
												"3": "1006.4086",
												"4": "106.26978",
												"5": "1509.5304",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.836",
												"10": "199997.28"
											},
											{
												"0": "84fa64c4",
												"1": "84fdf8b4",
												"2": "0",
												"3": "1010.4384",
												"4": "117.380806",
												"5": "1507.5994",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.26",
												"10": "199988.8"
											},
											{
												"0": "84fa64c5",
												"1": "84fdf8b5",
												"2": "0",
												"3": "1007.10626",
												"4": "78.71977",
												"5": "1503.2957",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.19",
												"10": "199986.52"
											},
											{
												"0": "84fa64c6",
												"1": "84fdf8b6",
												"2": "0",
												"3": "1010.4076",
												"4": "103.68044",
												"5": "1503.4684",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.33",
												"10": "199989.97"
											},
											{
												"0": "84fa64c7",
												"1": "84fdf8b7",
												"2": "0",
												"3": "1009.0039",
												"4": "104.883415",
												"5": "1513.1517",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.34",
												"10": "199990.48"
											},
											{
												"0": "84fa64c8",
												"1": "84fdf8b8",
												"2": "1",
												"3": "1006.55365",
												"4": "106.54572",
												"5": "1501.8925",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.57",
												"10": "199997.98"
											},
											{
												"0": "84fa64c9",
												"1": "84fdf8b9",
												"2": "0",
												"3": "1005.61774",
												"4": "112.73441",
												"5": "1515.6567",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.445",
												"10": "200001.19"
											},
											{
												"0": "84fa64ca",
												"1": "84fdf8ba",
												"2": "0",
												"3": "1008.44006",
												"4": "98.79293",
												"5": "1513.2255",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100012.66",
												"10": "199989.64"
											},
											{
												"0": "84fa64cb",
												"1": "84fdf8bb",
												"2": "1",
												"3": "1008.33307",
												"4": "94.65989",
												"5": "1511.3547",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99988.35",
												"10": "199990.0"
											},
											{
												"0": "84fa64cc",
												"1": "84fdf8bc",
												"2": "1",
												"3": "998.92224",
												"4": "115.31623",
												"5": "1502.1134",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.97",
												"10": "199998.61"
											},
											{
												"0": "84fa64cd",
												"1": "84fdf8bd",
												"2": "1",
												"3": "1010.4533",
												"4": "105.69479",
												"5": "1521.4022",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.54",
												"10": "199991.56"
											},
											{
												"0": "84fa64ce",
												"1": "84fdf8be",
												"2": "1",
												"3": "1014.0029",
												"4": "85.8638",
												"5": "1505.329",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.75",
												"10": "199993.06"
											},
											{
												"0": "84fa64cf",
												"1": "84fdf8bf",
												"2": "1",
												"3": "1001.50146",
												"4": "101.298065",
												"5": "1508.0029",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.69",
												"10": "199995.1"
											},
											{
												"0": "84fa64d0",
												"1": "84fdf8c0",
												"2": "0",
												"3": "1003.6182",
												"4": "91.34964",
												"5": "1511.0776",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100005.59",
												"10": "200001.75"
											},
											{
												"0": "84fa64d1",
												"1": "84fdf8c1",
												"2": "0",
												"3": "1002.6487",
												"4": "114.19631",
												"5": "1508.037",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.62",
												"10": "199995.36"
											},
											{
												"0": "84fa64d2",
												"1": "84fdf8c2",
												"2": "0",
												"3": "1014.9519",
												"4": "84.89807",
												"5": "1508.4426",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.42",
												"10": "199991.72"
											},
											{
												"0": "84fa64d3",
												"1": "84fdf8c3",
												"2": "1",
												"3": "1003.65076",
												"4": "99.31223",
												"5": "1522.4877",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99988.625",
												"10": "199986.75"
											},
											{
												"0": "84fa64d4",
												"1": "84fdf8c4",
												"2": "0",
												"3": "1002.1832",
												"4": "89.893745",
												"5": "1512.2396",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.31",
												"10": "200006.61"
											},
											{
												"0": "84fa64d5",
												"1": "84fdf8c5",
												"2": "0",
												"3": "1011.9814",
												"4": "103.86491",
												"5": "1504.6355",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100011.08",
												"10": "199987.5"
											},
											{
												"0": "84fa64d6",
												"1": "84fdf8c6",
												"2": "1",
												"3": "1008.18335",
												"4": "78.24672",
												"5": "1510.042",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.664",
												"10": "200001.36"
											},
											{
												"0": "84fa64d7",
												"1": "84fdf8c7",
												"2": "0",
												"3": "1000.4957",
												"4": "111.92198",
												"5": "1501.8688",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.21",
												"10": "199998.53"
											},
											{
												"0": "84fa64d8",
												"1": "84fdf8c8",
												"2": "0",
												"3": "1020.35016",
												"4": "94.05413",
												"5": "1503.1547",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.98",
												"10": "200003.11"
											},
											{
												"0": "84fa64d9",
												"1": "84fdf8c9",
												"2": "0",
												"3": "1004.6312",
												"4": "110.88973",
												"5": "1507.7959",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.8",
												"10": "199998.6"
											},
											{
												"0": "84fa64da",
												"1": "84fdf8ca",
												"2": "1",
												"3": "1019.2536",
												"4": "87.893166",
												"5": "1508.2699",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.35",
												"10": "199999.03"
											},
											{
												"0": "84fa64db",
												"1": "84fdf8cb",
												"2": "0",
												"3": "1010.90045",
												"4": "114.101326",
												"5": "1572.7993",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.72",
												"10": "199986.45"
											},
											{
												"0": "84fa64dc",
												"1": "84fdf8cc",
												"2": "0",
												"3": "1006.6373",
												"4": "102.71206",
												"5": "1510.9875",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100001.734",
												"10": "199997.02"
											},
											{
												"0": "84fa64dd",
												"1": "84fdf8cd",
												"2": "1",
												"3": "1002.21497",
												"4": "102.98804",
												"5": "1504.2113",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.81",
												"10": "199990.2"
											},
											{
												"0": "84fa64de",
												"1": "84fdf8ce",
												"2": "0",
												"3": "1013.18567",
												"4": "94.219185",
												"5": "1571.3999",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.59",
												"10": "199999.5"
											},
											{
												"0": "84fa64df",
												"1": "84fdf8cf",
												"2": "1",
												"3": "1006.2749",
												"4": "112.54971",
												"5": "1506.9438",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.51",
												"10": "199992.2"
											},
											{
												"0": "84fa64e0",
												"1": "84fdf8d0",
												"2": "1",
												"3": "1009.00104",
												"4": "103.25422",
												"5": "1574.9598",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.75",
												"10": "199998.86"
											},
											{
												"0": "84fa64e1",
												"1": "84fdf8d1",
												"2": "0",
												"3": "998.78534",
												"4": "95.5655",
												"5": "1500.5066",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.34",
												"10": "199996.19"
											},
											{
												"0": "84fa64e2",
												"1": "84fdf8d2",
												"2": "0",
												"3": "1007.06323",
												"4": "89.79913",
												"5": "1522.2515",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100005.875",
												"10": "199997.48"
											},
											{
												"0": "84fa64e3",
												"1": "84fdf8d3",
												"2": "0",
												"3": "1016.8084",
												"4": "86.00668",
												"5": "1508.2917",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100004.38",
												"10": "199994.83"
											},
											{
												"0": "84fa64e4",
												"1": "84fdf8d4",
												"2": "0",
												"3": "1011.6146",
												"4": "100.636536",
												"5": "1507.0726",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.95",
												"10": "200006.23"
											},
											{
												"0": "84fa64e5",
												"1": "84fdf8d5",
												"2": "1",
												"3": "1005.7727",
												"4": "105.760864",
												"5": "1505.9117",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.96",
												"10": "199996.66"
											},
											{
												"0": "84fa64e6",
												"1": "84fdf8d6",
												"2": "1",
												"3": "1002.8862",
												"4": "97.78297",
												"5": "1513.0302",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99989.375",
												"10": "199991.69"
											},
											{
												"0": "84fa64e7",
												"1": "84fdf8d7",
												"2": "0",
												"3": "1010.30115",
												"4": "105.34306",
												"5": "1501.3124",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100010.12",
												"10": "199988.97"
											},
											{
												"0": "84fa64e8",
												"1": "84fdf8d8",
												"2": "1",
												"3": "1016.85126",
												"4": "101.19395",
												"5": "1509.1185",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100001.51",
												"10": "199991.3"
											},
											{
												"0": "84fa64e9",
												"1": "84fdf8d9",
												"2": "0",
												"3": "1007.2613",
												"4": "106.875626",
												"5": "1510.2549",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99992.26",
												"10": "200011.19"
											},
											{
												"0": "84fa64ea",
												"1": "84fdf8da",
												"2": "1",
												"3": "1007.53046",
												"4": "94.370224",
												"5": "1516.9664",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.17",
												"10": "199998.75"
											},
											{
												"0": "84fa64eb",
												"1": "84fdf8db",
												"2": "0",
												"3": "1009.95746",
												"4": "111.29316",
												"5": "1500.0006",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.734",
												"10": "199991.81"
											},
											{
												"0": "84fa64ec",
												"1": "84fdf8dc",
												"2": "1",
												"3": "1008.6233",
												"4": "95.76541",
												"5": "1508.3429",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.6",
												"10": "200000.17"
											},
											{
												"0": "84fa64ed",
												"1": "84fdf8dd",
												"2": "1",
												"3": "1008.31116",
												"4": "89.87333",
												"5": "1510.1357",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.27",
												"10": "199988.88"
											},
											{
												"0": "84fa64ee",
												"1": "84fdf8de",
												"2": "1",
												"3": "1005.7235",
												"4": "100.82195",
												"5": "1560.2867",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.56",
												"10": "199993.81"
											},
											{
												"0": "84fa64ef",
												"1": "84fdf8df",
												"2": "0",
												"3": "1006.16156",
												"4": "99.751076",
												"5": "1519.1659",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100017.164",
												"10": "199988.89"
											},
											{
												"0": "84fa64f0",
												"1": "84fdf8e0",
												"2": "1",
												"3": "1005.7277",
												"4": "102.23034",
												"5": "1574.9989",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.38",
												"10": "200002.56"
											},
											{
												"0": "84fa64f1",
												"1": "84fdf8e1",
												"2": "1",
												"3": "1007.8264",
												"4": "86.4107",
												"5": "1502.9985",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.46",
												"10": "199993.8"
											},
											{
												"0": "84fa64f2",
												"1": "84fdf8e2",
												"2": "1",
												"3": "1014.2985",
												"4": "105.34026",
												"5": "1505.4276",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.79",
												"10": "199997.1"
											},
											{
												"0": "84fa64f3",
												"1": "84fdf8e3",
												"2": "0",
												"3": "1011.2042",
												"4": "107.52047",
												"5": "1502.8585",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.75",
												"10": "199994.6"
											},
											{
												"0": "84fa64f4",
												"1": "84fdf8e4",
												"2": "1",
												"3": "1004.8557",
												"4": "98.490364",
												"5": "1512.0481",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.35",
												"10": "199998.55"
											},
											{
												"0": "84fa64f5",
												"1": "84fdf8e5",
												"2": "0",
												"3": "1005.86334",
												"4": "111.11995",
												"5": "1501.7646",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100006.8",
												"10": "199989.97"
											},
											{
												"0": "84fa64f6",
												"1": "84fdf8e6",
												"2": "0",
												"3": "1012.19745",
												"4": "85.83525",
												"5": "1504.5223",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.55",
												"10": "199998.97"
											},
											{
												"0": "84fa64f7",
												"1": "84fdf8e7",
												"2": "1",
												"3": "1004.6998",
												"4": "111.285805",
												"5": "1571.5046",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.85",
												"10": "199994.66"
											},
											{
												"0": "84fa64f8",
												"1": "84fdf8e8",
												"2": "0",
												"3": "1011.6993",
												"4": "102.319916",
												"5": "1505.3451",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.79",
												"10": "199995.19"
											},
											{
												"0": "84fa64f9",
												"1": "84fdf8e9",
												"2": "1",
												"3": "1002.1378",
												"4": "119.35408",
												"5": "1574.8462",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.13",
												"10": "199994.67"
											},
											{
												"0": "84fa64fa",
												"1": "84fdf8ea",
												"2": "1",
												"3": "1013.07776",
												"4": "105.46514",
												"5": "1508.5156",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.07",
												"10": "200006.78"
											},
											{
												"0": "84fa64fb",
												"1": "84fdf8eb",
												"2": "1",
												"3": "1006.9411",
												"4": "67.332085",
												"5": "1566.7366",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.45",
												"10": "199998.84"
											},
											{
												"0": "84fa64fc",
												"1": "84fdf8ec",
												"2": "0",
												"3": "1003.5015",
												"4": "110.04998",
												"5": "1507.4076",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.95",
												"10": "199987.48"
											},
											{
												"0": "84fa64fd",
												"1": "84fdf8ed",
												"2": "1",
												"3": "1009.78973",
												"4": "95.42557",
												"5": "1505.2633",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99993.54",
												"10": "199997.28"
											},
											{
												"0": "84fa64fe",
												"1": "84fdf8ee",
												"2": "0",
												"3": "1009.48035",
												"4": "101.500084",
												"5": "1500.9158",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.8",
												"10": "200000.25"
											},
											{
												"0": "84fa64ff",
												"1": "84fdf8ef",
												"2": "1",
												"3": "1005.29",
												"4": "103.39943",
												"5": "1515.031",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.7",
												"10": "199995.9"
											},
											{
												"0": "84fa6500",
												"1": "84fdf8f0",
												"2": "0",
												"3": "1005.5608",
												"4": "114.70808",
												"5": "1511.2324",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100001.23",
												"10": "199996.28"
											},
											{
												"0": "84fa6501",
												"1": "84fdf8f1",
												"2": "0",
												"3": "1002.90137",
												"4": "83.56222",
												"5": "1504.983",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100002.77",
												"10": "200002.73"
											},
											{
												"0": "84fb1886",
												"1": "84feabb8",
												"2": "0",
												"3": "1002.515",
												"4": "100.93814",
												"5": "1511.9867",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.33",
												"10": "199995.31"
											},
											{
												"0": "84fb1887",
												"1": "84feabb9",
												"2": "1",
												"3": "1010.24023",
												"4": "88.75027",
												"5": "1506.5083",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.38",
												"10": "199994.02"
											},
											{
												"0": "84fb1888",
												"1": "84feabba",
												"2": "1",
												"3": "1000.89716",
												"4": "110.35057",
												"5": "1514.7688",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.414",
												"10": "199984.12"
											},
											{
												"0": "84fb1889",
												"1": "84feabbb",
												"2": "0",
												"3": "1005.2421",
												"4": "110.58271",
												"5": "1506.5525",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99999.31",
												"10": "200000.38"
											},
											{
												"0": "84fb188a",
												"1": "84feabbc",
												"2": "1",
												"3": "1007.05756",
												"4": "88.29904",
												"5": "1508.3499",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.35",
												"10": "199991.16"
											},
											{
												"0": "84fb188b",
												"1": "84feabbd",
												"2": "0",
												"3": "1014.48096",
												"4": "93.78957",
												"5": "1518.2972",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.06",
												"10": "199990.86"
											},
											{
												"0": "84fb188c",
												"1": "84feabbe",
												"2": "1",
												"3": "1005.7315",
												"4": "108.057755",
												"5": "1521.759",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.99",
												"10": "199999.97"
											},
											{
												"0": "84fb188d",
												"1": "84feabbf",
												"2": "0",
												"3": "1004.4725",
												"4": "85.33201",
												"5": "1513.8011",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.37",
												"10": "199994.16"
											},
											{
												"0": "84fb188e",
												"1": "84feabc0",
												"2": "0",
												"3": "1013.8214",
												"4": "99.05358",
												"5": "1518.2936",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.375",
												"10": "199988.39"
											},
											{
												"0": "84fb188f",
												"1": "84feabc1",
												"2": "0",
												"3": "1007.8627",
												"4": "86.49665",
												"5": "1507.1073",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.086",
												"10": "199994.78"
											},
											{
												"0": "84fb1890",
												"1": "84feabc2",
												"2": "1",
												"3": "1013.291",
												"4": "101.07383",
												"5": "1510.8385",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.34",
												"10": "199992.66"
											},
											{
												"0": "84fb1891",
												"1": "84feabc3",
												"2": "0",
												"3": "1005.74164",
												"4": "108.63317",
												"5": "1502.4822",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.67",
												"10": "199990.28"
											},
											{
												"0": "84fb1892",
												"1": "84feabc4",
												"2": "0",
												"3": "1006.90076",
												"4": "89.052574",
												"5": "1501.8417",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.14",
												"10": "199995.42"
											},
											{
												"0": "84fb1893",
												"1": "84feabc5",
												"2": "1",
												"3": "1003.3695",
												"4": "103.88294",
												"5": "1505.2953",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.56",
												"10": "199997.05"
											},
											{
												"0": "84fb1894",
												"1": "84feabc6",
												"2": "0",
												"3": "1005.2521",
												"4": "114.731445",
												"5": "1506.6913",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.44",
												"10": "200001.7"
											},
											{
												"0": "84fb1895",
												"1": "84feabc7",
												"2": "0",
												"3": "1008.4533",
												"4": "100.835175",
												"5": "1500.1335",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100004.03",
												"10": "200000.58"
											},
											{
												"0": "84fb1896",
												"1": "84feabc8",
												"2": "1",
												"3": "1005.6796",
												"4": "115.95838",
												"5": "1507.9932",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.5",
												"10": "199991.77"
											},
											{
												"0": "84fb1897",
												"1": "84feabc9",
												"2": "1",
												"3": "1010.8787",
												"4": "97.10904",
												"5": "1510.5985",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99993.266",
												"10": "199999.83"
											},
											{
												"0": "84fb1898",
												"1": "84feabca",
												"2": "0",
												"3": "1007.97015",
												"4": "82.73498",
												"5": "1570.2134",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.445",
												"10": "199993.1"
											},
											{
												"0": "84fb1899",
												"1": "84feabcb",
												"2": "1",
												"3": "998.00903",
												"4": "89.69108",
												"5": "1572.7351",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.78",
												"10": "199999.48"
											},
											{
												"0": "84fb189a",
												"1": "84feabcc",
												"2": "0",
												"3": "1011.56134",
												"4": "88.2886",
												"5": "1510.9244",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100009.195",
												"10": "199993.8"
											},
											{
												"0": "84fb189b",
												"1": "84feabcd",
												"2": "0",
												"3": "1007.01385",
												"4": "111.41556",
												"5": "1503.8215",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.72",
												"10": "200002.48"
											},
											{
												"0": "84fb189c",
												"1": "84feabce",
												"2": "1",
												"3": "1015.97156",
												"4": "98.32933",
												"5": "1512.1926",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.914",
												"10": "199992.2"
											},
											{
												"0": "84fb189d",
												"1": "84feabcf",
												"2": "1",
												"3": "1002.7268",
												"4": "112.63464",
												"5": "1562.4456",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.05",
												"10": "199994.77"
											},
											{
												"0": "84fb189e",
												"1": "84feabd0",
												"2": "0",
												"3": "1005.98267",
												"4": "103.31427",
												"5": "1509.3254",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.01",
												"10": "199989.7"
											},
											{
												"0": "84fb189f",
												"1": "84feabd1",
												"2": "0",
												"3": "1001.2929",
												"4": "119.31028",
												"5": "1503.6334",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100010.33",
												"10": "199986.53"
											},
											{
												"0": "84fb18a0",
												"1": "84feabd2",
												"2": "1",
												"3": "1011.49176",
												"4": "91.07985",
												"5": "1503.1062",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99992.87",
												"10": "199999.53"
											},
											{
												"0": "84fb18a1",
												"1": "84feabd3",
												"2": "0",
												"3": "1017.8758",
												"4": "95.012344",
												"5": "1515.8872",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.805",
												"10": "199997.22"
											},
											{
												"0": "84fb18a2",
												"1": "84feabd4",
												"2": "1",
												"3": "1003.9203",
												"4": "109.23808",
												"5": "1504.6075",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.086",
												"10": "199991.72"
											},
											{
												"0": "84fb18a3",
												"1": "84feabd5",
												"2": "1",
												"3": "1007.87573",
												"4": "89.290794",
												"5": "1555.5737",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.79",
												"10": "200000.0"
											},
											{
												"0": "84fb18a4",
												"1": "84feabd6",
												"2": "1",
												"3": "1009.0143",
												"4": "108.89302",
												"5": "1506.4454",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.72",
												"10": "199994.06"
											},
											{
												"0": "84fb18a5",
												"1": "84feabd7",
												"2": "0",
												"3": "1007.98883",
												"4": "114.19361",
												"5": "1513.3903",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.43",
												"10": "199995.48"
											},
											{
												"0": "84fb18a6",
												"1": "84feabd8",
												"2": "1",
												"3": "998.5039",
												"4": "92.921974",
												"5": "1566.466",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.195",
												"10": "199996.84"
											},
											{
												"0": "84fb18a7",
												"1": "84feabd9",
												"2": "1",
												"3": "986.9455",
												"4": "90.41138",
												"5": "1559.9441",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.45",
												"10": "200000.42"
											},
											{
												"0": "84fb18a8",
												"1": "84feabda",
												"2": "0",
												"3": "1008.61176",
												"4": "110.62163",
												"5": "1503.5549",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.46",
												"10": "200002.77"
											},
											{
												"0": "84fb18a9",
												"1": "84feabdb",
												"2": "0",
												"3": "1007.4006",
												"4": "104.66412",
												"5": "1513.2368",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.98",
												"10": "199990.6"
											},
											{
												"0": "84fb18aa",
												"1": "84feabdc",
												"2": "1",
												"3": "1005.5698",
												"4": "96.35725",
												"5": "1513.1472",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.93",
												"10": "199995.3"
											},
											{
												"0": "84fb18ab",
												"1": "84feabdd",
												"2": "0",
												"3": "1010.8013",
												"4": "104.5258",
												"5": "1502.3257",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.63",
												"10": "199991.22"
											},
											{
												"0": "84fb18ac",
												"1": "84feabde",
												"2": "1",
												"3": "1007.2753",
												"4": "104.28342",
												"5": "1513.7872",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.695",
												"10": "199998.19"
											},
											{
												"0": "84fb18ad",
												"1": "84feabdf",
												"2": "0",
												"3": "1004.48303",
												"4": "113.09991",
												"5": "1510.3019",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.04",
												"10": "200002.17"
											},
											{
												"0": "84fb18ae",
												"1": "84feabe0",
												"2": "0",
												"3": "1006.2446",
												"4": "118.39202",
												"5": "1513.1885",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.23",
												"10": "199994.45"
											},
											{
												"0": "84fb18af",
												"1": "84feabe1",
												"2": "1",
												"3": "1005.77246",
												"4": "104.51182",
												"5": "1507.3313",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.63",
												"10": "199996.52"
											},
											{
												"0": "84fb18b0",
												"1": "84feabe2",
												"2": "0",
												"3": "1016.5039",
												"4": "95.53135",
												"5": "1503.895",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "99999.78",
												"10": "199996.97"
											},
											{
												"0": "84fb18b1",
												"1": "84feabe3",
												"2": "1",
												"3": "1001.4021",
												"4": "98.11399",
												"5": "1501.9038",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.586",
												"10": "199994.22"
											},
											{
												"0": "84fb18b2",
												"1": "84feabe4",
												"2": "1",
												"3": "1005.7014",
												"4": "114.35853",
												"5": "1500.123",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99987.51",
												"10": "199995.06"
											},
											{
												"0": "84fb18b3",
												"1": "84feabe5",
												"2": "0",
												"3": "1012.47833",
												"4": "100.292",
												"5": "1507.461",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.25",
												"10": "199992.67"
											},
											{
												"0": "84fb18b4",
												"1": "84feabe6",
												"2": "0",
												"3": "1005.0033",
												"4": "89.32005",
												"5": "1507.4474",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100007.016",
												"10": "199995.33"
											},
											{
												"0": "84fb18b5",
												"1": "84feabe7",
												"2": "1",
												"3": "1005.7192",
												"4": "106.80408",
												"5": "1507.7054",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.65",
												"10": "199989.19"
											},
											{
												"0": "84fb18b6",
												"1": "84feabe8",
												"2": "1",
												"3": "1002.567",
												"4": "89.65934",
												"5": "1511.6207",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.05",
												"10": "199992.34"
											},
											{
												"0": "84fb18b7",
												"1": "84feabe9",
												"2": "1",
												"3": "1008.47675",
												"4": "101.24056",
												"5": "1514.1283",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.09",
												"10": "199990.86"
											},
											{
												"0": "84fb18b8",
												"1": "84feabea",
												"2": "0",
												"3": "1012.73334",
												"4": "96.123665",
												"5": "1515.8445",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.83",
												"10": "199992.08"
											},
											{
												"0": "84fb18b9",
												"1": "84feabeb",
												"2": "1",
												"3": "1006.0402",
												"4": "100.599106",
												"5": "1512.1996",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100003.266",
												"10": "199997.05"
											},
											{
												"0": "84fb18ba",
												"1": "84feabec",
												"2": "0",
												"3": "998.69653",
												"4": "106.25343",
												"5": "1512.4592",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.516",
												"10": "199993.5"
											},
											{
												"0": "84fb18bb",
												"1": "84feabed",
												"2": "0",
												"3": "1009.9991",
												"4": "95.42075",
												"5": "1516.5072",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100007.1",
												"10": "199995.73"
											},
											{
												"0": "84fb18bc",
												"1": "84feabee",
												"2": "0",
												"3": "1014.78766",
												"4": "84.3674",
												"5": "1513.1224",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100006.88",
												"10": "199994.78"
											},
											{
												"0": "84fb18bd",
												"1": "84feabef",
												"2": "1",
												"3": "997.92694",
												"4": "112.46989",
												"5": "1506.3086",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99997.01",
												"10": "199991.81"
											},
											{
												"0": "84fb18be",
												"1": "84feabf0",
												"2": "0",
												"3": "1006.3864",
												"4": "88.358826",
												"5": "1504.7887",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100006.445",
												"10": "199990.6"
											},
											{
												"0": "84fb18bf",
												"1": "84feabf1",
												"2": "0",
												"3": "1011.5688",
												"4": "99.95936",
												"5": "1502.9331",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100004.45",
												"10": "200002.72"
											},
											{
												"0": "84fb18c0",
												"1": "84feabf2",
												"2": "1",
												"3": "1012.06445",
												"4": "91.47781",
												"5": "1515.7916",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.53",
												"10": "199990.52"
											},
											{
												"0": "84fb18c1",
												"1": "84feabf3",
												"2": "1",
												"3": "1016.88403",
												"4": "92.57862",
												"5": "1508.682",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.02",
												"10": "199998.3"
											},
											{
												"0": "84fb18c2",
												"1": "84feabf4",
												"2": "1",
												"3": "1009.75946",
												"4": "101.100624",
												"5": "1506.305",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.66",
												"10": "199995.58"
											},
											{
												"0": "84fb18c3",
												"1": "84feabf5",
												"2": "1",
												"3": "1005.4619",
												"4": "94.49615",
												"5": "1516.3911",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.695",
												"10": "200005.19"
											},
											{
												"0": "84fb18c4",
												"1": "84feabf6",
												"2": "1",
												"3": "1013.86926",
												"4": "97.34967",
												"5": "1511.5132",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99987.83",
												"10": "199995.2"
											},
											{
												"0": "84fb18c5",
												"1": "84feabf7",
												"2": "0",
												"3": "1007.9675",
												"4": "103.58294",
												"5": "1521.8851",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.66",
												"10": "200002.02"
											},
											{
												"0": "84fb18c6",
												"1": "84feabf8",
												"2": "1",
												"3": "1013.18005",
												"4": "102.46774",
												"5": "1511.9645",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.305",
												"10": "200003.11"
											},
											{
												"0": "84fb18c7",
												"1": "84feabf9",
												"2": "1",
												"3": "1004.2593",
												"4": "105.14185",
												"5": "1573.61",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.734",
												"10": "199995.78"
											},
											{
												"0": "84fb18c8",
												"1": "84feabfa",
												"2": "1",
												"3": "1009.17993",
												"4": "107.38293",
												"5": "1514.72",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100002.484",
												"10": "199996.19"
											},
											{
												"0": "84fb18c9",
												"1": "84feabfb",
												"2": "1",
												"3": "1003.1416",
												"4": "115.35302",
												"5": "1509.0726",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.92",
												"10": "199991.23"
											},
											{
												"0": "84fb18ca",
												"1": "84feabfc",
												"2": "1",
												"3": "1014.95184",
												"4": "77.99572",
												"5": "1572.7046",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.22",
												"10": "199994.44"
											},
											{
												"0": "84fb18cb",
												"1": "84feabfd",
												"2": "1",
												"3": "1007.86304",
												"4": "84.602036",
												"5": "1507.0093",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99994.695",
												"10": "199998.4"
											},
											{
												"0": "84fb18cc",
												"1": "84feabfe",
												"2": "0",
												"3": "1005.19617",
												"4": "91.48726",
												"5": "1513.5144",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.19",
												"10": "199995.39"
											},
											{
												"0": "84fb18cd",
												"1": "84feabff",
												"2": "1",
												"3": "1010.15155",
												"4": "101.3792",
												"5": "1513.0101",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.94",
												"10": "199995.64"
											},
											{
												"0": "84fb18ce",
												"1": "84feac00",
												"2": "1",
												"3": "1003.04504",
												"4": "89.036095",
												"5": "1503.598",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.35",
												"10": "199992.83"
											},
											{
												"0": "84fb18cf",
												"1": "84feac01",
												"2": "0",
												"3": "1004.3461",
												"4": "107.3408",
												"5": "1523.1257",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.95",
												"10": "199992.92"
											},
											{
												"0": "84fb18d0",
												"1": "84feac02",
												"2": "1",
												"3": "1004.4993",
												"4": "106.49185",
												"5": "1564.8066",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.53",
												"10": "199998.14"
											},
											{
												"0": "84fb18d1",
												"1": "84feac03",
												"2": "1",
												"3": "1010.63165",
												"4": "103.61299",
												"5": "1562.5807",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.805",
												"10": "199990.48"
											},
											{
												"0": "84fb18d2",
												"1": "84feac04",
												"2": "0",
												"3": "1007.0248",
												"4": "103.63046",
												"5": "1572.8187",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.75",
												"10": "199989.7"
											},
											{
												"0": "84fb18d3",
												"1": "84feac05",
												"2": "0",
												"3": "1002.34503",
												"4": "116.062164",
												"5": "1510.2078",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100005.22",
												"10": "200001.34"
											},
											{
												"0": "84fb18d4",
												"1": "84feac06",
												"2": "1",
												"3": "1002.8026",
												"4": "107.16346",
												"5": "1501.3137",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100000.1",
												"10": "199996.0"
											},
											{
												"0": "84fb18d5",
												"1": "84feac07",
												"2": "0",
												"3": "997.9159",
												"4": "99.98341",
												"5": "1506.8059",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.695",
												"10": "199997.52"
											},
											{
												"0": "84fb18d6",
												"1": "84feac08",
												"2": "0",
												"3": "1011.90137",
												"4": "110.179245",
												"5": "1503.9493",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.88",
												"10": "199989.9"
											},
											{
												"0": "84fb18d7",
												"1": "84feac09",
												"2": "1",
												"3": "1016.32806",
												"4": "102.84475",
												"5": "1571.1727",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99992.164",
												"10": "199989.2"
											},
											{
												"0": "84fb18d8",
												"1": "84feac0a",
												"2": "0",
												"3": "1007.5368",
												"4": "109.15302",
												"5": "1516.983",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.75",
												"10": "199997.8"
											},
											{
												"0": "84fb18d9",
												"1": "84feac0b",
												"2": "0",
												"3": "1001.2707",
												"4": "98.24518",
												"5": "1504.8644",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.93",
												"10": "200004.05"
											},
											{
												"0": "84fb18da",
												"1": "84feac0c",
												"2": "1",
												"3": "1005.3766",
												"4": "101.56357",
												"5": "1506.0281",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.72",
												"10": "199988.3"
											},
											{
												"0": "84fb18db",
												"1": "84feac0d",
												"2": "0",
												"3": "1006.2492",
												"4": "90.01147",
												"5": "1509.1378",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100017.11",
												"10": "199989.4"
											},
											{
												"0": "84fb18dc",
												"1": "84feac0e",
												"2": "1",
												"3": "1006.9419",
												"4": "98.26389",
												"5": "1505.0166",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99997.055",
												"10": "199993.31"
											},
											{
												"0": "84fb18dd",
												"1": "84feac0f",
												"2": "0",
												"3": "1011.37823",
												"4": "96.65543",
												"5": "1504.7515",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100009.56",
												"10": "199999.1"
											},
											{
												"0": "84fb18de",
												"1": "84feac10",
												"2": "1",
												"3": "1012.53217",
												"4": "101.4492",
												"5": "1527.9752",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.53",
												"10": "200002.28"
											},
											{
												"0": "84fb18df",
												"1": "84feac11",
												"2": "1",
												"3": "1004.9831",
												"4": "105.28363",
												"5": "1514.6584",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99991.52",
												"10": "199996.83"
											},
											{
												"0": "84fb18e0",
												"1": "84feac12",
												"2": "0",
												"3": "1012.25726",
												"4": "101.747345",
												"5": "1511.3273",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.1",
												"10": "199998.36"
											},
											{
												"0": "84fb18e1",
												"1": "84feac13",
												"2": "0",
												"3": "1007.9013",
												"4": "108.22072",
												"5": "1504.9849",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.37",
												"10": "199997.78"
											},
											{
												"0": "84fb18e2",
												"1": "84feac14",
												"2": "0",
												"3": "1009.6587",
												"4": "104.83317",
												"5": "1504.4032",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.164",
												"10": "199996.34"
											},
											{
												"0": "84fb18e3",
												"1": "84feac15",
												"2": "1",
												"3": "1007.46405",
												"4": "114.90114",
												"5": "1571.1454",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.375",
												"10": "199988.45"
											},
											{
												"0": "84fb18e4",
												"1": "84feac16",
												"2": "1",
												"3": "1003.34766",
												"4": "113.30181",
												"5": "1574.5857",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99991.55",
												"10": "199990.22"
											},
											{
												"0": "84fb18e5",
												"1": "84feac17",
												"2": "1",
												"3": "1002.347",
												"4": "101.42993",
												"5": "1501.1752",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.88",
												"10": "199996.06"
											},
											{
												"0": "84fb18e6",
												"1": "84feac18",
												"2": "1",
												"3": "1003.28925",
												"4": "115.64995",
												"5": "1511.2598",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.72",
												"10": "199996.83"
											},
											{
												"0": "84fb18e7",
												"1": "84feac19",
												"2": "0",
												"3": "1013.8945",
												"4": "92.234505",
												"5": "1513.6433",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100006.36",
												"10": "199992.23"
											},
											{
												"0": "84fb18e8",
												"1": "84feac1a",
												"2": "0",
												"3": "1014.82446",
												"4": "84.98217",
												"5": "1504.9031",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100003.266",
												"10": "199995.97"
											},
											{
												"0": "84fb18e9",
												"1": "84feac1b",
												"2": "0",
												"3": "1002.5478",
												"4": "114.15289",
												"5": "1517.5914",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99992.74",
												"10": "200003.03"
											},
											{
												"0": "84fb18ea",
												"1": "84feac1c",
												"2": "1",
												"3": "1000.54156",
												"4": "100.599396",
												"5": "1507.0253",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99993.484",
												"10": "199995.56"
											},
											{
												"0": "84fb18eb",
												"1": "84feac1d",
												"2": "0",
												"3": "1020.7815",
												"4": "89.15484",
												"5": "1520.1006",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100004.26",
												"10": "200001.8"
											},
											{
												"0": "84fb18ec",
												"1": "84feac1e",
												"2": "0",
												"3": "1006.2488",
												"4": "110.913536",
												"5": "1508.3082",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100004.65",
												"10": "199996.33"
											},
											{
												"0": "84fb18ed",
												"1": "84feac1f",
												"2": "1",
												"3": "1016.83014",
												"4": "96.487404",
												"5": "1572.867",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100001.2",
												"10": "199995.62"
											},
											{
												"0": "84fb18ee",
												"1": "84feac20",
												"2": "0",
												"3": "999.7873",
												"4": "78.71357",
												"5": "1503.9244",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100003.6",
												"10": "200001.28"
											},
											{
												"0": "84fb18ef",
												"1": "84feac21",
												"2": "1",
												"3": "1008.3724",
												"4": "112.0654",
												"5": "1512.7142",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99985.21",
												"10": "199993.55"
											},
											{
												"0": "84fb18f0",
												"1": "84feac22",
												"2": "1",
												"3": "1003.6676",
												"4": "110.330696",
												"5": "1509.7473",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.48",
												"10": "199993.94"
											},
											{
												"0": "84fb18f1",
												"1": "84feac23",
												"2": "1",
												"3": "1001.5113",
												"4": "109.52284",
												"5": "1510.0833",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.01",
												"10": "199999.2"
											},
											{
												"0": "84fb18f2",
												"1": "84feac24",
												"2": "0",
												"3": "1005.2203",
												"4": "99.335655",
												"5": "1507.8839",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100010.836",
												"10": "199990.31"
											},
											{
												"0": "84fb18f3",
												"1": "84feac25",
												"2": "1",
												"3": "1016.1812",
												"4": "100.27808",
												"5": "1513.6824",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.63",
												"10": "200001.5"
											},
											{
												"0": "84fb18f4",
												"1": "84feac26",
												"2": "0",
												"3": "1014.0884",
												"4": "91.48514",
												"5": "1568.0979",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.055",
												"10": "199985.97"
											},
											{
												"0": "84fb18f5",
												"1": "84feac27",
												"2": "0",
												"3": "1018.5366",
												"4": "99.134544",
												"5": "1513.984",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.14",
												"10": "199991.02"
											},
											{
												"0": "84fb18f6",
												"1": "84feac28",
												"2": "1",
												"3": "1015.29034",
												"4": "77.27453",
												"5": "1500.4323",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.3",
												"10": "199994.28"
											},
											{
												"0": "84fb18f7",
												"1": "84feac29",
												"2": "0",
												"3": "1003.4122",
												"4": "115.98948",
												"5": "1510.4971",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.85",
												"10": "199994.3"
											},
											{
												"0": "84fb18f8",
												"1": "84feac2a",
												"2": "1",
												"3": "1004.5584",
												"4": "82.077194",
												"5": "1501.3417",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99983.95",
												"10": "199990.48"
											},
											{
												"0": "84fb18f9",
												"1": "84feac2b",
												"2": "0",
												"3": "1008.90094",
												"4": "93.83318",
												"5": "1515.8024",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100004.68",
												"10": "199995.88"
											},
											{
												"0": "84fb18fa",
												"1": "84feac2c",
												"2": "0",
												"3": "1007.3081",
												"4": "113.92981",
												"5": "1504.3162",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.14",
												"10": "200002.28"
											},
											{
												"0": "84fb18fb",
												"1": "84feac2d",
												"2": "1",
												"3": "998.46246",
												"4": "96.59304",
												"5": "1509.2512",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.67",
												"10": "199992.92"
											},
											{
												"0": "84fb18fc",
												"1": "84feac2e",
												"2": "1",
												"3": "1006.93463",
												"4": "111.160416",
												"5": "1508.5378",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.17",
												"10": "200000.89"
											},
											{
												"0": "84fb18fd",
												"1": "84feac2f",
												"2": "1",
												"3": "1012.3878",
												"4": "111.44955",
												"5": "1511.5018",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.21",
												"10": "199994.48"
											},
											{
												"0": "84fb18fe",
												"1": "84feac30",
												"2": "1",
												"3": "1016.80786",
												"4": "94.18676",
												"5": "1568.6667",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.79",
												"10": "199994.34"
											},
											{
												"0": "84fb18ff",
												"1": "84feac31",
												"2": "1",
												"3": "1010.3523",
												"4": "102.4879",
												"5": "1512.5052",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.53",
												"10": "199997.92"
											},
											{
												"0": "84fb1900",
												"1": "84feac32",
												"2": "1",
												"3": "999.45905",
												"4": "97.84498",
												"5": "1500.1746",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.94",
												"10": "200001.44"
											},
											{
												"0": "84fb1901",
												"1": "84feac33",
												"2": "0",
												"3": "1009.6804",
												"4": "101.59482",
												"5": "1510.887",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.05",
												"10": "199996.92"
											},
											{
												"0": "84fb1902",
												"1": "84feac34",
												"2": "1",
												"3": "1006.57043",
												"4": "107.58406",
												"5": "1518.8638",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.195",
												"10": "199992.12"
											},
											{
												"0": "84fb1903",
												"1": "84feac35",
												"2": "0",
												"3": "1013.85455",
												"4": "87.48346",
												"5": "1512.8772",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.99",
												"10": "199992.67"
											},
											{
												"0": "84fb1904",
												"1": "84feac36",
												"2": "1",
												"3": "1001.78186",
												"4": "91.32511",
												"5": "1509.6343",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.164",
												"10": "200002.66"
											},
											{
												"0": "84fb1905",
												"1": "84feac37",
												"2": "1",
												"3": "1010.25977",
												"4": "96.58452",
												"5": "1511.3633",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99993.11",
												"10": "199997.7"
											},
											{
												"0": "84fb1906",
												"1": "84feac38",
												"2": "0",
												"3": "1007.4324",
												"4": "96.031815",
												"5": "1511.1613",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100002.17",
												"10": "200004.64"
											},
											{
												"0": "84fb1907",
												"1": "84feac39",
												"2": "1",
												"3": "1006.9325",
												"4": "121.49165",
												"5": "1505.2611",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.31",
												"10": "199995.89"
											},
											{
												"0": "84fb1908",
												"1": "84feac3a",
												"2": "1",
												"3": "1006.578",
												"4": "111.519104",
												"5": "1502.0706",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.64",
												"10": "199997.4"
											},
											{
												"0": "84fb1909",
												"1": "84feac3b",
												"2": "1",
												"3": "997.04846",
												"4": "92.9612",
												"5": "1507.2677",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.43",
												"10": "199994.62"
											},
											{
												"0": "84fb190a",
												"1": "84feac3c",
												"2": "1",
												"3": "1006.54944",
												"4": "101.905815",
												"5": "1504.456",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.48",
												"10": "199996.86"
											},
											{
												"0": "84fb190b",
												"1": "84feac3d",
												"2": "0",
												"3": "1001.5672",
												"4": "101.368065",
												"5": "1508.9032",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.13",
												"10": "199991.31"
											},
											{
												"0": "84fb190c",
												"1": "84feac3e",
												"2": "1",
												"3": "1008.5791",
												"4": "112.122475",
												"5": "1504.8894",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.45",
												"10": "199994.72"
											},
											{
												"0": "84fb190d",
												"1": "84feac3f",
												"2": "1",
												"3": "1017.80524",
												"4": "83.124535",
												"5": "1521.5566",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.555",
												"10": "199995.55"
											},
											{
												"0": "84fb190e",
												"1": "84feac40",
												"2": "0",
												"3": "1000.57916",
												"4": "105.0048",
												"5": "1503.8309",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.14",
												"10": "200003.12"
											},
											{
												"0": "84fb190f",
												"1": "84feac41",
												"2": "0",
												"3": "1001.1938",
												"4": "89.45111",
												"5": "1510.42",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.85",
												"10": "199997.28"
											},
											{
												"0": "84fb1910",
												"1": "84feac42",
												"2": "1",
												"3": "1007.044",
												"4": "113.81246",
												"5": "1505.2808",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.266",
												"10": "199994.36"
											},
											{
												"0": "84fb1911",
												"1": "84feac43",
												"2": "1",
												"3": "1002.4552",
												"4": "120.593124",
												"5": "1574.145",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.74",
												"10": "199993.33"
											},
											{
												"0": "84fb1912",
												"1": "84feac44",
												"2": "0",
												"3": "1006.6277",
												"4": "104.50253",
												"5": "1507.1033",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.29",
												"10": "199996.64"
											},
											{
												"0": "84fb1913",
												"1": "84feac45",
												"2": "0",
												"3": "1002.4104",
												"4": "75.71309",
												"5": "1571.9772",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.58",
												"10": "199991.56"
											},
											{
												"0": "84fb1914",
												"1": "84feac46",
												"2": "1",
												"3": "997.30444",
												"4": "114.152336",
												"5": "1574.0156",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.98",
												"10": "199994.94"
											},
											{
												"0": "84fb1915",
												"1": "84feac47",
												"2": "1",
												"3": "1005.4925",
												"4": "90.52805",
												"5": "1515.3057",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99998.01",
												"10": "199998.39"
											},
											{
												"0": "84fb1916",
												"1": "84feac48",
												"2": "1",
												"3": "999.61584",
												"4": "114.37476",
												"5": "1513.0361",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.01",
												"10": "199995.48"
											},
											{
												"0": "84fb1917",
												"1": "84feac49",
												"2": "0",
												"3": "1010.23773",
												"4": "105.10298",
												"5": "1504.7727",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100005.39",
												"10": "200004.2"
											},
											{
												"0": "84fb1918",
												"1": "84feac4a",
												"2": "1",
												"3": "1008.1083",
												"4": "108.25641",
												"5": "1512.6144",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100004.625",
												"10": "199995.11"
											},
											{
												"0": "84fb1919",
												"1": "84feac4b",
												"2": "0",
												"3": "1004.8888",
												"4": "78.0144",
												"5": "1510.2025",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.87",
												"10": "199999.53"
											},
											{
												"0": "84fb191a",
												"1": "84feac4c",
												"2": "0",
												"3": "1011.29596",
												"4": "107.856026",
												"5": "1513.0483",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.2",
												"10": "200003.19"
											},
											{
												"0": "84fb191b",
												"1": "84feac4d",
												"2": "1",
												"3": "1017.4476",
												"4": "100.57091",
												"5": "1500.5759",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99987.51",
												"10": "199995.75"
											},
											{
												"0": "84fb191c",
												"1": "84feac4e",
												"2": "1",
												"3": "1005.289",
												"4": "100.720146",
												"5": "1503.0352",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.98",
												"10": "199990.78"
											},
											{
												"0": "84fb191d",
												"1": "84feac4f",
												"2": "1",
												"3": "1005.26263",
												"4": "105.18751",
												"5": "1521.9019",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.11",
												"10": "199993.52"
											},
											{
												"0": "84fb191e",
												"1": "84feac50",
												"2": "1",
												"3": "1004.5875",
												"4": "122.91208",
												"5": "1508.3984",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.64",
												"10": "199996.42"
											},
											{
												"0": "84fb191f",
												"1": "84feac51",
												"2": "0",
												"3": "1001.6296",
												"4": "94.55235",
												"5": "1572.381",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.055",
												"10": "199992.62"
											},
											{
												"0": "84fb1920",
												"1": "84feac52",
												"2": "1",
												"3": "1003.69586",
												"4": "87.04193",
												"5": "1513.8242",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.875",
												"10": "199992.67"
											},
											{
												"0": "84fb1921",
												"1": "84feac53",
												"2": "1",
												"3": "1005.24615",
												"4": "74.63907",
												"5": "1571.9767",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.93",
												"10": "199993.55"
											},
											{
												"0": "84fb19be",
												"1": "84feacf0",
												"2": "0",
												"3": "1018.482",
												"4": "85.61327",
												"5": "1508.2451",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.21",
												"10": "199998.11"
											},
											{
												"0": "84fb19bf",
												"1": "84feacf1",
												"2": "0",
												"3": "1004.9263",
												"4": "106.481384",
												"5": "1525.355",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.01",
												"10": "200001.75"
											},
											{
												"0": "84fb19c0",
												"1": "84feacf2",
												"2": "0",
												"3": "1011.1673",
												"4": "91.17541",
												"5": "1516.2101",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100000.375",
												"10": "200006.0"
											},
											{
												"0": "84fb19c1",
												"1": "84feacf3",
												"2": "1",
												"3": "1007.95197",
												"4": "102.39454",
												"5": "1508.3932",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.67",
												"10": "199992.14"
											},
											{
												"0": "84fb19c2",
												"1": "84feacf4",
												"2": "0",
												"3": "1006.12695",
												"4": "94.73046",
												"5": "1503.2319",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.18",
												"10": "199996.84"
											},
											{
												"0": "84fb19c3",
												"1": "84feacf5",
												"2": "1",
												"3": "1007.87646",
												"4": "95.21509",
												"5": "1507.0791",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99987.22",
												"10": "199993.34"
											},
											{
												"0": "84fb19c4",
												"1": "84feacf6",
												"2": "1",
												"3": "1006.77185",
												"4": "107.87877",
												"5": "1518.4608",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99989.37",
												"10": "199991.58"
											},
											{
												"0": "84fb19c5",
												"1": "84feacf7",
												"2": "0",
												"3": "1017.0826",
												"4": "94.97644",
												"5": "1500.5856",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100007.83",
												"10": "199999.73"
											},
											{
												"0": "84fb19c6",
												"1": "84feacf8",
												"2": "0",
												"3": "1002.39056",
												"4": "112.145874",
												"5": "1500.8824",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.195",
												"10": "199996.17"
											},
											{
												"0": "84fb19c7",
												"1": "84feacf9",
												"2": "1",
												"3": "1010.1375",
												"4": "96.658775",
												"5": "1504.4403",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.83",
												"10": "199994.64"
											},
											{
												"0": "84fb19c8",
												"1": "84feacfa",
												"2": "0",
												"3": "1011.35065",
												"4": "106.91032",
												"5": "1511.7976",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.08",
												"10": "199991.69"
											},
											{
												"0": "84fb19c9",
												"1": "84feacfb",
												"2": "0",
												"3": "1012.2866",
												"4": "103.14829",
												"5": "1508.5055",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.445",
												"10": "199991.22"
											},
											{
												"0": "84fb19ca",
												"1": "84feacfc",
												"2": "1",
												"3": "1010.7936",
												"4": "101.7714",
												"5": "1503.068",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99983.32",
												"10": "199993.11"
											},
											{
												"0": "84fb19cb",
												"1": "84feacfd",
												"2": "0",
												"3": "1004.75635",
												"4": "95.919716",
												"5": "1509.1558",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.39",
												"10": "199994.06"
											},
											{
												"0": "84fb19cc",
												"1": "84feacfe",
												"2": "1",
												"3": "1013.4426",
												"4": "105.60898",
												"5": "1519.2394",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.93",
												"10": "199992.72"
											},
											{
												"0": "84fb19cd",
												"1": "84feacff",
												"2": "1",
												"3": "1010.8858",
												"4": "107.11346",
												"5": "1510.0499",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.945",
												"10": "199998.66"
											},
											{
												"0": "84fb19ce",
												"1": "84fead00",
												"2": "0",
												"3": "1010.3358",
												"4": "91.1439",
												"5": "1505.026",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.945",
												"10": "199999.64"
											},
											{
												"0": "84fb19cf",
												"1": "84fead01",
												"2": "0",
												"3": "1009.3987",
												"4": "92.09902",
												"5": "1502.6775",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100009.01",
												"10": "199990.05"
											},
											{
												"0": "84fb19d0",
												"1": "84fead02",
												"2": "1",
												"3": "998.01245",
												"4": "99.17825",
												"5": "1505.5725",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.1",
												"10": "199995.23"
											},
											{
												"0": "84fb19d1",
												"1": "84fead03",
												"2": "1",
												"3": "1014.13776",
												"4": "103.72688",
												"5": "1513.975",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.13",
												"10": "199994.23"
											},
											{
												"0": "84fb19d2",
												"1": "84fead04",
												"2": "0",
												"3": "1010.9819",
												"4": "106.74328",
												"5": "1503.1864",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.4",
												"10": "199990.22"
											},
											{
												"0": "84fb19d3",
												"1": "84fead05",
												"2": "1",
												"3": "1009.3234",
												"4": "100.61408",
												"5": "1507.4734",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.15",
												"10": "199992.92"
											},
											{
												"0": "84fb19d4",
												"1": "84fead06",
												"2": "0",
												"3": "1001.89526",
												"4": "115.54801",
												"5": "1516.7334",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.72",
												"10": "199994.55"
											},
											{
												"0": "84fb19d5",
												"1": "84fead07",
												"2": "1",
												"3": "997.3922",
												"4": "113.81722",
												"5": "1514.2124",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.15",
												"10": "199994.69"
											},
											{
												"0": "84fb19d6",
												"1": "84fead08",
												"2": "1",
												"3": "1010.8201",
												"4": "101.99456",
												"5": "1504.5647",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.45",
												"10": "199999.69"
											},
											{
												"0": "84fb19d7",
												"1": "84fead09",
												"2": "0",
												"3": "1010.7245",
												"4": "105.65025",
												"5": "1508.1958",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.67",
												"10": "199996.7"
											},
											{
												"0": "84fb19d8",
												"1": "84fead0a",
												"2": "0",
												"3": "1008.73584",
												"4": "87.64626",
												"5": "1502.4166",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100002.195",
												"10": "199997.44"
											},
											{
												"0": "84fb19d9",
												"1": "84fead0b",
												"2": "1",
												"3": "1024.3064",
												"4": "101.02505",
												"5": "1507.7804",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.95",
												"10": "199991.94"
											},
											{
												"0": "84fb19da",
												"1": "84fead0c",
												"2": "0",
												"3": "1009.3591",
												"4": "106.53698",
												"5": "1503.7904",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.2",
												"10": "199997.33"
											},
											{
												"0": "84fb19db",
												"1": "84fead0d",
												"2": "0",
												"3": "1009.3427",
												"4": "89.41431",
												"5": "1503.3279",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.42",
												"10": "199990.34"
											},
											{
												"0": "84fb19dc",
												"1": "84fead0e",
												"2": "0",
												"3": "1017.53186",
												"4": "96.783676",
												"5": "1574.5087",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100011.24",
												"10": "199987.06"
											},
											{
												"0": "84fb19dd",
												"1": "84fead0f",
												"2": "1",
												"3": "1005.59015",
												"4": "106.306526",
												"5": "1569.5471",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.35",
												"10": "200003.95"
											},
											{
												"0": "84fb19de",
												"1": "84fead10",
												"2": "0",
												"3": "1005.0484",
												"4": "96.51889",
												"5": "1510.218",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.65",
												"10": "199994.86"
											},
											{
												"0": "84fb19df",
												"1": "84fead11",
												"2": "1",
												"3": "1005.3029",
												"4": "113.34161",
												"5": "1507.0066",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.39",
												"10": "199998.47"
											},
											{
												"0": "84fb19e0",
												"1": "84fead12",
												"2": "0",
												"3": "1013.4768",
												"4": "97.42336",
												"5": "1516.1542",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100011.4",
												"10": "199989.72"
											},
											{
												"0": "84fb19e1",
												"1": "84fead13",
												"2": "1",
												"3": "1011.17535",
												"4": "99.78195",
												"5": "1504.7797",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.234",
												"10": "199994.06"
											},
											{
												"0": "84fb19e2",
												"1": "84fead14",
												"2": "1",
												"3": "1002.0814",
												"4": "95.367775",
												"5": "1508.4019",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.12",
												"10": "199992.73"
											},
											{
												"0": "84fb19e3",
												"1": "84fead15",
												"2": "0",
												"3": "1008.59625",
												"4": "105.41431",
												"5": "1505.2113",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99998.516",
												"10": "200002.84"
											},
											{
												"0": "84fb19e4",
												"1": "84fead16",
												"2": "1",
												"3": "991.946",
												"4": "92.82633",
												"5": "1501.996",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.555",
												"10": "200001.11"
											},
											{
												"0": "84fb19e5",
												"1": "84fead17",
												"2": "1",
												"3": "1002.1131",
												"4": "97.84364",
												"5": "1506.8761",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.27",
												"10": "199997.73"
											},
											{
												"0": "84fb19e6",
												"1": "84fead18",
												"2": "1",
												"3": "1007.0589",
												"4": "105.8241",
												"5": "1517.0671",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99989.58",
												"10": "199989.84"
											},
											{
												"0": "84fb19e7",
												"1": "84fead19",
												"2": "0",
												"3": "999.7757",
												"4": "98.94086",
												"5": "1524.064",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.55",
												"10": "199992.42"
											},
											{
												"0": "84fb19e8",
												"1": "84fead1a",
												"2": "1",
												"3": "999.65265",
												"4": "113.159004",
												"5": "1515.3451",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.8",
												"10": "199994.1"
											},
											{
												"0": "84fb19e9",
												"1": "84fead1b",
												"2": "1",
												"3": "1005.0906",
												"4": "95.00037",
												"5": "1504.6088",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99988.92",
												"10": "199994.95"
											},
											{
												"0": "84fb19ea",
												"1": "84fead1c",
												"2": "1",
												"3": "1003.85376",
												"4": "118.77819",
												"5": "1570.5259",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.15",
												"10": "199993.53"
											},
											{
												"0": "84fb19eb",
												"1": "84fead1d",
												"2": "0",
												"3": "1009.8063",
												"4": "111.91913",
												"5": "1508.0912",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.5",
												"10": "199988.3"
											},
											{
												"0": "84fb19ec",
												"1": "84fead1e",
												"2": "0",
												"3": "1006.55566",
												"4": "95.6765",
												"5": "1574.3987",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100003.3",
												"10": "199988.52"
											},
											{
												"0": "84fb19ed",
												"1": "84fead1f",
												"2": "0",
												"3": "1009.32367",
												"4": "104.2379",
												"5": "1505.2944",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.66",
												"10": "199996.84"
											},
											{
												"0": "84fb19ee",
												"1": "84fead20",
												"2": "0",
												"3": "1011.28906",
												"4": "102.02071",
												"5": "1512.4146",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.336",
												"10": "200000.69"
											},
											{
												"0": "84fb19ef",
												"1": "84fead21",
												"2": "1",
												"3": "1008.35345",
												"4": "98.31365",
												"5": "1509.9261",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99994.805",
												"10": "200002.69"
											},
											{
												"0": "84fb19f0",
												"1": "84fead22",
												"2": "1",
												"3": "1006.6927",
												"4": "99.57894",
												"5": "1503.4271",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.86",
												"10": "199995.36"
											},
											{
												"0": "84fb19f1",
												"1": "84fead23",
												"2": "1",
												"3": "1014.8746",
												"4": "87.15329",
												"5": "1502.4806",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.086",
												"10": "199998.61"
											},
											{
												"0": "84fb19f2",
												"1": "84fead24",
												"2": "1",
												"3": "1000.96326",
												"4": "112.44559",
												"5": "1570.1407",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.6",
												"10": "199990.02"
											},
											{
												"0": "84fb19f3",
												"1": "84fead25",
												"2": "0",
												"3": "1003.70966",
												"4": "119.47017",
												"5": "1574.12",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.23",
												"10": "199988.81"
											},
											{
												"0": "84fb19f4",
												"1": "84fead26",
												"2": "1",
												"3": "1010.0124",
												"4": "105.8892",
												"5": "1572.2517",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.55",
												"10": "199994.34"
											},
											{
												"0": "84fb19f5",
												"1": "84fead27",
												"2": "1",
												"3": "995.966",
												"4": "83.83184",
												"5": "1550.2578",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.61",
												"10": "199997.03"
											},
											{
												"0": "84fb19f6",
												"1": "84fead28",
												"2": "1",
												"3": "1007.95374",
												"4": "103.68084",
												"5": "1513.859",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99993.695",
												"10": "199998.2"
											},
											{
												"0": "84fb19f7",
												"1": "84fead29",
												"2": "0",
												"3": "1004.2113",
												"4": "120.087975",
												"5": "1512.0847",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100008.016",
												"10": "199992.05"
											},
											{
												"0": "84fb19f8",
												"1": "84fead2a",
												"2": "0",
												"3": "1003.5197",
												"4": "95.91771",
												"5": "1513.5865",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.1",
												"10": "199992.66"
											},
											{
												"0": "84fb19f9",
												"1": "84fead2b",
												"2": "0",
												"3": "1014.4698",
												"4": "93.25638",
												"5": "1518.3075",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.03",
												"10": "199990.36"
											},
											{
												"0": "84fb19fa",
												"1": "84fead2c",
												"2": "0",
												"3": "1011.3951",
												"4": "104.0526",
												"5": "1506.6436",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.516",
												"10": "199990.97"
											},
											{
												"0": "84fb19fb",
												"1": "84fead2d",
												"2": "0",
												"3": "1006.44556",
												"4": "97.86042",
												"5": "1519.7876",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.15",
												"10": "199997.03"
											},
											{
												"0": "84fb19fc",
												"1": "84fead2e",
												"2": "0",
												"3": "998.0975",
												"4": "126.259285",
												"5": "1571.581",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.43",
												"10": "199997.97"
											},
											{
												"0": "84fb19fd",
												"1": "84fead2f",
												"2": "0",
												"3": "1009.0829",
												"4": "96.782646",
												"5": "1509.7952",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.125",
												"10": "199993.94"
											},
											{
												"0": "84fb19fe",
												"1": "84fead30",
												"2": "1",
												"3": "1016.067",
												"4": "93.63412",
												"5": "1523.2623",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.37",
												"10": "199997.55"
											},
											{
												"0": "84fb19ff",
												"1": "84fead31",
												"2": "1",
												"3": "1009.7058",
												"4": "107.58333",
												"5": "1503.8177",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.49",
												"10": "199996.67"
											},
											{
												"0": "84fb1a00",
												"1": "84fead32",
												"2": "0",
												"3": "1006.8429",
												"4": "107.934494",
												"5": "1501.719",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100009.81",
												"10": "199991.47"
											},
											{
												"0": "84fb1a01",
												"1": "84fead33",
												"2": "1",
												"3": "999.97034",
												"4": "98.3067",
												"5": "1512.5195",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "99995.71",
												"10": "199995.19"
											},
											{
												"0": "84fb1a02",
												"1": "84fead34",
												"2": "1",
												"3": "1003.96375",
												"4": "104.931694",
												"5": "1506.2836",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99994.28",
												"10": "199995.53"
											},
											{
												"0": "84fb1a03",
												"1": "84fead35",
												"2": "1",
												"3": "1004.0109",
												"4": "85.06968",
												"5": "1563.0015",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.26",
												"10": "199994.77"
											},
											{
												"0": "84fb1a04",
												"1": "84fead36",
												"2": "1",
												"3": "1009.9958",
												"4": "85.93319",
												"5": "1504.6383",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.586",
												"10": "199999.31"
											},
											{
												"0": "84fb1a05",
												"1": "84fead37",
												"2": "0",
												"3": "1008.94116",
												"4": "84.22714",
												"5": "1501.0367",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100010.26",
												"10": "199992.72"
											},
											{
												"0": "84fb1a06",
												"1": "84fead38",
												"2": "1",
												"3": "1000.44904",
												"4": "92.91808",
												"5": "1507.3303",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.59",
												"10": "199994.7"
											},
											{
												"0": "84fb1a07",
												"1": "84fead39",
												"2": "1",
												"3": "1006.93805",
												"4": "92.54758",
												"5": "1500.7189",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.125",
												"10": "199997.19"
											},
											{
												"0": "84fb1a08",
												"1": "84fead3a",
												"2": "1",
												"3": "1011.0697",
												"4": "111.61335",
												"5": "1514.1329",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.305",
												"10": "199993.62"
											},
											{
												"0": "84fb1a09",
												"1": "84fead3b",
												"2": "1",
												"3": "1008.4517",
												"4": "94.40393",
												"5": "1500.0533",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.28",
												"10": "200001.86"
											},
											{
												"0": "84fb1a0a",
												"1": "84fead3c",
												"2": "1",
												"3": "1007.4834",
												"4": "93.39283",
												"5": "1512.8899",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.266",
												"10": "199994.16"
											},
											{
												"0": "84fb1a0b",
												"1": "84fead3d",
												"2": "0",
												"3": "1010.2948",
												"4": "116.66481",
												"5": "1504.0908",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.34",
												"10": "199993.78"
											},
											{
												"0": "84fb1a0c",
												"1": "84fead3e",
												"2": "1",
												"3": "1011.904",
												"4": "81.71621",
												"5": "1514.059",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.23",
												"10": "199997.38"
											},
											{
												"0": "84fb1a0d",
												"1": "84fead3f",
												"2": "0",
												"3": "1011.3655",
												"4": "85.10612",
												"5": "1574.2533",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100000.13",
												"10": "200000.61"
											},
											{
												"0": "84fb1a0e",
												"1": "84fead40",
												"2": "1",
												"3": "1018.5942",
												"4": "93.76567",
												"5": "1518.1125",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.984",
												"10": "199997.05"
											},
											{
												"0": "84fb1a0f",
												"1": "84fead41",
												"2": "0",
												"3": "1012.1205",
												"4": "110.54364",
												"5": "1511.4629",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.96",
												"10": "199996.34"
											},
											{
												"0": "84fb1a10",
												"1": "84fead42",
												"2": "1",
												"3": "1007.8676",
												"4": "75.36882",
												"5": "1501.9203",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.984",
												"10": "199994.23"
											},
											{
												"0": "84fb1a11",
												"1": "84fead43",
												"2": "1",
												"3": "1018.7265",
												"4": "90.38747",
												"5": "1510.6168",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.05",
												"10": "199992.11"
											},
											{
												"0": "84fb1a12",
												"1": "84fead44",
												"2": "0",
												"3": "991.8949",
												"4": "96.62685",
												"5": "1506.5027",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.984",
												"10": "199997.25"
											},
											{
												"0": "84fb1a13",
												"1": "84fead45",
												"2": "1",
												"3": "1011.5589",
												"4": "107.32213",
												"5": "1511.8983",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.8",
												"10": "199992.45"
											},
											{
												"0": "84fb1a14",
												"1": "84fead46",
												"2": "1",
												"3": "1012.2399",
												"4": "82.924385",
												"5": "1504.3966",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100001.09",
												"10": "199998.98"
											},
											{
												"0": "84fb1a15",
												"1": "84fead47",
												"2": "1",
												"3": "1006.10297",
												"4": "104.38834",
												"5": "1508.3743",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.38",
												"10": "199991.31"
											},
											{
												"0": "84fb1a16",
												"1": "84fead48",
												"2": "0",
												"3": "1009.08887",
												"4": "89.61005",
												"5": "1505.3652",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.42",
												"10": "199989.1"
											},
											{
												"0": "84fb1a17",
												"1": "84fead49",
												"2": "1",
												"3": "1013.0488",
												"4": "109.32493",
												"5": "1506.2588",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.83",
												"10": "200002.67"
											},
											{
												"0": "84fb1a18",
												"1": "84fead4a",
												"2": "0",
												"3": "1010.182",
												"4": "102.14313",
												"5": "1510.1368",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.805",
												"10": "200001.7"
											},
											{
												"0": "84fb1a19",
												"1": "84fead4b",
												"2": "1",
												"3": "1012.08264",
												"4": "101.409225",
												"5": "1506.3878",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.82",
												"10": "199992.64"
											},
											{
												"0": "84fb1a1a",
												"1": "84fead4c",
												"2": "0",
												"3": "1012.74445",
												"4": "89.22394",
												"5": "1519.582",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.875",
												"10": "199995.66"
											},
											{
												"0": "84fb1a1b",
												"1": "84fead4d",
												"2": "1",
												"3": "1003.1095",
												"4": "90.982445",
												"5": "1501.3821",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.83",
												"10": "199994.98"
											},
											{
												"0": "84fb1a1c",
												"1": "84fead4e",
												"2": "0",
												"3": "999.57367",
												"4": "84.101006",
												"5": "1506.9904",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.42",
												"10": "200001.0"
											},
											{
												"0": "84fb1a1d",
												"1": "84fead4f",
												"2": "0",
												"3": "1002.14844",
												"4": "89.44758",
												"5": "1512.2394",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.58",
												"10": "199998.62"
											},
											{
												"0": "84fb1a1e",
												"1": "84fead50",
												"2": "0",
												"3": "1007.73047",
												"4": "96.33567",
												"5": "1516.0443",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.266",
												"10": "199996.34"
											},
											{
												"0": "84fb1a1f",
												"1": "84fead51",
												"2": "0",
												"3": "1010.9067",
												"4": "80.69493",
												"5": "1570.3602",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.55",
												"10": "200002.34"
											},
											{
												"0": "84fb1a20",
												"1": "84fead52",
												"2": "0",
												"3": "1009.6053",
												"4": "79.75067",
												"5": "1502.1816",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100011.17",
												"10": "199989.88"
											},
											{
												"0": "84fb1a21",
												"1": "84fead53",
												"2": "1",
												"3": "1004.56635",
												"4": "106.853806",
												"5": "1574.1313",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.04",
												"10": "199988.78"
											},
											{
												"0": "84fb1a22",
												"1": "84fead54",
												"2": "1",
												"3": "1014.785",
												"4": "88.823784",
												"5": "1516.2473",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.586",
												"10": "199995.84"
											},
											{
												"0": "84fb1a23",
												"1": "84fead55",
												"2": "0",
												"3": "1004.6148",
												"4": "114.50366",
												"5": "1574.526",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.055",
												"10": "199990.17"
											},
											{
												"0": "84fb1a24",
												"1": "84fead56",
												"2": "0",
												"3": "1013.634",
												"4": "97.70729",
												"5": "1507.1991",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100003.66",
												"10": "199998.97"
											},
											{
												"0": "84fb1a25",
												"1": "84fead57",
												"2": "1",
												"3": "1006.1385",
												"4": "95.78221",
												"5": "1569.423",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.18",
												"10": "199998.05"
											},
											{
												"0": "84fb1a26",
												"1": "84fead58",
												"2": "1",
												"3": "1010.8397",
												"4": "103.71661",
												"5": "1507.6437",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.17",
												"10": "199995.55"
											},
											{
												"0": "84fb1a27",
												"1": "84fead59",
												"2": "1",
												"3": "998.6513",
												"4": "117.7919",
												"5": "1567.8054",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.836",
												"10": "199997.2"
											},
											{
												"0": "84fb1a28",
												"1": "84fead5a",
												"2": "1",
												"3": "1003.5839",
												"4": "89.74833",
												"5": "1517.6816",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.29",
												"10": "199996.39"
											},
											{
												"0": "84fb1a29",
												"1": "84fead5b",
												"2": "1",
												"3": "1004.09863",
												"4": "112.19622",
												"5": "1514.0541",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.16",
												"10": "199998.38"
											},
											{
												"0": "84fb1a2a",
												"1": "84fead5c",
												"2": "1",
												"3": "1004.18",
												"4": "108.70166",
												"5": "1507.5836",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.484",
												"10": "199989.88"
											},
											{
												"0": "84fb1a2b",
												"1": "84fead5d",
												"2": "1",
												"3": "1010.1681",
												"4": "99.80735",
												"5": "1510.592",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.13",
												"10": "199992.36"
											},
											{
												"0": "84fb1a2c",
												"1": "84fead5e",
												"2": "1",
												"3": "1005.8142",
												"4": "117.56125",
												"5": "1513.3035",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.26",
												"10": "199999.06"
											},
											{
												"0": "84fb1a2d",
												"1": "84fead5f",
												"2": "0",
												"3": "1011.0446",
												"4": "98.039246",
												"5": "1512.4332",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100001.805",
												"10": "199996.6"
											},
											{
												"0": "84fb1a2e",
												"1": "84fead60",
												"2": "1",
												"3": "997.67957",
												"4": "78.32801",
												"5": "1503.335",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99990.3",
												"10": "199994.38"
											},
											{
												"0": "84fb1a2f",
												"1": "84fead61",
												"2": "1",
												"3": "1005.19806",
												"4": "103.17501",
												"5": "1514.5505",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.164",
												"10": "199993.39"
											},
											{
												"0": "84fb1a30",
												"1": "84fead62",
												"2": "1",
												"3": "1007.4803",
												"4": "113.16496",
												"5": "1508.3145",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.03",
												"10": "199995.47"
											},
											{
												"0": "84fb1a31",
												"1": "84fead63",
												"2": "0",
												"3": "1010.4151",
												"4": "86.721565",
												"5": "1505.0426",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.33",
												"10": "199994.5"
											},
											{
												"0": "84fb1a32",
												"1": "84fead64",
												"2": "0",
												"3": "1005.6089",
												"4": "101.966705",
												"5": "1517.2861",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.125",
												"10": "199997.39"
											},
											{
												"0": "84fb1a33",
												"1": "84fead65",
												"2": "0",
												"3": "1004.1967",
												"4": "110.36908",
												"5": "1508.076",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.02",
												"10": "199989.34"
											},
											{
												"0": "84fb1a34",
												"1": "84fead66",
												"2": "0",
												"3": "1010.1948",
												"4": "91.9648",
												"5": "1504.8917",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.13",
												"10": "200000.73"
											},
											{
												"0": "84fb1a35",
												"1": "84fead67",
												"2": "1",
												"3": "1002.3673",
												"4": "109.98277",
												"5": "1508.9827",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.43",
												"10": "199985.03"
											},
											{
												"0": "84fb1a36",
												"1": "84fead68",
												"2": "0",
												"3": "1000.518",
												"4": "94.13908",
												"5": "1507.9877",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.28",
												"10": "199991.0"
											},
											{
												"0": "84fb1a37",
												"1": "84fead69",
												"2": "1",
												"3": "1006.1206",
												"4": "112.05509",
												"5": "1573.5244",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.66",
												"10": "199993.55"
											},
											{
												"0": "84fb1a38",
												"1": "84fead6a",
												"2": "1",
												"3": "1016.9497",
												"4": "102.76056",
												"5": "1563.1079",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.12",
												"10": "199994.52"
											},
											{
												"0": "84fb1a39",
												"1": "84fead6b",
												"2": "0",
												"3": "1003.913",
												"4": "112.8901",
												"5": "1511.3185",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100006.04",
												"10": "199995.14"
											},
											{
												"0": "84fb1a3a",
												"1": "84fead6c",
												"2": "1",
												"3": "1006.011",
												"4": "107.76482",
												"5": "1515.3362",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99991.09",
												"10": "199995.75"
											},
											{
												"0": "84fb1a3b",
												"1": "84fead6d",
												"2": "0",
												"3": "1010.2704",
												"4": "99.52743",
												"5": "1513.3978",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.56",
												"10": "199996.78"
											},
											{
												"0": "84fb1a3c",
												"1": "84fead6e",
												"2": "0",
												"3": "999.401",
												"4": "103.13848",
												"5": "1503.8582",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.664",
												"10": "199997.88"
											},
											{
												"0": "84fb1a3d",
												"1": "84fead6f",
												"2": "0",
												"3": "1006.8864",
												"4": "118.47522",
												"5": "1507.2566",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100005.68",
												"10": "199998.7"
											},
											{
												"0": "84fb1a3e",
												"1": "84fead70",
												"2": "1",
												"3": "1003.5037",
												"4": "87.30777",
												"5": "1512.4465",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.89",
												"10": "199996.27"
											},
											{
												"0": "84fb1a3f",
												"1": "84fead71",
												"2": "1",
												"3": "1017.15814",
												"4": "89.257545",
												"5": "1507.692",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.97",
												"10": "199988.05"
											},
											{
												"0": "84fb1a40",
												"1": "84fead72",
												"2": "1",
												"3": "1003.38684",
												"4": "88.657074",
												"5": "1518.0256",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.3",
												"10": "199997.89"
											},
											{
												"0": "84fb1a41",
												"1": "84fead73",
												"2": "1",
												"3": "1003.73895",
												"4": "112.159",
												"5": "1574.1375",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.44",
												"10": "199992.48"
											},
											{
												"0": "84fb1a42",
												"1": "84fead74",
												"2": "0",
												"3": "1002.5523",
												"4": "106.02032",
												"5": "1508.7603",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.02",
												"10": "199992.9"
											},
											{
												"0": "84fb1a43",
												"1": "84fead75",
												"2": "1",
												"3": "1005.9684",
												"4": "96.82164",
												"5": "1506.2212",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100005.03",
												"10": "199994.47"
											},
											{
												"0": "84fb1a44",
												"1": "84fead76",
												"2": "1",
												"3": "1008.00116",
												"4": "116.40569",
												"5": "1572.339",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.625",
												"10": "199997.86"
											},
											{
												"0": "84fb1a45",
												"1": "84fead77",
												"2": "0",
												"3": "1011.39716",
												"4": "109.22824",
												"5": "1508.7622",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100011.84",
												"10": "199992.95"
											},
											{
												"0": "84fb1a46",
												"1": "84fead78",
												"2": "1",
												"3": "1012.4975",
												"4": "89.584694",
												"5": "1518.0991",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.67",
												"10": "199994.25"
											},
											{
												"0": "84fb1a47",
												"1": "84fead79",
												"2": "0",
												"3": "995.0992",
												"4": "94.63907",
												"5": "1568.3214",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100002.03",
												"10": "199998.69"
											},
											{
												"0": "84fb1a48",
												"1": "84fead7a",
												"2": "1",
												"3": "1005.37164",
												"4": "101.850945",
												"5": "1518.9855",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100002.47",
												"10": "199998.31"
											},
											{
												"0": "84fb1a49",
												"1": "84fead7b",
												"2": "0",
												"3": "1005.55707",
												"4": "91.16962",
												"5": "1505.6425",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.26",
												"10": "200001.05"
											},
											{
												"0": "84fb1a4a",
												"1": "84fead7c",
												"2": "0",
												"3": "1007.8759",
												"4": "103.43846",
												"5": "1515.903",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100008.414",
												"10": "199999.64"
											},
											{
												"0": "84fb1a4b",
												"1": "84fead7d",
												"2": "1",
												"3": "1006.5065",
												"4": "106.46773",
												"5": "1573.0348",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.445",
												"10": "200001.25"
											},
											{
												"0": "84fb1a4c",
												"1": "84fead7e",
												"2": "1",
												"3": "1003.94037",
												"4": "107.56861",
												"5": "1567.2142",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99995.38",
												"10": "199997.97"
											},
											{
												"0": "84fb1a4d",
												"1": "84fead7f",
												"2": "0",
												"3": "1000.1368",
												"4": "91.430115",
												"5": "1574.332",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99999.75",
												"10": "199998.66"
											},
											{
												"0": "84fb1a4e",
												"1": "84fead80",
												"2": "1",
												"3": "1007.20905",
												"4": "107.15999",
												"5": "1504.5339",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.055",
												"10": "199997.84"
											},
											{
												"0": "84fb1a4f",
												"1": "84fead81",
												"2": "1",
												"3": "1007.82416",
												"4": "91.417854",
												"5": "1504.3296",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.21",
												"10": "199996.23"
											},
											{
												"0": "84fb1a50",
												"1": "84fead82",
												"2": "1",
												"3": "1010.4374",
												"4": "103.3362",
												"5": "1571.7963",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.7",
												"10": "199998.77"
											},
											{
												"0": "84fb1a51",
												"1": "84fead83",
												"2": "0",
												"3": "1015.03406",
												"4": "98.92881",
												"5": "1509.9506",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100011.74",
												"10": "199992.58"
											},
											{
												"0": "84fb1a52",
												"1": "84fead84",
												"2": "1",
												"3": "1015.77966",
												"4": "95.02295",
												"5": "1509.7031",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.09",
												"10": "199991.23"
											},
											{
												"0": "84fb1a53",
												"1": "84fead85",
												"2": "0",
												"3": "996.2306",
												"4": "93.98009",
												"5": "1516.3976",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.984",
												"10": "199990.11"
											},
											{
												"0": "84fb1a54",
												"1": "84fead86",
												"2": "0",
												"3": "1001.2098",
												"4": "116.39013",
												"5": "1574.71",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.0",
												"10": "200000.6"
											},
											{
												"0": "84fb1a55",
												"1": "84fead87",
												"2": "1",
												"3": "1009.96545",
												"4": "105.975655",
												"5": "1569.021",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.04",
												"10": "199994.84"
											},
											{
												"0": "84fb1a56",
												"1": "84fead88",
												"2": "0",
												"3": "1005.19763",
												"4": "110.08419",
												"5": "1511.3364",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.41",
												"10": "199996.56"
											},
											{
												"0": "84fb1a57",
												"1": "84fead89",
												"2": "0",
												"3": "1011.40704",
												"4": "101.42634",
												"5": "1517.0571",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.9",
												"10": "199999.05"
											},
											{
												"0": "84fb1a58",
												"1": "84fead8a",
												"2": "0",
												"3": "1008.72943",
												"4": "100.5503",
												"5": "1513.8706",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100000.99",
												"10": "200002.14"
											},
											{
												"0": "84fb1a59",
												"1": "84fead8b",
												"2": "0",
												"3": "1006.1248",
												"4": "91.03475",
												"5": "1503.798",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100013.73",
												"10": "199984.31"
											},
											{
												"0": "84fb1af6",
												"1": "84feae28",
												"2": "0",
												"3": "1007.0787",
												"4": "111.48535",
												"5": "1517.959",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.875",
												"10": "200001.12"
											},
											{
												"0": "84fb1af7",
												"1": "84feae29",
												"2": "1",
												"3": "1009.4339",
												"4": "106.39251",
												"5": "1513.2976",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99998.55",
												"10": "199996.06"
											},
											{
												"0": "84fb1af8",
												"1": "84feae2a",
												"2": "1",
												"3": "1005.6928",
												"4": "101.721855",
												"5": "1516.1598",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.92",
												"10": "199989.36"
											},
											{
												"0": "84fb1af9",
												"1": "84feae2b",
												"2": "0",
												"3": "1003.011",
												"4": "114.6634",
												"5": "1566.4371",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.164",
												"10": "199998.1"
											},
											{
												"0": "84fb1afa",
												"1": "84feae2c",
												"2": "1",
												"3": "1007.543",
												"4": "102.23392",
												"5": "1509.1223",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.445",
												"10": "199996.95"
											},
											{
												"0": "84fb1afb",
												"1": "84feae2d",
												"2": "1",
												"3": "1016.1998",
												"4": "86.27814",
												"5": "1524.0885",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.36",
												"10": "199994.7"
											},
											{
												"0": "84fb1afc",
												"1": "84feae2e",
												"2": "0",
												"3": "1009.51416",
												"4": "104.95165",
												"5": "1515.9758",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100005.3",
												"10": "199990.55"
											},
											{
												"0": "84fb1afd",
												"1": "84feae2f",
												"2": "1",
												"3": "1002.45734",
												"4": "112.4188",
												"5": "1573.0193",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99991.445",
												"10": "199995.25"
											},
											{
												"0": "84fb1afe",
												"1": "84feae30",
												"2": "1",
												"3": "997.71875",
												"4": "115.92616",
												"5": "1569.1302",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.61",
												"10": "199996.72"
											},
											{
												"0": "84fb1aff",
												"1": "84feae31",
												"2": "1",
												"3": "1013.82733",
												"4": "95.320145",
												"5": "1510.9202",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99986.664",
												"10": "199990.52"
											},
											{
												"0": "84fb1b00",
												"1": "84feae32",
												"2": "1",
												"3": "1012.6008",
												"4": "87.49356",
												"5": "1573.1509",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.805",
												"10": "200001.22"
											},
											{
												"0": "84fb1b01",
												"1": "84feae33",
												"2": "1",
												"3": "1012.8637",
												"4": "97.357704",
												"5": "1513.2339",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.875",
												"10": "199997.86"
											},
											{
												"0": "84fb1b02",
												"1": "84feae34",
												"2": "0",
												"3": "1011.503",
												"4": "77.744514",
												"5": "1515.3177",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100009.266",
												"10": "199992.64"
											},
											{
												"0": "84fb1b03",
												"1": "84feae35",
												"2": "0",
												"3": "997.4903",
												"4": "91.64379",
												"5": "1572.7219",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.92",
												"10": "199991.61"
											},
											{
												"0": "84fb1b04",
												"1": "84feae36",
												"2": "0",
												"3": "1011.3629",
												"4": "102.54189",
												"5": "1526.8307",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100001.65",
												"10": "200001.72"
											},
											{
												"0": "84fb1b05",
												"1": "84feae37",
												"2": "0",
												"3": "1000.42303",
												"4": "94.95601",
												"5": "1574.0581",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100004.805",
												"10": "200002.47"
											},
											{
												"0": "84fb1b06",
												"1": "84feae38",
												"2": "1",
												"3": "1008.23456",
												"4": "105.60243",
												"5": "1512.3713",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.26",
												"10": "199992.86"
											},
											{
												"0": "84fb1b07",
												"1": "84feae39",
												"2": "0",
												"3": "1015.00525",
												"4": "101.62708",
												"5": "1502.3032",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.13",
												"10": "199999.53"
											},
											{
												"0": "84fb1b08",
												"1": "84feae3a",
												"2": "1",
												"3": "1009.6394",
												"4": "102.952835",
												"5": "1502.2988",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99986.77",
												"10": "199998.22"
											},
											{
												"0": "84fb1b09",
												"1": "84feae3b",
												"2": "0",
												"3": "999.83325",
												"4": "96.38898",
												"5": "1513.3304",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.41",
												"10": "199998.12"
											},
											{
												"0": "84fb1b0a",
												"1": "84feae3c",
												"2": "1",
												"3": "1003.6966",
												"4": "104.778595",
												"5": "1571.9182",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.51",
												"10": "199990.8"
											},
											{
												"0": "84fb1b0b",
												"1": "84feae3d",
												"2": "0",
												"3": "1008.28015",
												"4": "93.44363",
												"5": "1513.9194",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.86",
												"10": "199998.2"
											},
											{
												"0": "84fb1b0c",
												"1": "84feae3e",
												"2": "0",
												"3": "1015.76196",
												"4": "98.242455",
												"5": "1523.622",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.24",
												"10": "199990.83"
											},
											{
												"0": "84fb1b0d",
												"1": "84feae3f",
												"2": "0",
												"3": "1013.0766",
												"4": "86.74539",
												"5": "1512.9297",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100008.92",
												"10": "199995.03"
											},
											{
												"0": "84fb1b0e",
												"1": "84feae40",
												"2": "0",
												"3": "1006.20447",
												"4": "98.64908",
												"5": "1513.2812",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99999.34",
												"10": "200000.03"
											},
											{
												"0": "84fb1b0f",
												"1": "84feae41",
												"2": "1",
												"3": "1013.67065",
												"4": "89.08329",
												"5": "1517.5525",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.28",
												"10": "199994.2"
											},
											{
												"0": "84fb1b10",
												"1": "84feae42",
												"2": "1",
												"3": "1012.118",
												"4": "108.690254",
												"5": "1520.3109",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.76",
												"10": "199997.61"
											},
											{
												"0": "84fb1b11",
												"1": "84feae43",
												"2": "1",
												"3": "1002.01904",
												"4": "101.55871",
												"5": "1521.0496",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.805",
												"10": "199998.11"
											},
											{
												"0": "84fb1b12",
												"1": "84feae44",
												"2": "0",
												"3": "1011.99805",
												"4": "96.45981",
												"5": "1519.9235",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100007.71",
												"10": "199994.45"
											},
											{
												"0": "84fb1b13",
												"1": "84feae45",
												"2": "1",
												"3": "1008.5629",
												"4": "93.6966",
												"5": "1512.3276",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.08",
												"10": "199995.3"
											},
											{
												"0": "84fb1b14",
												"1": "84feae46",
												"2": "1",
												"3": "1004.7404",
												"4": "109.19475",
												"5": "1511.2085",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99987.77",
												"10": "199994.2"
											},
											{
												"0": "84fb1b15",
												"1": "84feae47",
												"2": "0",
												"3": "1002.4655",
												"4": "108.163795",
												"5": "1504.4558",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.984",
												"10": "200003.83"
											},
											{
												"0": "84fb1b16",
												"1": "84feae48",
												"2": "0",
												"3": "1017.752",
												"4": "80.36923",
												"5": "1504.1852",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99998.08",
												"10": "199999.28"
											},
											{
												"0": "84fb1b17",
												"1": "84feae49",
												"2": "0",
												"3": "1016.20154",
												"4": "91.16608",
												"5": "1513.524",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.34",
												"10": "199995.14"
											},
											{
												"0": "84fb1b18",
												"1": "84feae4a",
												"2": "0",
												"3": "1011.71045",
												"4": "98.69087",
												"5": "1572.5044",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.484",
												"10": "199991.84"
											},
											{
												"0": "84fb1b19",
												"1": "84feae4b",
												"2": "0",
												"3": "1001.76324",
												"4": "111.267685",
												"5": "1509.3234",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.24",
												"10": "199996.36"
											},
											{
												"0": "84fb1b1a",
												"1": "84feae4c",
												"2": "1",
												"3": "1007.66077",
												"4": "106.35519",
												"5": "1509.5526",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.08",
												"10": "199991.05"
											},
											{
												"0": "84fb1b1b",
												"1": "84feae4d",
												"2": "1",
												"3": "1008.5137",
												"4": "110.96013",
												"5": "1517.9329",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99991.18",
												"10": "199994.39"
											},
											{
												"0": "84fb1b1c",
												"1": "84feae4e",
												"2": "0",
												"3": "1009.53674",
												"4": "110.73452",
												"5": "1515.6578",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "100007.586",
												"10": "199998.17"
											},
											{
												"0": "84fb1b1d",
												"1": "84feae4f",
												"2": "0",
												"3": "1004.2857",
												"4": "117.095695",
												"5": "1571.536",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100013.68",
												"10": "199988.73"
											},
											{
												"0": "84fb1b1e",
												"1": "84feae50",
												"2": "0",
												"3": "1007.3269",
												"4": "113.059586",
												"5": "1511.3442",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.484",
												"10": "199989.33"
											},
											{
												"0": "84fb1b1f",
												"1": "84feae51",
												"2": "0",
												"3": "1009.0202",
												"4": "78.628044",
												"5": "1574.6493",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100009.055",
												"10": "199987.69"
											},
											{
												"0": "84fb1b20",
												"1": "84feae52",
												"2": "1",
												"3": "1015.449",
												"4": "94.84519",
												"5": "1512.811",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.91",
												"10": "199994.58"
											},
											{
												"0": "84fb1b21",
												"1": "84feae53",
												"2": "0",
												"3": "1007.73334",
												"4": "90.22268",
												"5": "1572.4385",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99992.05",
												"10": "200002.4"
											},
											{
												"0": "84fb1b22",
												"1": "84feae54",
												"2": "0",
												"3": "1006.5908",
												"4": "105.51811",
												"5": "1506.8256",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.695",
												"10": "199992.55"
											},
											{
												"0": "84fb1b23",
												"1": "84feae55",
												"2": "0",
												"3": "1002.1172",
												"4": "96.41384",
												"5": "1574.3995",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.76",
												"10": "199994.34"
											},
											{
												"0": "84fb1b24",
												"1": "84feae56",
												"2": "1",
												"3": "1006.3122",
												"4": "101.74253",
												"5": "1518.6844",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.31",
												"10": "199989.42"
											},
											{
												"0": "84fb1b25",
												"1": "84feae57",
												"2": "1",
												"3": "1002.2229",
												"4": "101.702095",
												"5": "1507.5132",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.22",
												"10": "199992.1"
											},
											{
												"0": "84fb1b26",
												"1": "84feae58",
												"2": "1",
												"3": "1003.47565",
												"4": "98.358215",
												"5": "1500.4185",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.38",
												"10": "199993.2"
											},
											{
												"0": "84fb1b27",
												"1": "84feae59",
												"2": "1",
												"3": "1010.0995",
												"4": "108.43458",
												"5": "1516.204",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.8",
												"10": "199996.14"
											},
											{
												"0": "84fb1b28",
												"1": "84feae5a",
												"2": "0",
												"3": "1009.4231",
												"4": "95.3662",
												"5": "1512.2164",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100001.73",
												"10": "199999.64"
											},
											{
												"0": "84fb1b29",
												"1": "84feae5b",
												"2": "0",
												"3": "1004.6847",
												"4": "114.76963",
												"5": "1504.659",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99993.53",
												"10": "200002.25"
											},
											{
												"0": "84fb1b2a",
												"1": "84feae5c",
												"2": "0",
												"3": "1006.30304",
												"4": "105.594734",
												"5": "1508.9786",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100008.77",
												"10": "199997.5"
											},
											{
												"0": "84fb1b2b",
												"1": "84feae5d",
												"2": "0",
												"3": "1004.03357",
												"4": "116.66891",
												"5": "1510.3938",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.07",
												"10": "199992.27"
											},
											{
												"0": "84fb1b2c",
												"1": "84feae5e",
												"2": "0",
												"3": "1004.6447",
												"4": "74.460365",
												"5": "1510.2463",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.24",
												"10": "199993.94"
											},
											{
												"0": "84fb1b2d",
												"1": "84feae5f",
												"2": "0",
												"3": "1002.0744",
												"4": "102.06787",
												"5": "1509.7588",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.42",
												"10": "199993.5"
											},
											{
												"0": "84fb1b2e",
												"1": "84feae60",
												"2": "0",
												"3": "1007.6546",
												"4": "108.70958",
												"5": "1505.5913",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.36",
												"10": "200000.6"
											},
											{
												"0": "84fb1b2f",
												"1": "84feae61",
												"2": "1",
												"3": "1004.5258",
												"4": "116.17715",
												"5": "1511.0663",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.805",
												"10": "199993.83"
											},
											{
												"0": "84fb1b30",
												"1": "84feae62",
												"2": "0",
												"3": "1000.29065",
												"4": "107.82324",
												"5": "1573.0544",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.72",
												"10": "199995.73"
											},
											{
												"0": "84fb1b31",
												"1": "84feae63",
												"2": "0",
												"3": "1003.94434",
												"4": "95.78979",
												"5": "1515.7448",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.03",
												"10": "199989.19"
											},
											{
												"0": "84fb1b32",
												"1": "84feae64",
												"2": "1",
												"3": "1012.4004",
												"4": "90.81899",
												"5": "1510.4231",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.8",
												"10": "199996.44"
											},
											{
												"0": "84fb1b33",
												"1": "84feae65",
												"2": "1",
												"3": "1002.15015",
												"4": "112.30585",
												"5": "1519.1605",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100003.26",
												"10": "199999.11"
											},
											{
												"0": "84fb1b34",
												"1": "84feae66",
												"2": "1",
												"3": "1015.36346",
												"4": "94.06796",
												"5": "1507.4874",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.19",
												"10": "199996.78"
											},
											{
												"0": "84fb1b35",
												"1": "84feae67",
												"2": "0",
												"3": "1004.5809",
												"4": "104.19857",
												"5": "1567.5266",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.61",
												"10": "199995.11"
											},
											{
												"0": "84fb1b36",
												"1": "84feae68",
												"2": "0",
												"3": "1001.097",
												"4": "94.59343",
												"5": "1500.0166",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.805",
												"10": "199994.06"
											},
											{
												"0": "84fb1b37",
												"1": "84feae69",
												"2": "0",
												"3": "1003.1807",
												"4": "86.40105",
												"5": "1503.4509",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.86",
												"10": "199997.06"
											},
											{
												"0": "84fb1b38",
												"1": "84feae6a",
												"2": "1",
												"3": "1007.19464",
												"4": "90.64187",
												"5": "1505.0812",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.586",
												"10": "199998.2"
											},
											{
												"0": "84fb1b39",
												"1": "84feae6b",
												"2": "1",
												"3": "1006.2117",
												"4": "98.57247",
												"5": "1505.2933",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.47",
												"10": "199988.66"
											},
											{
												"0": "84fb1b3a",
												"1": "84feae6c",
												"2": "0",
												"3": "1009.5484",
												"4": "103.39592",
												"5": "1503.1478",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.375",
												"10": "199996.19"
											},
											{
												"0": "84fb1b3b",
												"1": "84feae6d",
												"2": "1",
												"3": "1010.92456",
												"4": "84.06859",
												"5": "1570.3324",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99995.52",
												"10": "200001.03"
											},
											{
												"0": "84fb1b3c",
												"1": "84feae6e",
												"2": "0",
												"3": "1005.7341",
												"4": "110.73023",
												"5": "1507.516",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.19",
												"10": "199996.36"
											},
											{
												"0": "84fb1b3d",
												"1": "84feae6f",
												"2": "1",
												"3": "1011.69507",
												"4": "99.94811",
												"5": "1500.0581",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99997.805",
												"10": "199998.12"
											},
											{
												"0": "84fb1b3e",
												"1": "84feae70",
												"2": "1",
												"3": "1013.6765",
												"4": "100.681335",
												"5": "1516.1223",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99996.49",
												"10": "199989.77"
											},
											{
												"0": "84fb1b3f",
												"1": "84feae71",
												"2": "1",
												"3": "1012.9978",
												"4": "96.21744",
												"5": "1507.1282",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.42",
												"10": "199996.31"
											},
											{
												"0": "84fb1b40",
												"1": "84feae72",
												"2": "0",
												"3": "1003.5422",
												"4": "114.17504",
												"5": "1502.7919",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.125",
												"10": "199996.45"
											},
											{
												"0": "84fb1b41",
												"1": "84feae73",
												"2": "0",
												"3": "1008.56885",
												"4": "112.66276",
												"5": "1572.6168",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.34",
												"10": "199999.16"
											},
											{
												"0": "84fb1b42",
												"1": "84feae74",
												"2": "0",
												"3": "995.84607",
												"4": "99.060036",
												"5": "1554.7412",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.63",
												"10": "199989.48"
											},
											{
												"0": "84fb1b43",
												"1": "84feae75",
												"2": "0",
												"3": "1024.9995",
												"4": "78.518234",
												"5": "1509.3135",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100008.06",
												"10": "199995.23"
											},
											{
												"0": "84fb1b44",
												"1": "84feae76",
												"2": "1",
												"3": "1011.2655",
												"4": "82.89999",
												"5": "1510.003",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99993.45",
												"10": "199993.53"
											},
											{
												"0": "84fb1b45",
												"1": "84feae77",
												"2": "0",
												"3": "1010.553",
												"4": "101.75504",
												"5": "1507.7047",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.86",
												"10": "199993.25"
											},
											{
												"0": "84fb1b46",
												"1": "84feae78",
												"2": "0",
												"3": "1004.70844",
												"4": "115.84953",
												"5": "1506.0432",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.15",
												"10": "200001.25"
											},
											{
												"0": "84fb1b47",
												"1": "84feae79",
												"2": "1",
												"3": "1005.7277",
												"4": "96.22443",
												"5": "1512.6123",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99993.9",
												"10": "199990.98"
											},
											{
												"0": "84fb1b48",
												"1": "84feae7a",
												"2": "0",
												"3": "1007.6659",
												"4": "109.73214",
												"5": "1507.0504",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.586",
												"10": "200001.89"
											},
											{
												"0": "84fb1b49",
												"1": "84feae7b",
												"2": "1",
												"3": "1003.71204",
												"4": "115.6218",
												"5": "1505.9529",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.83",
												"10": "199999.9"
											},
											{
												"0": "84fb1b4a",
												"1": "84feae7c",
												"2": "1",
												"3": "1005.7633",
												"4": "87.16129",
												"5": "1573.852",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.95",
												"10": "199992.62"
											},
											{
												"0": "84fb1b4b",
												"1": "84feae7d",
												"2": "0",
												"3": "1006.5007",
												"4": "113.23593",
												"5": "1519.2065",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.25",
												"10": "199995.3"
											},
											{
												"0": "84fb1b4c",
												"1": "84feae7e",
												"2": "1",
												"3": "1007.95624",
												"4": "97.11809",
												"5": "1521.2372",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100001.12",
												"10": "199995.44"
											},
											{
												"0": "84fb1b4d",
												"1": "84feae7f",
												"2": "1",
												"3": "1004.4098",
												"4": "78.92971",
												"5": "1502.707",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.78",
												"10": "199994.48"
											},
											{
												"0": "84fb1b4e",
												"1": "84feae80",
												"2": "1",
												"3": "1008.19916",
												"4": "90.75572",
												"5": "1501.2273",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.05",
												"10": "199996.17"
											},
											{
												"0": "84fb1b4f",
												"1": "84feae81",
												"2": "1",
												"3": "1003.5456",
												"4": "107.72902",
												"5": "1574.4769",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99988.1",
												"10": "199987.95"
											},
											{
												"0": "84fb1b50",
												"1": "84feae82",
												"2": "1",
												"3": "1006.42596",
												"4": "88.47078",
												"5": "1569.1123",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99996.53",
												"10": "199992.48"
											},
											{
												"0": "84fb1b51",
												"1": "84feae83",
												"2": "0",
												"3": "999.46985",
												"4": "119.781685",
												"5": "1510.7604",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100006.57",
												"10": "199991.45"
											},
											{
												"0": "84fb1b52",
												"1": "84feae84",
												"2": "1",
												"3": "1001.08594",
												"4": "81.85146",
												"5": "1569.6583",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99998.11",
												"10": "200002.4"
											},
											{
												"0": "84fb1b53",
												"1": "84feae85",
												"2": "1",
												"3": "1005.2557",
												"4": "121.724236",
												"5": "1570.9865",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.625",
												"10": "199982.27"
											},
											{
												"0": "84fb1b54",
												"1": "84feae86",
												"2": "0",
												"3": "992.0455",
												"4": "99.55184",
												"5": "1502.3743",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100003.06",
												"10": "199995.39"
											},
											{
												"0": "84fb1b55",
												"1": "84feae87",
												"2": "1",
												"3": "1014.2372",
												"4": "87.13159",
												"5": "1506.107",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99998.96",
												"10": "199988.64"
											},
											{
												"0": "84fb1b56",
												"1": "84feae88",
												"2": "1",
												"3": "1009.0832",
												"4": "83.69229",
												"5": "1574.5205",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.57",
												"10": "199997.61"
											},
											{
												"0": "84fb1b57",
												"1": "84feae89",
												"2": "1",
												"3": "1008.90466",
												"4": "113.20077",
												"5": "1510.1296",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99992.44",
												"10": "199997.55"
											},
											{
												"0": "84fb1b58",
												"1": "84feae8a",
												"2": "1",
												"3": "998.9522",
												"4": "85.35002",
												"5": "1561.1581",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.56",
												"10": "200003.53"
											},
											{
												"0": "84fb1b59",
												"1": "84feae8b",
												"2": "0",
												"3": "1009.846",
												"4": "106.266594",
												"5": "1506.8168",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.96",
												"10": "200001.12"
											},
											{
												"0": "84fb1b5a",
												"1": "84feae8c",
												"2": "0",
												"3": "1009.0354",
												"4": "99.62201",
												"5": "1510.7711",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100007.07",
												"10": "199992.42"
											},
											{
												"0": "84fb1b5b",
												"1": "84feae8d",
												"2": "1",
												"3": "1001.58765",
												"4": "109.08821",
												"5": "1508.4799",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99998.68",
												"10": "199991.38"
											},
											{
												"0": "84fb1b5c",
												"1": "84feae8e",
												"2": "1",
												"3": "998.55426",
												"4": "99.45289",
												"5": "1513.6931",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99989.31",
												"10": "199991.88"
											},
											{
												"0": "84fb1b5d",
												"1": "84feae8f",
												"2": "1",
												"3": "1011.80676",
												"4": "101.01647",
												"5": "1503.0525",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.87",
												"10": "199993.11"
											},
											{
												"0": "84fb1b5e",
												"1": "84feae90",
												"2": "0",
												"3": "1000.79626",
												"4": "113.349205",
												"5": "1503.1523",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.16",
												"10": "199998.23"
											},
											{
												"0": "84fb1b5f",
												"1": "84feae91",
												"2": "1",
												"3": "1008.64374",
												"4": "78.97359",
												"5": "1509.9802",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.35",
												"10": "199985.38"
											},
											{
												"0": "84fb1b60",
												"1": "84feae92",
												"2": "1",
												"3": "1013.784",
												"4": "95.3254",
												"5": "1513.994",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.04",
												"10": "199991.47"
											},
											{
												"0": "84fb1b61",
												"1": "84feae93",
												"2": "0",
												"3": "1010.4134",
												"4": "89.65314",
												"5": "1516.7716",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.75",
												"10": "199999.11"
											},
											{
												"0": "84fb1b62",
												"1": "84feae94",
												"2": "0",
												"3": "1009.1714",
												"4": "101.60397",
												"5": "1516.0593",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100001.195",
												"10": "200002.61"
											},
											{
												"0": "84fb1b63",
												"1": "84feae95",
												"2": "1",
												"3": "1014.556",
												"4": "75.68858",
												"5": "1500.9152",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99995.4",
												"10": "199988.12"
											},
											{
												"0": "84fb1b64",
												"1": "84feae96",
												"2": "1",
												"3": "1006.5723",
												"4": "104.6751",
												"5": "1502.8553",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99990.78",
												"10": "199992.03"
											},
											{
												"0": "84fb1b65",
												"1": "84feae97",
												"2": "1",
												"3": "1017.27094",
												"4": "87.03626",
												"5": "1500.5674",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.62",
												"10": "199998.12"
											},
											{
												"0": "84fb1b66",
												"1": "84feae98",
												"2": "0",
												"3": "996.59155",
												"4": "113.13326",
												"5": "1508.743",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.84",
												"10": "199993.38"
											},
											{
												"0": "84fb1b67",
												"1": "84feae99",
												"2": "1",
												"3": "1019.746",
												"4": "89.23829",
												"5": "1509.9016",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.41",
												"10": "199993.8"
											},
											{
												"0": "84fb1b68",
												"1": "84feae9a",
												"2": "0",
												"3": "1006.425",
												"4": "107.76772",
												"5": "1508.9785",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100006.12",
												"10": "200000.16"
											},
											{
												"0": "84fb1b69",
												"1": "84feae9b",
												"2": "1",
												"3": "1008.0015",
												"4": "101.89518",
												"5": "1509.4485",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99996.836",
												"10": "199987.94"
											},
											{
												"0": "84fb1b6a",
												"1": "84feae9c",
												"2": "1",
												"3": "1002.9895",
												"4": "103.52986",
												"5": "1508.9957",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99988.914",
												"10": "199993.95"
											},
											{
												"0": "84fb1b6b",
												"1": "84feae9d",
												"2": "1",
												"3": "996.2241",
												"4": "97.76556",
												"5": "1503.9855",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.734",
												"10": "199992.3"
											},
											{
												"0": "84fb1b6c",
												"1": "84feae9e",
												"2": "1",
												"3": "1006.64197",
												"4": "116.70298",
												"5": "1500.4926",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100003.914",
												"10": "200003.3"
											},
											{
												"0": "84fb1b6d",
												"1": "84feae9f",
												"2": "1",
												"3": "1001.13116",
												"4": "116.155014",
												"5": "1573.211",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100000.5",
												"10": "199994.27"
											},
											{
												"0": "84fb1b6e",
												"1": "84feaea0",
												"2": "0",
												"3": "1019.85443",
												"4": "85.69951",
												"5": "1516.2727",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100001.266",
												"10": "199999.75"
											},
											{
												"0": "84fb1b6f",
												"1": "84feaea1",
												"2": "0",
												"3": "1012.1294",
												"4": "99.08188",
												"5": "1518.1207",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100011.54",
												"10": "199988.44"
											},
											{
												"0": "84fb1b70",
												"1": "84feaea2",
												"2": "1",
												"3": "1005.9977",
												"4": "114.02679",
												"5": "1508.8807",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.34",
												"10": "199998.34"
											},
											{
												"0": "84fb1b71",
												"1": "84feaea3",
												"2": "0",
												"3": "1004.9816",
												"4": "107.69037",
												"5": "1503.0103",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100008.28",
												"10": "200004.47"
											},
											{
												"0": "84fb1b72",
												"1": "84feaea4",
												"2": "0",
												"3": "1010.4532",
												"4": "108.66355",
												"5": "1506.372",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100004.62",
												"10": "199993.9"
											},
											{
												"0": "84fb1b73",
												"1": "84feaea5",
												"2": "0",
												"3": "1012.47235",
												"4": "104.5949",
												"5": "1501.0466",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.57",
												"10": "200000.67"
											},
											{
												"0": "84fb1b74",
												"1": "84feaea6",
												"2": "0",
												"3": "1004.69836",
												"4": "87.99623",
												"5": "1501.8446",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.63",
												"10": "199998.78"
											},
											{
												"0": "84fb1b75",
												"1": "84feaea7",
												"2": "0",
												"3": "1010.0725",
												"4": "98.4604",
												"5": "1509.9845",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.12",
												"10": "199993.2"
											},
											{
												"0": "84fb1b76",
												"1": "84feaea8",
												"2": "0",
												"3": "1018.58777",
												"4": "92.68065",
												"5": "1508.6251",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100008.53",
												"10": "199990.14"
											},
											{
												"0": "84fb1b77",
												"1": "84feaea9",
												"2": "1",
												"3": "1015.24524",
												"4": "92.92228",
												"5": "1572.2391",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.21",
												"10": "199994.44"
											},
											{
												"0": "84fb1b78",
												"1": "84feaeaa",
												"2": "1",
												"3": "1007.14764",
												"4": "107.234474",
												"5": "1501.9735",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100002.375",
												"10": "199997.05"
											},
											{
												"0": "84fb1b79",
												"1": "84feaeab",
												"2": "0",
												"3": "1020.437",
												"4": "89.66064",
												"5": "1508.9531",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99988.98",
												"10": "200004.84"
											},
											{
												"0": "84fb1b7a",
												"1": "84feaeac",
												"2": "0",
												"3": "1010.2832",
												"4": "123.17927",
												"5": "1514.7606",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.945",
												"10": "199991.33"
											},
											{
												"0": "84fb1b7b",
												"1": "84feaead",
												"2": "0",
												"3": "1011.9067",
												"4": "89.14604",
												"5": "1501.1093",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100007.0",
												"10": "199997.34"
											},
											{
												"0": "84fb1b7c",
												"1": "84feaeae",
												"2": "1",
												"3": "1008.25366",
												"4": "100.895996",
												"5": "1509.4974",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99989.51",
												"10": "199991.83"
											},
											{
												"0": "84fb1b7d",
												"1": "84feaeaf",
												"2": "1",
												"3": "1005.44104",
												"4": "110.4225",
												"5": "1567.1434",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.51",
												"10": "199994.97"
											},
											{
												"0": "84fb1b7e",
												"1": "84feaeb0",
												"2": "0",
												"3": "1012.18536",
												"4": "100.33388",
												"5": "1507.5393",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.93",
												"10": "199992.8"
											},
											{
												"0": "84fb1b7f",
												"1": "84feaeb1",
												"2": "1",
												"3": "995.2581",
												"4": "109.1985",
												"5": "1508.6937",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.21",
												"10": "199994.52"
											},
											{
												"0": "84fb1b80",
												"1": "84feaeb2",
												"2": "0",
												"3": "1010.33264",
												"4": "113.10713",
												"5": "1509.2782",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99999.54",
												"10": "199997.28"
											},
											{
												"0": "84fb1b81",
												"1": "84feaeb3",
												"2": "1",
												"3": "1006.15857",
												"4": "116.84127",
												"5": "1573.4839",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.67",
												"10": "199999.27"
											},
											{
												"0": "84fb1b82",
												"1": "84feaeb4",
												"2": "1",
												"3": "1000.6359",
												"4": "108.06894",
												"5": "1509.7924",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.88",
												"10": "199990.75"
											},
											{
												"0": "84fb1b83",
												"1": "84feaeb5",
												"2": "0",
												"3": "1007.4619",
												"4": "103.85459",
												"5": "1509.3983",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.83",
												"10": "199987.11"
											},
											{
												"0": "84fb1b84",
												"1": "84feaeb6",
												"2": "1",
												"3": "1012.6944",
												"4": "93.23293",
												"5": "1504.4735",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.125",
												"10": "199997.88"
											},
											{
												"0": "84fb1b85",
												"1": "84feaeb7",
												"2": "1",
												"3": "1005.2739",
												"4": "108.53482",
												"5": "1505.5381",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99990.57",
												"10": "199995.8"
											},
											{
												"0": "84fb1b86",
												"1": "84feaeb8",
												"2": "1",
												"3": "1003.54193",
												"4": "89.75219",
												"5": "1517.851",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.61",
												"10": "199993.92"
											},
											{
												"0": "84fb1b87",
												"1": "84feaeb9",
												"2": "1",
												"3": "1008.0858",
												"4": "110.74805",
												"5": "1500.5449",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.91",
												"10": "199998.4"
											},
											{
												"0": "84fb1b88",
												"1": "84feaeba",
												"2": "1",
												"3": "1012.8945",
												"4": "87.239815",
												"5": "1509.6974",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.79",
												"10": "199997.14"
											},
											{
												"0": "84fb1b89",
												"1": "84feaebb",
												"2": "0",
												"3": "1011.7129",
												"4": "104.3345",
												"5": "1504.3546",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.09",
												"10": "199996.67"
											},
											{
												"0": "84fb1b8a",
												"1": "84feaebc",
												"2": "0",
												"3": "1010.018",
												"4": "84.21783",
												"5": "1512.489",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.516",
												"10": "199992.16"
											},
											{
												"0": "84fb1b8b",
												"1": "84feaebd",
												"2": "0",
												"3": "1023.83417",
												"4": "84.28737",
												"5": "1507.6201",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99996.81",
												"10": "199999.44"
											},
											{
												"0": "84fb1b8c",
												"1": "84feaebe",
												"2": "0",
												"3": "1005.20966",
												"4": "83.47849",
												"5": "1507.1007",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.38",
												"10": "199990.31"
											},
											{
												"0": "84fb1b8d",
												"1": "84feaebf",
												"2": "1",
												"3": "1011.4616",
												"4": "107.454666",
												"5": "1514.2896",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.586",
												"10": "199995.53"
											},
											{
												"0": "84fb1b8e",
												"1": "84feaec0",
												"2": "0",
												"3": "1009.56396",
												"4": "80.53221",
												"5": "1512.2898",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100012.484",
												"10": "199987.45"
											},
											{
												"0": "84fb1b8f",
												"1": "84feaec1",
												"2": "0",
												"3": "1015.5239",
												"4": "96.41026",
												"5": "1504.4373",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.98",
												"10": "200003.81"
											},
											{
												"0": "84fb1b90",
												"1": "84feaec2",
												"2": "1",
												"3": "1011.41895",
												"4": "106.87145",
												"5": "1511.1716",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99994.62",
												"10": "199996.25"
											},
											{
												"0": "84fb1b91",
												"1": "84feaec3",
												"2": "1",
												"3": "1014.885",
												"4": "82.17657",
												"5": "1570.7804",
												"6": "1",
												"7": "0",
												"8": "1",
												"9": "99992.43",
												"10": "199996.61"
											},
											{
												"0": "84fbc7f0",
												"1": "84ff5ad2",
												"2": "0",
												"3": "1008.2675",
												"4": "105.448586",
												"5": "1513.4286",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100003.055",
												"10": "199992.92"
											},
											{
												"0": "84fbc7f1",
												"1": "84ff5ad3",
												"2": "0",
												"3": "1011.1157",
												"4": "82.881454",
												"5": "1502.2583",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "100003.68",
												"10": "199997.44"
											},
											{
												"0": "84fbc7f2",
												"1": "84ff5ad4",
												"2": "0",
												"3": "1002.5529",
												"4": "90.71523",
												"5": "1507.8937",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100003.92",
												"10": "200002.4"
											},
											{
												"0": "84fbc7f3",
												"1": "84ff5ad5",
												"2": "0",
												"3": "1008.8458",
												"4": "111.93142",
												"5": "1504.2764",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100001.13",
												"10": "199992.47"
											},
											{
												"0": "84fbc7f4",
												"1": "84ff5ad6",
												"2": "0",
												"3": "1011.97797",
												"4": "94.66366",
												"5": "1505.5099",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.54",
												"10": "199999.78"
											},
											{
												"0": "84fbc7f5",
												"1": "84ff5ad7",
												"2": "0",
												"3": "1008.26215",
												"4": "103.95915",
												"5": "1516.4479",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.03",
												"10": "199996.2"
											},
											{
												"0": "84fbc7f6",
												"1": "84ff5ad8",
												"2": "1",
												"3": "1000.1743",
												"4": "89.869125",
												"5": "1571.1925",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.66",
												"10": "199993.55"
											},
											{
												"0": "84fbc7f7",
												"1": "84ff5ad9",
												"2": "1",
												"3": "1007.58765",
												"4": "98.96454",
												"5": "1531.9188",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99991.03",
												"10": "199997.33"
											},
											{
												"0": "84fbc7f8",
												"1": "84ff5ada",
												"2": "1",
												"3": "1006.2232",
												"4": "79.40936",
												"5": "1507.0216",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99992.02",
												"10": "199995.1"
											},
											{
												"0": "84fbc7f9",
												"1": "84ff5adb",
												"2": "0",
												"3": "1009.1986",
												"4": "106.6802",
												"5": "1511.9218",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.91",
												"10": "200004.61"
											},
											{
												"0": "84fbc7fa",
												"1": "84ff5adc",
												"2": "1",
												"3": "1012.01794",
												"4": "100.15847",
												"5": "1574.7264",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.61",
												"10": "199991.34"
											},
											{
												"0": "84fbc7fb",
												"1": "84ff5add",
												"2": "0",
												"3": "1011.2714",
												"4": "94.07996",
												"5": "1509.8857",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.516",
												"10": "199990.47"
											},
											{
												"0": "84fbc7fc",
												"1": "84ff5ade",
												"2": "1",
												"3": "1002.3417",
												"4": "105.894005",
												"5": "1510.1337",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.13",
												"10": "199996.56"
											},
											{
												"0": "84fbc7fd",
												"1": "84ff5adf",
												"2": "1",
												"3": "1024.4606",
												"4": "94.16212",
												"5": "1519.255",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99992.06",
												"10": "199995.38"
											},
											{
												"0": "84fbc7fe",
												"1": "84ff5ae0",
												"2": "0",
												"3": "1002.53265",
												"4": "95.45643",
												"5": "1572.3655",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100004.44",
												"10": "199991.47"
											},
											{
												"0": "84fbc7ff",
												"1": "84ff5ae1",
												"2": "1",
												"3": "1013.4993",
												"4": "97.72537",
												"5": "1572.1394",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.11",
												"10": "199996.78"
											},
											{
												"0": "84fbc800",
												"1": "84ff5ae2",
												"2": "1",
												"3": "1015.9321",
												"4": "93.79897",
												"5": "1510.5634",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99996.21",
												"10": "199998.19"
											},
											{
												"0": "84fbc801",
												"1": "84ff5ae3",
												"2": "1",
												"3": "1011.79645",
												"4": "110.35558",
												"5": "1512.1432",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99999.15",
												"10": "199993.52"
											},
											{
												"0": "84fbc802",
												"1": "84ff5ae4",
												"2": "1",
												"3": "1006.79407",
												"4": "83.073074",
												"5": "1507.4681",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.22",
												"10": "199992.23"
											},
											{
												"0": "84fbc803",
												"1": "84ff5ae5",
												"2": "0",
												"3": "1011.70917",
												"4": "80.440346",
												"5": "1502.4202",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100005.555",
												"10": "199995.2"
											},
											{
												"0": "84fbc804",
												"1": "84ff5ae6",
												"2": "0",
												"3": "1003.3152",
												"4": "98.362564",
												"5": "1500.7745",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100018.37",
												"10": "199987.84"
											},
											{
												"0": "84fbc805",
												"1": "84ff5ae7",
												"2": "1",
												"3": "1007.78864",
												"4": "108.91866",
												"5": "1569.3484",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.66",
												"10": "200001.05"
											},
											{
												"0": "84fbc806",
												"1": "84ff5ae8",
												"2": "0",
												"3": "1011.37164",
												"4": "110.18765",
												"5": "1503.4329",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100008.45",
												"10": "199995.34"
											},
											{
												"0": "84fbc807",
												"1": "84ff5ae9",
												"2": "0",
												"3": "1005.97675",
												"4": "82.33186",
												"5": "1516.0347",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100001.83",
												"10": "199997.42"
											},
											{
												"0": "84fbc808",
												"1": "84ff5aea",
												"2": "0",
												"3": "1009.4522",
												"4": "99.1329",
												"5": "1501.9977",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100011.79",
												"10": "199988.67"
											},
											{
												"0": "84fbc809",
												"1": "84ff5aeb",
												"2": "0",
												"3": "1001.62396",
												"4": "100.195305",
												"5": "1517.3419",
												"6": "0",
												"7": "0",
												"8": "0",
												"9": "100006.414",
												"10": "199993.03"
											},
											{
												"0": "84fbc80a",
												"1": "84ff5aec",
												"2": "0",
												"3": "1015.87006",
												"4": "95.16246",
												"5": "1520.641",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100002.25",
												"10": "199994.55"
											},
											{
												"0": "84fbc80b",
												"1": "84ff5aed",
												"2": "1",
												"3": "1016.68365",
												"4": "91.441315",
												"5": "1514.9889",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99995.47",
												"10": "199997.06"
											},
											{
												"0": "84fbc80c",
												"1": "84ff5aee",
												"2": "0",
												"3": "1010.81354",
												"4": "101.25688",
												"5": "1525.5437",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100006.57",
												"10": "199996.25"
											},
											{
												"0": "84fbc80d",
												"1": "84ff5aef",
												"2": "0",
												"3": "1013.5749",
												"4": "101.19949",
												"5": "1510.9961",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100007.45",
												"10": "199996.34"
											},
											{
												"0": "84fbc80e",
												"1": "84ff5af0",
												"2": "1",
												"3": "1008.68835",
												"4": "93.05173",
												"5": "1514.39",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99993.59",
												"10": "200000.48"
											},
											{
												"0": "84fbc80f",
												"1": "84ff5af1",
												"2": "1",
												"3": "1006.18524",
												"4": "113.87631",
												"5": "1505.7297",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.87",
												"10": "199992.42"
											},
											{
												"0": "84fbc810",
												"1": "84ff5af2",
												"2": "0",
												"3": "1006.9686",
												"4": "104.64862",
												"5": "1502.498",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100002.234",
												"10": "199996.7"
											},
											{
												"0": "84fbc811",
												"1": "84ff5af3",
												"2": "1",
												"3": "1009.4824",
												"4": "104.34118",
												"5": "1510.3099",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99989.89",
												"10": "199988.84"
											},
											{
												"0": "84fbc812",
												"1": "84ff5af4",
												"2": "1",
												"3": "995.0281",
												"4": "117.20728",
												"5": "1574.4146",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99997.336",
												"10": "199994.0"
											},
											{
												"0": "84fbc813",
												"1": "84ff5af5",
												"2": "1",
												"3": "1010.8536",
												"4": "101.568794",
												"5": "1505.2059",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99999.71",
												"10": "199992.16"
											},
											{
												"0": "84fbc814",
												"1": "84ff5af6",
												"2": "1",
												"3": "1004.24963",
												"4": "117.790436",
												"5": "1504.4579",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99996.39",
												"10": "200000.53"
											},
											{
												"0": "84fbc815",
												"1": "84ff5af7",
												"2": "1",
												"3": "1009.0903",
												"4": "96.59383",
												"5": "1574.4696",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99997.195",
												"10": "199995.48"
											},
											{
												"0": "84fbc816",
												"1": "84ff5af8",
												"2": "1",
												"3": "1011.4407",
												"4": "87.27638",
												"5": "1513.2595",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99994.44",
												"10": "199999.56"
											},
											{
												"0": "84fbc817",
												"1": "84ff5af9",
												"2": "1",
												"3": "1005.3977",
												"4": "98.32945",
												"5": "1507.9437",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99994.234",
												"10": "199992.14"
											},
											{
												"0": "84fbc818",
												"1": "84ff5afa",
												"2": "0",
												"3": "1008.5588",
												"4": "105.421555",
												"5": "1508.5509",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.75",
												"10": "200003.92"
											},
											{
												"0": "84fbc819",
												"1": "84ff5afb",
												"2": "1",
												"3": "1012.8198",
												"4": "85.9768",
												"5": "1504.9242",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99991.21",
												"10": "199995.31"
											},
											{
												"0": "84fbc81a",
												"1": "84ff5afc",
												"2": "0",
												"3": "1009.7668",
												"4": "90.44022",
												"5": "1506.849",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.445",
												"10": "199994.45"
											},
											{
												"0": "84fbc81b",
												"1": "84ff5afd",
												"2": "0",
												"3": "1003.714",
												"4": "113.09672",
												"5": "1506.052",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100004.53",
												"10": "199994.11"
											},
											{
												"0": "84fbc81c",
												"1": "84ff5afe",
												"2": "1",
												"3": "1007.4974",
												"4": "106.78394",
												"5": "1509.9033",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99997.61",
												"10": "199996.44"
											},
											{
												"0": "84fbc81d",
												"1": "84ff5aff",
												"2": "1",
												"3": "1010.8221",
												"4": "100.49124",
												"5": "1506.7037",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100000.414",
												"10": "199997.34"
											},
											{
												"0": "84fbc81e",
												"1": "84ff5b00",
												"2": "0",
												"3": "1007.294",
												"4": "107.90016",
												"5": "1509.1658",
												"6": "1",
												"7": "0",
												"8": "0",
												"9": "100002.164",
												"10": "200003.67"
											},
											{
												"0": "84fbc81f",
												"1": "84ff5b01",
												"2": "0",
												"3": "1004.36346",
												"4": "83.62822",
												"5": "1508.4337",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.53",
												"10": "199998.31"
											},
											{
												"0": "84fbc820",
												"1": "84ff5b02",
												"2": "1",
												"3": "1007.6828",
												"4": "111.63743",
												"5": "1515.9048",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "100001.34",
												"10": "200001.45"
											},
											{
												"0": "84fbc821",
												"1": "84ff5b03",
												"2": "0",
												"3": "998.71094",
												"4": "122.497086",
												"5": "1510.75",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100006.99",
												"10": "199991.25"
											},
											{
												"0": "84fbc822",
												"1": "84ff5b04",
												"2": "1",
												"3": "1005.87787",
												"4": "104.97304",
												"5": "1505.1906",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "99998.34",
												"10": "199992.03"
											},
											{
												"0": "84fbc823",
												"1": "84ff5b05",
												"2": "0",
												"3": "1009.2264",
												"4": "106.74007",
												"5": "1503.2172",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100002.09",
												"10": "199993.88"
											},
											{
												"0": "84fbc824",
												"1": "84ff5b06",
												"2": "1",
												"3": "1004.8947",
												"4": "119.65039",
												"5": "1510.0686",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.89",
												"10": "199994.72"
											},
											{
												"0": "84fbc825",
												"1": "84ff5b07",
												"2": "1",
												"3": "1008.35974",
												"4": "88.37702",
												"5": "1509.9125",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100003.0",
												"10": "199998.92"
											},
											{
												"0": "84fbc826",
												"1": "84ff5b08",
												"2": "0",
												"3": "996.50946",
												"4": "117.527214",
												"5": "1501.916",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100009.65",
												"10": "199992.95"
											},
											{
												"0": "84fbc827",
												"1": "84ff5b09",
												"2": "1",
												"3": "1004.8964",
												"4": "86.32203",
												"5": "1507.1885",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99990.66",
												"10": "199992.2"
											},
											{
												"0": "84fbc828",
												"1": "84ff5b0a",
												"2": "0",
												"3": "1006.73773",
												"4": "107.672874",
												"5": "1507.8257",
												"6": "0",
												"7": "1",
												"8": "1",
												"9": "100003.664",
												"10": "199998.2"
											},
											{
												"0": "84fbc829",
												"1": "84ff5b0b",
												"2": "0",
												"3": "1004.65265",
												"4": "92.97257",
												"5": "1506.2035",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "99996.75",
												"10": "200004.03"
											},
											{
												"0": "84fbc82a",
												"1": "84ff5b0c",
												"2": "1",
												"3": "1007.24786",
												"4": "76.76745",
												"5": "1505.7542",
												"6": "1",
												"7": "1",
												"8": "1",
												"9": "99993.31",
												"10": "199991.0"
											},
											{
												"0": "84fbc82b",
												"1": "84ff5b0d",
												"2": "0",
												"3": "1011.2204",
												"4": "92.8906",
												"5": "1508.2267",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100010.79",
												"10": "199994.1"
											},
											{
												"0": "84fbc82c",
												"1": "84ff5b0e",
												"2": "0",
												"3": "1005.70953",
												"4": "102.05289",
												"5": "1522.4795",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "99998.08",
												"10": "199994.42"
											},
											{
												"0": "84fbc82d",
												"1": "84ff5b0f",
												"2": "0",
												"3": "1016.46075",
												"4": "94.672066",
												"5": "1524.1106",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100014.1",
												"10": "199988.97"
											},
											{
												"0": "84fbc82e",
												"1": "84ff5b10",
												"2": "0",
												"3": "1000.6493",
												"4": "101.744774",
												"5": "1500.57",
												"6": "1",
												"7": "1",
												"8": "0",
												"9": "100000.945",
												"10": "199993.84"
											},
											{
												"0": "84fbc82f",
												"1": "84ff5b11",
												"2": "1",
												"3": "1007.7883",
												"4": "76.89134",
												"5": "1517.9204",
												"6": "0",
												"7": "0",
												"8": "1",
												"9": "99995.61",
												"10": "199994.6"
											},
											{
												"0": "84fbc830",
												"1": "84ff5b12",
												"2": "0",
												"3": "1023.14215",
												"4": "78.764725",
												"5": "1510.725",
												"6": "0",
												"7": "1",
												"8": "0",
												"9": "100005.32",
												"10": "199999.02"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "CustomerId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "string"
											},
											{
												"key": "2",
												"name": "Rating",
												"type": "bigint"
											},
											{
												"key": "3",
												"name": "Cost",
												"type": "float"
											},
											{
												"key": "4",
												"name": "Size",
												"type": "float"
											},
											{
												"key": "5",
												"name": "Price",
												"type": "float"
											},
											{
												"key": "6",
												"name": "PrimaryBrandId",
												"type": "bigint"
											},
											{
												"key": "7",
												"name": "GenderId",
												"type": "bigint"
											},
											{
												"key": "8",
												"name": "MaritalStatus",
												"type": "bigint"
											},
											{
												"key": "9",
												"name": "LowerIncomeBound",
												"type": "float"
											},
											{
												"key": "10",
												"name": "UpperIncomeBound",
												"type": "float"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"2"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Delta Lake features"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Use `spark.read.csv()` to load the data from the source public blob storage account and display its schema and shape."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.types import *\r\n",
							"import numpy as np\r\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"manualSchema = StructType([\r\n",
							"  StructField(\"CustomerId\", StringType(), True),\r\n",
							"  StructField(\"ProductId\", StringType(), True),\r\n",
							"  StructField(\"Rating\", LongType(), True),\r\n",
							"  StructField(\"Cost\", FloatType(), True),\r\n",
							"  StructField(\"Size\", FloatType(), True),\r\n",
							"  StructField(\"Price\", FloatType(), True),\r\n",
							"  StructField(\"PrimaryBrandId\", LongType(), True),\r\n",
							"  StructField(\"GenderId\", LongType(), True),\r\n",
							"  StructField(\"MaritalStatus\", LongType(), True),\r\n",
							"  StructField(\"LowerIncomeBound\", FloatType(), True),\r\n",
							"  StructField(\"UpperIncomeBound\", FloatType(), True)\r\n",
							"])"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url = \"abfss://wwi-02@dataairawdls.dfs.core.windows.net/data/PersonalizedData.csv\"\n",
							"raw_data = spark.read.csv(url, header=True, schema=manualSchema)\n",
							"print(\"Schema: \")\n",
							"raw_data.printSchema()\n",
							"\n",
							"df = raw_data.toPandas()\n",
							"print(\"Shape: \", df.shape)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Save the customer rating dataframe as a Delta Lake table."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path = 'abfss://delta@dataairawdls.dfs.core.windows.net/customerrating'\n",
							"raw_data.write.format('delta').save(delta_table_path)\n",
							"mssparkutils.fs.ls(delta_table_path)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Explore the layout of files and inspect the Delta log file."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_log_path = mssparkutils.fs.ls(f'{delta_table_path}/_delta_log')[0].path\n",
							"print(delta_log_path)\n",
							"mssparkutils.fs.head(delta_log_path)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Load the Delta lake table into a Spark dataframe."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"data = spark.read.format('delta').load(delta_table_path)\n",
							"data.show()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Use the dedicated `DeltaTable` class to manage the Delta Lake table. Explore the Delta Lake table history."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Get all versions\n",
							"from delta.tables import DeltaTable\n",
							"\n",
							"delta_table = DeltaTable.forPath(spark, delta_table_path)\n",
							"display(delta_table.history())"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Perform an update on the Delta Lake table using a SQL-style condition."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Declare the predicate by using a SQL-formatted string.\n",
							"delta_table.update(\n",
							"  condition = \"Price < 1500\",\n",
							"  set = { \"Price\": \"Price * 1.05\" }\n",
							")\n",
							""
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check again the history of the Delta Lake table and notice the new entry corresponding to the update that has just been performed."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(delta_table.history())"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"It's possible to query previous snapshots of your Delta Lake table by using a feature called Time Travel. If you want to access the data that you overwrote, you can query a snapshot of the table before you overwrote the first set of data using the versionAsOf option."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(spark.read.format(\"delta\").option(\"versionAsOf\", \"0\").load(delta_table_path))"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(spark.read.format(\"delta\").option(\"versionAsOf\", \"1\").load(delta_table_path))\n",
							""
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Create the metadata to expose the Delta Lake table in the default Spark database."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"CREATE TABLE CustomerRating USING DELTA LOCATION '{0}'\".format(delta_table_path))"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"List all tables that exist in the default Spark database."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"SHOW TABLES\").show()"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Explore the properties of the `CustomerRating` Spark database table."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"DESCRIBE EXTENDED customerrating\").show(truncate=False)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"To query the delta table from the serverless SQL pool, navigate to the `Develop` hub in Synapse Studio and create a new SQL script. Make sure `Built-in` is selected for the `Connect to` option and `default` is selected for the `Use database` option.\n",
							"\n",
							"Enter the query below and make sure you replace `<your_data_lake_account_name>` with the name of the Data Lake account with the one from your lab environment.\n",
							"\n",
							"\n",
							"```sql\n",
							"SELECT TOP 10 *\n",
							"FROM OPENROWSET(\n",
							"    BULK 'abfss://delta@azrawdatalakeash.dfs.core.windows.net/customer-rating/',\n",
							"    FORMAT = 'delta') as rows\n",
							"```\n",
							"\n",
							"![Query Delta Lake with serverless SQL pool](https://solliancepublicdata.blob.core.windows.net/synapse-l400/notebook-images/query-delta-table.png)"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"This concludes the Delta Lake section of this notebook.\n",
							"\n",
							"To learn more about Delta Lake support in Syanspe Spark, take a look at the [Work with Delta Lake](https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-delta-lake-overview?pivots=programming-language-python) section in the Azure Synapse Analytics documentation."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Mount storage account containers\n",
							"\n",
							"The `mssparkutils` utility can be used to mount storage account containers. In the example below, you will use an already created linked service to manage the authentication with the storage account."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#mssparkutils.fs.unmount(\"/test\", True)"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.mount( \n",
							"    \"abfss://delta@dataairawdls.dfs.core.windows.net\", \n",
							"    \"/test\", \n",
							"    {\"linkedService\":\"dataairawdls\"} \n",
							") "
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Explore the content of the mounted volume using the local path. Note the `synfs:/{jobId}` prefix used by `mssparkutils` for the local path."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"jobId = mssparkutils.env.getJobId() \n",
							"\n",
							"log_files = mssparkutils.fs.ls(f'synfs:/{jobId}/test/customer-rating/_delta_log')\n",
							"log_files"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"When using regular PySpark classes, the syntax of the prefix is slightly different - `/synfs/{jobId}`. Use this prefix to load and display the first 500 characters from the first Delta Lake log file."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"with open(f'/synfs/{jobId}/test/customer-rating/_delta_log/{log_files[0].name}', 'r') as f:\n",
							"    f.read()[:500]"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_spark hyperspace')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "WideWorldImport/03_machine learning"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dataaispk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2807c6d8-4ce7-4af4-95b0-5edbc34ceee6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"dc6f0b41-2d54-4441-9b5e-66a73477c95e": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "386185",
												"1": "Daisy",
												"3": "Mueller",
												"4": "Daisy Mueller",
												"5": "Female",
												"6": "60",
												"7": "1960-05-05",
												"8": "'35157 Elbert Hills",
												"9": " South Evans Norway'",
												"10": "0128-494-538"
											},
											{
												"0": "386186",
												"1": "Valerie",
												"2": "O",
												"3": "Gaylord",
												"4": "Valerie O. Gaylord",
												"5": "Female",
												"6": "53",
												"7": "1966-07-25",
												"8": "'32569 Pietro Estate",
												"9": " Lake Judahhaven Belize'",
												"10": "0919-373-342"
											},
											{
												"0": "386187",
												"1": "Penny",
												"3": "Botsford",
												"4": "Penny Botsford",
												"5": "Female",
												"6": "54",
												"7": "1965-09-09",
												"8": "'36804 Katheryn Throughway",
												"9": " Mazieport Taiwan'",
												"10": "0571-252-751"
											},
											{
												"0": "386188",
												"1": "Larry",
												"2": "D",
												"3": "Kling",
												"4": "Larry D. Kling",
												"5": "Male",
												"6": "53",
												"7": "1966-08-20",
												"8": "'49344 Jerel Falls",
												"9": " West Jeanie Poland'",
												"10": "0772-618-876"
											},
											{
												"0": "386189",
												"1": "Joy",
												"2": "Q",
												"3": "Schmidt",
												"4": "Joy Q. Schmidt",
												"5": "Female",
												"6": "52",
												"7": "1968-05-02",
												"8": "'60337 Gorczany Cliffs",
												"9": " South Kayden Ireland'",
												"10": "0521-684-423"
											},
											{
												"0": "386190",
												"1": "Cheryl",
												"3": "Langosh",
												"4": "Cheryl Langosh",
												"5": "Female",
												"6": "40",
												"7": "1979-07-13",
												"8": "'92411 Chadrick Mall",
												"9": " Constantinshire Zimbabwe'",
												"10": "0874-664-271"
											},
											{
												"0": "386191",
												"1": "Ross",
												"3": "Rohan",
												"4": "Ross Rohan",
												"5": "Male",
												"6": "50",
												"7": "1969-11-02",
												"8": "'99138 VonRueden Pine",
												"9": " Burleychester Ghana'",
												"10": "0391-493-953"
											},
											{
												"0": "386192",
												"1": "Johnny",
												"3": "Armstrong",
												"4": "Johnny Armstrong",
												"5": "Male",
												"6": "49",
												"7": "1970-09-01",
												"8": "'91936 Haven Shore",
												"9": " South Florencemouth United Kingdom'",
												"10": "0134-597-510"
											},
											{
												"0": "386193",
												"1": "Teresa",
												"2": "E",
												"3": "Dibbert",
												"4": "Teresa E. Dibbert",
												"5": "Female",
												"6": "48",
												"7": "1971-12-01",
												"8": "'43175 Jaida Expressway",
												"9": " Jacobitown Norfolk Island'",
												"10": "0140-874-156"
											},
											{
												"0": "386194",
												"1": "Duane",
												"3": "Davis",
												"4": "Duane Davis",
												"5": "Male",
												"6": "54",
												"7": "1965-11-10",
												"8": "'98233 Raymond Courts",
												"9": " East Nash Grenada'",
												"10": "0333-211-412"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "CustomerId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "FirstName",
												"type": "string"
											},
											{
												"key": "2",
												"name": "MiddleInitial",
												"type": "string"
											},
											{
												"key": "3",
												"name": "LastName",
												"type": "string"
											},
											{
												"key": "4",
												"name": "FullName",
												"type": "string"
											},
											{
												"key": "5",
												"name": "Gender",
												"type": "string"
											},
											{
												"key": "6",
												"name": "Age",
												"type": "string"
											},
											{
												"key": "7",
												"name": "BirthDate",
												"type": "string"
											},
											{
												"key": "8",
												"name": "Address",
												"type": "string"
											},
											{
												"key": "9",
												"name": "Mobile",
												"type": "string"
											},
											{
												"key": "10",
												"name": "Email",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"6d71ca3a-12ee-4970-b1fb-f7aa8ffc007e": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "e9d917d0-f1fd-4ef3-a0a3-c51a2f361d4a",
												"1": "22",
												"2": "1325",
												"3": 3,
												"4": "31.320000000000000000",
												"5": "93.960000000000000000",
												"6": "20191201",
												"7": "26.190000000000000000",
												"8": 17,
												"9": 37,
												"10": "5302"
											},
											{
												"0": "e9d917d0-f1fd-4ef3-a0a3-c51a2f361d4a",
												"1": "22",
												"2": "2879",
												"3": 4,
												"4": "27.760000000000000000",
												"5": "111.040000000000000000",
												"6": "20191201",
												"7": "31.320000000000000000",
												"8": 17,
												"9": 37,
												"10": "5302"
											},
											{
												"0": "e9d917d0-f1fd-4ef3-a0a3-c51a2f361d4a",
												"1": "22",
												"2": "541",
												"3": 1,
												"4": "26.910000000000000000",
												"5": "26.910000000000000000",
												"6": "20191201",
												"7": "6.830000000000000000",
												"8": 17,
												"9": 37,
												"10": "5302"
											},
											{
												"0": "e9d917d0-f1fd-4ef3-a0a3-c51a2f361d4a",
												"1": "22",
												"2": "2879",
												"3": 2,
												"4": "27.760000000000000000",
												"5": "55.520000000000000000",
												"6": "20191201",
												"7": "15.660000000000000000",
												"8": 17,
												"9": 37,
												"10": "5302"
											},
											{
												"0": "e9d917d0-f1fd-4ef3-a0a3-c51a2f361d4a",
												"1": "22",
												"2": "4486",
												"3": 4,
												"4": "27.510000000000000000",
												"5": "110.040000000000000000",
												"6": "20191201",
												"7": "31.360000000000000000",
												"8": 17,
												"9": 37,
												"10": "5302"
											},
											{
												"0": "e9d917d0-f1fd-4ef3-a0a3-c51a2f361d4a",
												"1": "22",
												"2": "2879",
												"3": 2,
												"4": "27.760000000000000000",
												"5": "55.520000000000000000",
												"6": "20191201",
												"7": "15.660000000000000000",
												"8": 17,
												"9": 37,
												"10": "5302"
											},
											{
												"0": "e9d917d0-f1fd-4ef3-a0a3-c51a2f361d4a",
												"1": "22",
												"2": "4651",
												"3": 2,
												"4": "32.800000000000000000",
												"5": "65.600000000000000000",
												"6": "20191201",
												"7": "24.660000000000000000",
												"8": 17,
												"9": 37,
												"10": "5302"
											},
											{
												"0": "e9d917d0-f1fd-4ef3-a0a3-c51a2f361d4a",
												"1": "22",
												"2": "2423",
												"3": 2,
												"4": "28.310000000000000000",
												"5": "56.620000000000000000",
												"6": "20191201",
												"7": "14.580000000000000000",
												"8": 17,
												"9": 37,
												"10": "5302"
											},
											{
												"0": "e9d917d0-f1fd-4ef3-a0a3-c51a2f361d4a",
												"1": "22",
												"2": "3627",
												"3": 2,
												"4": "27.420000000000000000",
												"5": "54.840000000000000000",
												"6": "20191201",
												"7": "20.780000000000000000",
												"8": 17,
												"9": 37,
												"10": "5302"
											},
											{
												"0": "e9d917d0-f1fd-4ef3-a0a3-c51a2f361d4a",
												"1": "22",
												"2": "635",
												"3": 4,
												"4": "27.940000000000000000",
												"5": "111.760000000000000000",
												"6": "20191201",
												"7": "33.560000000000000000",
												"8": 17,
												"9": 37,
												"10": "5302"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
						"name": "dataaispk",
						"type": "Spark",
						"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Using Hyperspace for indexing in Synapse Spark\r\n",
							"\r\n",
							"Hyperspace introduces the ability for Apache Spark users to create indexes on their datasets, such as CSV, JSON, and Parquet, and use them for potential query and workload acceleration.\r\n",
							"\r\n",
							"Hyperspace helps accelerate your workloads or queries under two circumstances:\r\n",
							"\r\n",
							"- Queries contain filters on predicates with high selectivity. For example, you might want to select 100 matching rows from a million candidate rows.\r\n",
							"- Queries contain a join that requires heavy shuffles. For example, you might want to join a 100-GB dataset with a 10-GB dataset."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"By default, Spark uses broadcast join to optimize join queries when the data size for one side of join is small (which is the case for the sample data we use in this tutorial). Therefore, we disable broadcast joins so that later when we run join queries, Spark uses sort-merge join. This is mainly to show how Hyperspace indexes would be used at scale for accelerating join queries."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Disable BroadcastHashJoin, so Spark will use standard SortMergeJoin. Currently, Hyperspace indexes utilize SortMergeJoin to speed up query.\r\n",
							"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\r\n",
							"\r\n",
							"# Verify that BroadcastHashJoin is set correctly \r\n",
							"print(spark.conf.get(\"spark.sql.autoBroadcastJoinThreshold\"))"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Load customer data into a Spark dataframe."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df_customer = spark.read.load('abfss://wwi-02@dataairawdls.dfs.core.windows.net/data-generators/generator-customer.csv', format='csv', header=True)\r\n",
							"display(df_customer.limit(10))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Load sales data into a Spark dataframe."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df_sales = spark.read.load('abfss://wwi-02@dataairawdls.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/*/sale-small-20191201-snappy.parquet', format='parquet')\r\n",
							"display(df_sales.limit(10))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Initialize the Hyperspace engine in the Spark session."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from hyperspace import *  \r\n",
							"from com.microsoft.hyperspace import *\r\n",
							"from com.microsoft.hyperspace.index import *\r\n",
							"\r\n",
							"# Create an instance of Hyperspace\r\n",
							"hyperspace = Hyperspace(spark)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Create index configurations for customer and sales data as follows:\r\n",
							"- The customer index is built on the `CustomerId` column and also includes (covers) column `BirthDate`\r\n",
							"- The sales index is built on the `CustomerId` column and also includes (covers) columns `ProductId` and `Quantity`\r\n",
							"\r\n",
							"Using the index configurations, create the actual indexes on the customer and sales dataframes."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"customer_index_config = IndexConfig(\"customerIndex1\", [\"CustomerId\"], [\"BirthDate\"])\r\n",
							"sales_index_config = IndexConfig(\"salesIndex1\", [\"CustomerId\"], [\"ProductId\", \"Quantity\"])\r\n",
							"\r\n",
							"hyperspace.createIndex(df_customer, customer_index_config)\r\n",
							"hyperspace.createIndex(df_sales, sales_index_config)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Enumerate all available indexes."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"hyperspace.indexes().show()"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Check the data lake location of the first index from the list."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"hyperspace.indexes().first().indexLocation"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Hyperspace provides APIs to enable or disable index usage with Spark.\r\n",
							"\r\n",
							"- By using the **hyperspace.enable()** command, Hyperspace optimization rules become visible to the Spark optimizer and exploit existing Hyperspace indexes to optimize user queries.\r\n",
							"- By using the **hyperspace.disable()** command, Hyperspace rules no longer apply during query optimization. Disabling Hyperspace has no impact on created indexes because they remain intact.\r\n",
							"\r\n",
							"Enable hyperspace on the current Spark session."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"hyperspace.enable(spark)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Currently, Hyperspace has rules to exploit indexes for two groups of queries:\r\n",
							"\r\n",
							"- Selection queries with lookup or range selection filtering predicates.\r\n",
							"- Join queries with an equality join predicate (that is, equijoins).\r\n",
							"\r\n",
							"Observe the impact of Hyperspace on range selection. Start with a filtering predicate followed by a selection that contains columns not covered by the index."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sales_filter = df_sales.filter('CustomerId = 85100').select(['CustomerId', 'TransactionDate'])\r\n",
							"sales_filter.show()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Observe the impact of the Hyperspace index. Note how the physical plan scans the actual data files (this happens because `TransactionDate` is not covered by the index, thus it needs to be loaded from the original data)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.conf.set(\"spark.hyperspace.explain.displayMode\", \"html\")\r\n",
							"\r\n",
							"hyperspace.explain(sales_filter, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Perform the same filtering but with a selection that is covered by the index."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sales_filter = df_sales.filter('CustomerId == 85100').select(['CustomerId', 'ProductId', 'Quantity'])\r\n",
							"sales_filter.show()"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Observe how the plan relies now in the Hyperspace index for execution."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"hyperspace.explain(sales_filter, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Perform a join between the customer and sales dataframes."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"customers_sales_join = df_customer.join(df_sales, df_customer.CustomerId == df_sales.CustomerId).select(df_sales.CustomerId, df_sales.ProductId, df_customer.BirthDate, df_sales.Quantity)\r\n",
							"customers_sales_join.show()"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Observe the impact of both indexes in the execution plan."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"hyperspace.explain(customers_sales_join, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataai24spk')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaispk')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaidw')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataaitpcdw')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/dataaiamlwks')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.MachineLearningServices/workspaces/dataaimlwks",
				"groupId": "amlworkspace",
				"fqdns": [
					"a46829b8-f864-4896-b8f9-eb09febeb7cd.workspace.southcentralus.api.azureml.ms",
					"a46829b8-f864-4896-b8f9-eb09febeb7cd.workspace.southcentralus.cert.api.azureml.ms"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/dataaianomalydetector-account')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.CognitiveServices/accounts/dataaianomalydetector",
				"groupId": "account",
				"fqdns": [
					"dataaianomalydetector.cognitiveservices.azure.com"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/dataaicosmosdb-Analytical')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.DocumentDB/databaseAccounts/dataaicosmosdb",
				"groupId": "Analytical",
				"fqdns": [
					"dataaicosmosdb.analytics.cosmos.azure.com"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/dataaicosmosdb-Sql')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.DocumentDB/databaseAccounts/dataaicosmosdb",
				"groupId": "Sql",
				"fqdns": [
					"dataaicosmosdb.documents.azure.com"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/dataaicurateddls-dfs')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Storage/storageAccounts/dataaicurateddls",
				"groupId": "dfs",
				"fqdns": [
					"dataaicurateddls.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/dataaikeyvault-vault')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.KeyVault/vaults/dataaikeyvault",
				"groupId": "vault",
				"fqdns": [
					"dataaikeyvault.vault.azure.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/dataaipurview')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Purview/accounts/dataaipurview",
				"groupId": "account",
				"fqdns": [
					"dataaipurview.purview.azure.com"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/dataairawdls-dfs')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Storage/storageAccounts/dataairawdls",
				"groupId": "dfs",
				"fqdns": [
					"dataairawdls.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/dataaitextanalytics-account')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.CognitiveServices/accounts/dataaitextanalytics",
				"groupId": "account",
				"fqdns": [
					"dataaitextanalytics.cognitiveservices.azure.com"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/dataaiwksdls-dfs')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Storage/storageAccounts/dataaiwksdls",
				"groupId": "dfs",
				"fqdns": [
					"dataaiwksdls.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-kusto-ca6dfc4ff8-v2')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks",
				"groupId": "Kusto",
				"fqdns": [
					"dataaiadx.dataaisynapsewks.kusto.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--dataaisynapsewks')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks",
				"groupId": "sql",
				"fqdns": [
					"dataaisynapsewks.ca6dfc4f-f8c8-44a3-b709-926d2f9ba561.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--dataaisynapsewks')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"dataaisynapsewks-ondemand.ca6dfc4f-f8c8-44a3-b709-926d2f9ba561.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}