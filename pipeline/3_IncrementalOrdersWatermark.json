{
	"name": "3_IncrementalOrdersWatermark",
	"properties": {
		"activities": [
			{
				"name": "getOldWatermark",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT * FROM Watermark WHERE TableName = 'dbo.Orders'",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "dataaisql",
						"type": "DatasetReference",
						"parameters": {
							"schema": "dbo",
							"table": "Watermark"
						}
					}
				}
			},
			{
				"name": "getNewWatermark",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT MAX(LastModifiedDateTime) as NewWatermarkValue FROM dbo.Orders",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "dataaisql",
						"type": "DatasetReference",
						"parameters": {
							"schema": "dbo",
							"table": "Orders"
						}
					}
				}
			},
			{
				"name": "getChangeCount",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "getOldWatermark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "getNewWatermark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT COUNT(*) as changecount FROM dbo.Orders WHERE LastModifiedDateTime > '@{activity('getOldWatermark').output.firstRow.Watermark}' and LastModifiedDateTime <= '@{activity('getNewWatermark').output.firstRow.NewWatermarkValue}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "dataaisql",
						"type": "DatasetReference",
						"parameters": {
							"schema": "dbo",
							"table": "Orders"
						}
					}
				}
			},
			{
				"name": "hasChangedRows",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "getChangeCount",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(int(activity('getChangeCount').output.firstRow.changecount),0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "incrementalCopy",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT * FROM dbo.Orders WHERE LastModifiedDateTime > '@{activity('getOldWatermark').output.firstRow.Watermark}' and LastModifiedDateTime <= '@{activity('getNewWatermark').output.firstRow.NewWatermarkValue}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "dataaisql",
									"type": "DatasetReference",
									"parameters": {
										"schema": "dbo",
										"table": "Orders"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "advwksraw",
									"type": "DatasetReference",
									"parameters": {
										"folderPath": "wwi/orders",
										"fileName": {
											"value": "@concat(formatDateTime(pipeline().TriggerTime,'yyyyMMddHHmmssfff'),'.csv')",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "updateWatermark",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "incrementalCopy",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[sp_update_watermark]",
								"storedProcedureParameters": {
									"LastModifiedDateTime": {
										"value": {
											"value": "@{activity('getNewWatermark').output.firstRow.NewWatermarkValue}",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"TableName": {
										"value": {
											"value": "@{activity('getOldWatermark').output.firstRow.TableName}",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "dataaisql",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			}
		],
		"folder": {
			"name": "Lakehouse"
		},
		"annotations": []
	}
}