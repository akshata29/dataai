{
	"name": "0_end to end security",
	"properties": {
		"folder": {
			"name": "WideWorldImport/04_security"
		},
		"content": {
			"query": "--Wide World Importers is host to a plethora of data coming from many disparate sources. The idea of bringing all of their data \n-- together into Azure Synapse Analytics for them to query, gain insights, and consume in ways they have never done before is \n-- exhilarating! As much as it is an exciting game-changer for this business, it opens up a large amount of surface area for \n-- potential attack. Security must be established in the forefront at the time of design of this solution.\n-- This will guide you through several security-related steps that cover an end-to-end security story for Azure Synapse Analytics. \n-- Some key take-aways from this are:\n-- Leverage Azure Key Vault to store sensitive connection information, such as access keys and passwords for linked services as\n--  well as in pipelines.\n--Introspect the data that is contained within the SQL Pools in the context of potential sensitive/confidential data disclosure. \n-- Identify the columns representing sensitive data, then secure them by adding column-level security. \n-- Determine at the table level what data should be hidden from specific groups of users then define security predicates to\n--  apply row level security (filters) on the table. If desired, you also have the option of applying Dynamic Data Masking \n-- to mask sensitive data returned in queries on a column by column basis.\n\n\n--Azure Synapse Analytics (ASA) is a powerful solution that handles security for many of the resources that it creates and \n-- manages. In order to run ASA, however, some foundational security measures need to be put in place to ensure the\n-- infrastructure that it relies upon is secure. In this exercise, we will walk through securing the supporting infrastructure\n-- of ASA.\n\n-- Observing the SQL Active Directory admin\n-- The SQL Active Directory Admin can be a user (the default) or group (best practice so that more than one user can be \n-- provided these permissions) security principal. The principal assigned to this will have administrative permissions \n-- to the SQL Pools contained in the workspace.\n\n\n-- Manage IP firewall rules\n-- Having robust Internet security is a must for every technology system. One way to mitigate internet threat vectors is by \n-- reducing the number of public IP addresses that can access the Azure Synapse Analytics Workspace through the use of \n-- IP firewall rules. The Azure Synapse Analytics workspace will then delegate those same rules to all managed public \n-- endpoints of the workspace, including those for SQL pools and SQL Serverless endpoints.\n\n-- Managing secrets with Azure Key Vault\n-- When dealing with connectivity to external data sources and services, sensitive connection information such as passwords and \n-- access keys should be properly handled. It is recommended that this type of information be stored in an Azure Key Vault. \n-- Leveraging Azure Key Vault not only protects against secrets being compromised, it also serves as a central source of truth; \n-- meaning that if a secret value needs to be updated (such as when cycling access keys on a storage account), \n-- it can be changed in one place and all services consuming this key will start pulling the new value immediately. \n-- Azure Key Vault encrypts and decrypts information transparently using 256-bit AES encryption, which is FIPS 140-2 compliant.\n\n-- Use Azure Key Vault for secrets when creating Linked Services\n-- Linked Services are synonymous with connection strings in Azure Synapse Analytics. Azure Synapse Analytics linked services \n-- provides the ability to connect to nearly 100 different types of external services ranging from Azure Storage Accounts to \n-- Amazon S3 and more. When connecting to external services, having secrets related to connection information is almost \n-- guaranteed. The best place to store these secrets is the Azure Key Vault. Azure Synapse Analytics provides the ability \n-- to configure all linked service connections with values from Azure Key Vault.\n\n\n-- Secure workspace pipeline runs\n-- It is recommended to store any secrets that are part of your pipeline in Azure Key Vault. In this task you will retrieve \n-- these values using a Web activity, just to show the mechanics. The second part of this task demonstrates using a Web \n-- activity in the pipeline to retrieve a secret from the Key Vault.\n\n-- Secure Azure Synapse Analytics SQL Pools\n-- Transparent Data Encryption (TDE) is a feature of SQL Server that provides encryption and decryption of data at rest, \n-- this includes: databases, log files, and back ups. When using this feature with ASA SQL Pools, it will use a built in \n-- symmetric Database Encryption Key (DEK) that is provided by the pool itself. With TDE, all stored data is encrypted on disk,\n--  when the data is requested, TDE will decrypt this data at the page level as it's read into memory, and vice-versa \n-- encrypting in-memory data before it gets written back to disk. As with the name, this happens transparently without \n-- affecting any application code. When creating a SQL Pool through ASA, Transparent Data Encryption is not enabled. \n-- The first part of this task will show you how to enable this feature.\n\n-- Column Level Security\n /*  Column-level security feature in Azure Synapse simplifies the design and coding of security in application.\n    It ensures column level security by restricting column access to protect sensitive data. */\n\n/* Scenario: In this scenario we will be working with two users. The first one is the CEO, he has access to all\n    data. The second one is DataAnalystMiami, this user doesn't have access to the confidential Revenue column\n    in the Sales table. Follow this lab, one step at a time to see how Column-level security removes access to the\n    Revenue column to DataAnalystMiami */\n\n--Step 1: Let us see how this feature in Azure Synapse works. Before that let us have a look at the Campaign table.\nselect  Top 100 * from wwi_Security.Sale\nwhere City is not null and state is not null\n\n/*  Consider a scenario where there are two users.\n    A CEO, who is an authorized  personnel with access to all the information in the database\n    and a Data Analyst, to whom only required information should be presented.*/\n\n-- Step:2 Verify the existence of the 'CEO' and 'DataAnalystMiami' users in the Datawarehouse.\nSELECT Name as [User1] FROM sys.sysusers WHERE name = N'CEO';\nSELECT Name as [User2] FROM sys.sysusers WHERE name = N'DataAnalystMiami';\n\n\n-- Step:3 Now let us enforce column level security for the DataAnalystMiami.\n/*  The Sales table in the warehouse has information like ProductID, Analyst, Product, CampaignName, Quantity, Region, State, City, RevenueTarget and Revenue.\n    The Revenue generated from every campaign is classified and should be hidden from DataAnalystMiami.\n*/\n\nREVOKE SELECT ON wwi_security.Sale FROM DataAnalystMiami;\nGRANT SELECT ON wwi_security.Sale([ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget]) TO DataAnalystMiami;\n-- This provides DataAnalystMiami access to all the columns of the Sale table but Revenue.\n\n-- Step:4 Then, to check if the security has been enforced, we execute the following query with current User As 'DataAnalystMiami', this will result in an error\n--  since DataAnalystMiami doesn't have select access to the Revenue column\nEXECUTE AS USER ='DataAnalystMiami';\nselect TOP 100 * from wwi_security.Sale;\n---\n-- The following query will succeed since we are not including the Revenue column in the query.\nEXECUTE AS USER ='DataAnalystMiami';\nselect [ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget] from wwi_security.Sale;\n\n-- Step:5 Whereas, the CEO of the company should be authorized with all the information present in the warehouse.To do so, we execute the following query.\nRevert;\nGRANT SELECT ON wwi_security.Sale TO CEO;  --Full access to all columns.\n\n-- Step:6 Let us check if our CEO user can see all the information that is present. Assign Current User As 'CEO' and the execute the query\nEXECUTE AS USER ='CEO'\nselect * from wwi_security.Sale\nRevert;\n\n-- Row Level Security\n/*\tRow level Security (RLS) in Azure Synapse enables us to use group membership to control access to rows in a table.\n\tAzure Synapse applies the access restriction every time the data access is attempted from any user. \n\tLet see how we can implement row level security in Azure Synapse.*/\n\n----------------------------------Row-Level Security (RLS), 1: Filter predicates------------------------------------------------------------------\n-- Step:1 The Sale table has two Analyst values: DataAnalystMiami and DataAnalystSanDiego. \n--     Each analyst has jurisdiction across a specific Region. DataAnalystMiami on the South East Region\n--      and DataAnalystSanDiego on the Far West region.\nSELECT DISTINCT Analyst, Region FROM wwi_security.Sale order by Analyst ;\n\n/* Scenario: WWI requires that an Analyst only see the data for their own data from their own region. The CEO should see ALL data.\n    In the Sale table, there is an Analyst column that we can use to filter data to a specific Analyst value. */\n\n/* We will define this filter using what is called a Security Predicate. This is an inline table-valued function that allows\n    us to evaluate additional logic, in this case determining if the Analyst executing the query is the same as the Analyst\n    specified in the Analyst column in the row. The function returns 1 (will return the row) when a row in the Analyst column is the same as the \n    user executing the query (@Analyst = USER_NAME()) or if the user executing the query is the CEO user (USER_NAME() = 'CEO')\n    whom has access to all data.\n*/\n\n-- Review any existing security predicates in the database\nSELECT * FROM sys.security_predicates\n\n--Step:2 Create a new Schema to hold the security predicate, then define the predicate function. It returns 1 (or True) when\n--  a row should be returned in the parent query.\nGO\n\nCREATE FUNCTION wwi_security.fn_securitypredicate(@Analyst AS sysname)  \n    RETURNS TABLE  \nWITH SCHEMABINDING  \nAS  \n    RETURN SELECT 1 AS fn_securitypredicate_result\n    WHERE @Analyst = USER_NAME() OR USER_NAME() = 'CEO'\nGO\n-- Now we define security policy that adds the filter predicate to the Sale table. This will filter rows based on their login name.\nCREATE SECURITY POLICY SalesFilter  \nADD FILTER PREDICATE wwi_security.fn_securitypredicate(Analyst)\nON wwi_security.Sale\nWITH (STATE = ON);\n\n------ Allow SELECT permissions to the Sale Table.------\nGRANT SELECT ON wwi_security.Sale TO CEO, DataAnalystMiami, DataAnalystSanDiego;\n\n-- Step:3 Let us now test the filtering predicate, by selecting data from the Sale table as 'DataAnalystMiami' user.\nEXECUTE AS USER = 'DataAnalystMiami' \nSELECT * FROM wwi_security.Sale;\nrevert;\n-- As we can see, the query has returned rows here Login name is DataAnalystMiami\n\n-- Step:4 Let us test the same for  'DataAnalystSanDiego' user.\nEXECUTE AS USER = 'DataAnalystSanDiego';\nSELECT * FROM wwi_security.Sale;\nrevert;\n-- RLS is working indeed.\n\n-- Step:5 The CEO should be able to see all rows in the table.\nEXECUTE AS USER = 'CEO';  \nSELECT * FROM wwi_security.Sale;\nrevert;\n-- And he can.\n\n--Step:6 To disable the security policy we just created above, we execute the following.\nALTER SECURITY POLICY SalesFilter  \nWITH (STATE = OFF);\n\nDROP SECURITY POLICY SalesFilter;\nDROP FUNCTION wwi_security.fn_securitypredicate;\n\n-- Dynamic Data Masking\n-------------------------------------------------------------------------Dynamic Data Masking (DDM)----------------------------------------------------------------------------------------------------------\n/*  Dynamic data masking helps prevent unauthorized access to sensitive data by enabling customers\n    to designate how much of the sensitive data to reveal with minimal impact on the application layer.\n    Let see how */\n\n/* Scenario: WWI has identified sensitive information in the CustomerInfo table. They would like us to \n    obfuscate the CreditCard and Email columns of the CustomerInfo table to DataAnalysts */\n\n-- Step:1 Let us first get a view of CustomerInfo table.\nSELECT TOP (100) * FROM wwi_security.CustomerInfo;\n\n-- Step:2 Let's confirm that there are no Dynamic Data Masking (DDM) applied on columns.\nSELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \nFROM sys.masked_columns AS c  \nJOIN sys.tables AS tbl\n    ON c.[object_id] = tbl.[object_id]  \nWHERE is_masked = 1\n    AND tbl.name = 'CustomerInfo';\n-- No results returned verify that no data masking has been done yet.\n\n-- Step:3 Now lets mask 'CreditCard' and 'Email' Column of 'CustomerInfo' table.\nALTER TABLE wwi_security.CustomerInfo  \nALTER COLUMN [CreditCard] ADD MASKED WITH (FUNCTION = 'partial(0,\"XXXX-XXXX-XXXX-\",4)');\nGO\nALTER TABLE wwi_security.CustomerInfo\nALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');\nGO\n-- The columns are sucessfully masked.\n\n-- Step:4 Let's see Dynamic Data Masking (DDM) applied on the two columns.\nSELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \nFROM sys.masked_columns AS c  \nJOIN sys.tables AS tbl\n    ON c.[object_id] = tbl.[object_id]  \nWHERE is_masked = 1\n    AND tbl.name ='CustomerInfo';\n\n-- Step:5 Now, let us grant SELECT permission to 'DataAnalystMiami' on the 'CustomerInfo' table.\nGRANT SELECT ON wwi_security.CustomerInfo TO DataAnalystMiami;  \n\n-- Step:6 Logged in as  'DataAnalystMiami' let us execute the select query and view the result.\nEXECUTE AS USER = 'DataAnalystMiami';  \nSELECT * FROM wwi_security.CustomerInfo;\n\n-- Step:7 Let us remove the data masking using UNMASK permission\nGRANT UNMASK TO DataAnalystMiami;\nEXECUTE AS USER = 'DataAnalystMiami';  \nSELECT *\nFROM wwi_security.CustomerInfo;\nrevert;\nREVOKE UNMASK TO DataAnalystMiami;  \n\n----step:8 Reverting all the changes back to as it was.\nALTER TABLE wwi_security.CustomerInfo\nALTER COLUMN CreditCard DROP MASKED;\nGO\nALTER TABLE wwi_security.CustomerInfo\nALTER COLUMN Email DROP MASKED;\nGO\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "dataaidw",
				"poolName": "dataaidw"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}