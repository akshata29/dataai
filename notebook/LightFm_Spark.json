{
	"name": "LightFm_Spark",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "lightfm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "be2fbb45-4b6d-48e4-b307-896a5b0e3672"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/lightfm",
				"name": "lightfm",
				"type": "Spark",
				"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/lightfm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pkg_resources\r\n",
					"for d in pkg_resources.working_set:\r\n",
					"     print(d)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from lightfm import LightFM\r\n",
					"from lightfm.datasets import fetch_movielens\r\n",
					"from lightfm.evaluation import precision_at_k\r\n",
					"\r\n",
					"# Load the MovieLens 100k dataset. Only five\r\n",
					"# star ratings are treated as positive.\r\n",
					"data = fetch_movielens(min_rating=5.0)\r\n",
					"\r\n",
					"# Instantiate and train the model\r\n",
					"model = LightFM(loss='warp')\r\n",
					"model.fit(data['train'], epochs=30, num_threads=2)\r\n",
					"\r\n",
					"# Evaluate the trained model\r\n",
					"test_precision = precision_at_k(model, data['test'], k=5).mean()"
				],
				"execution_count": 2
			}
		]
	}
}