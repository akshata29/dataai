{
	"name": "1_synapse machine learning",
	"properties": {
		"folder": {
			"name": "WideWorldImport/03_machine learning"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "dataaispk",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "47065312-bb7e-4223-9db2-cbe2893017ae"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"85f06203-f53f-4c03-a053-108b0029e611": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "84fa61f6",
										"1": "84fdf5e6",
										"2": "1",
										"3": "1007.3703074960509",
										"4": "100.96380068432816",
										"5": "1504.0231375425865",
										"6": "0",
										"7": "1",
										"8": "1",
										"9": "99995.89371017777",
										"10": "199993.30455927135"
									},
									{
										"0": "84fa61f7",
										"1": "84fdf5e7",
										"2": "1",
										"3": "1009.0165993860892",
										"4": "96.59174824100965",
										"5": "1518.7985456646848",
										"6": "1",
										"7": "1",
										"8": "1",
										"9": "100003.62001368884",
										"10": "199996.44033653763"
									},
									{
										"0": "84fa61f8",
										"1": "84fdf5e8",
										"2": "1",
										"3": "1017.6356795795646",
										"4": "101.38067630056376",
										"5": "1501.3119027109806",
										"6": "1",
										"7": "1",
										"8": "1",
										"9": "99994.04629461098",
										"10": "199989.20031100875"
									},
									{
										"0": "84fa61f9",
										"1": "84fdf5e9",
										"2": "1",
										"3": "1016.6712169423425",
										"4": "79.58174744809645",
										"5": "1508.114820588185",
										"6": "1",
										"7": "1",
										"8": "1",
										"9": "99997.76828826875",
										"10": "199992.02201807586"
									},
									{
										"0": "84fa61fa",
										"1": "84fdf5ea",
										"2": "0",
										"3": "1013.7909772121608",
										"4": "91.33996840809115",
										"5": "1517.5457928925623",
										"6": "0",
										"7": "1",
										"8": "1",
										"9": "100005.97362876785",
										"10": "199996.4210598991"
									},
									{
										"0": "84fa61fb",
										"1": "84fdf5eb",
										"2": "0",
										"3": "1006.5798773466613",
										"4": "115.14108135868779",
										"5": "1502.5461750505765",
										"6": "1",
										"7": "1",
										"8": "0",
										"9": "100009.80125926025",
										"10": "199993.94838620344"
									},
									{
										"0": "84fa61fc",
										"1": "84fdf5ec",
										"2": "1",
										"3": "1000.5136432788325",
										"4": "80.51395571255301",
										"5": "1497.9178336575956",
										"6": "1",
										"7": "1",
										"8": "1",
										"9": "99998.92190675237",
										"10": "200000.39192579014"
									},
									{
										"0": "84fa61fd",
										"1": "84fdf5ed",
										"2": "0",
										"3": "1003.758183775668",
										"4": "105.46639996026579",
										"5": "1519.8563854945417",
										"6": "0",
										"7": "1",
										"8": "0",
										"9": "100002.68122153166",
										"10": "199995.81658039338"
									},
									{
										"0": "84fa61fe",
										"1": "84fdf5ee",
										"2": "1",
										"3": "1010.8742438074745",
										"4": "82.881543368899",
										"5": "1496.1631885981394",
										"6": "1",
										"7": "1",
										"8": "1",
										"9": "99996.8829138568",
										"10": "199993.9386832266"
									},
									{
										"0": "84fa61ff",
										"1": "84fdf5ef",
										"2": "1",
										"3": "1006.5953469343162",
										"4": "117.9262499309015",
										"5": "1490.3738639911314",
										"6": "0",
										"7": "1",
										"8": "1",
										"9": "99995.42810358423",
										"10": "199990.92090442116"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "CustomerId",
										"type": "string"
									},
									{
										"key": "1",
										"name": "ProductId",
										"type": "string"
									},
									{
										"key": "2",
										"name": "Rating",
										"type": "string"
									},
									{
										"key": "3",
										"name": "Cost",
										"type": "string"
									},
									{
										"key": "4",
										"name": "Size",
										"type": "string"
									},
									{
										"key": "5",
										"name": "Price",
										"type": "string"
									},
									{
										"key": "6",
										"name": "PrimaryBrandId",
										"type": "string"
									},
									{
										"key": "7",
										"name": "GenderId",
										"type": "string"
									},
									{
										"key": "8",
										"name": "MaritalStatus",
										"type": "string"
									},
									{
										"key": "9",
										"name": "LowerIncomeBound",
										"type": "string"
									},
									{
										"key": "10",
										"name": "UpperIncomeBound",
										"type": "string"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"dc12336e-3b26-4953-b317-df2cdc0c7d08": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "1",
										"1": "2021"
									},
									{
										"0": "0",
										"1": "2021"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "Rating",
										"type": "int"
									},
									{
										"key": "1",
										"name": "count",
										"type": "bigint"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"d0e800ac-580b-4dc4-991b-2d940891893c": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "1",
										"1": {
											"type": 1,
											"values": [
												1013.1693458073678,
												81.48396248120595,
												1510.8065660915163,
												0,
												1,
												1,
												99993.97956663521,
												199995.70871892222
											]
										},
										"2": {
											"type": 1,
											"values": [
												-6.364184072986553,
												6.364184072986553
											]
										},
										"3": {
											"type": 1,
											"values": [
												0.0017191853435571947,
												0.9982808146564428
											]
										},
										"4": "1.0"
									},
									{
										"0": "1",
										"1": {
											"type": 1,
											"values": [
												1006.572581053828,
												96.89892809136968,
												1512.9349488618368,
												0,
												1,
												1,
												99999.66735298479,
												199992.23736098956
											]
										},
										"2": {
											"type": 1,
											"values": [
												-2.7822262284724566,
												2.7822262284724566
											]
										},
										"3": {
											"type": 1,
											"values": [
												0.058292228173575045,
												0.941707771826425
											]
										},
										"4": "1.0"
									},
									{
										"0": "1",
										"1": {
											"type": 1,
											"values": [
												1019.0877455784694,
												87.55956439146641,
												1512.7248840200587,
												1,
												1,
												1,
												100001.98976262085,
												199988.69290662097
											]
										},
										"2": {
											"type": 1,
											"values": [
												-2.224423774389368,
												2.224423774389368
											]
										},
										"3": {
											"type": 1,
											"values": [
												0.09757856596859005,
												0.90242143403141
											]
										},
										"4": "1.0"
									},
									{
										"0": "1",
										"1": {
											"type": 1,
											"values": [
												1011.4020471519617,
												95.88854759865906,
												1516.9994677197067,
												0,
												1,
												1,
												99992.29215023812,
												199992.53579323663
											]
										},
										"2": {
											"type": 1,
											"values": [
												-7.560978415083746,
												7.560978415083746
											]
										},
										"3": {
											"type": 1,
											"values": [
												0.0005200952211268373,
												0.9994799047788732
											]
										},
										"4": "1.0"
									},
									{
										"0": "1",
										"1": {
											"type": 1,
											"values": [
												1013.2124357520984,
												98.04187478550648,
												1507.695687496717,
												0,
												0,
												1,
												99993.47759114974,
												199994.30247329685
											]
										},
										"2": {
											"type": 1,
											"values": [
												-6.145069551959311,
												6.145069551959311
											]
										},
										"3": {
											"type": 1,
											"values": [
												0.002139439749379135,
												0.9978605602506209
											]
										},
										"4": "1.0"
									},
									{
										"0": "1",
										"1": {
											"type": 1,
											"values": [
												1008.4329658579697,
												91.21030848978025,
												1501.8971381852189,
												1,
												1,
												1,
												99994.71856935644,
												199999.71482615347
											]
										},
										"2": {
											"type": 1,
											"values": [
												-5.32153801315326,
												5.32153801315326
											]
										},
										"3": {
											"type": 1,
											"values": [
												0.004861484896355184,
												0.9951385151036448
											]
										},
										"4": "1.0"
									},
									{
										"0": "0",
										"1": {
											"type": 1,
											"values": [
												1014.5020575176037,
												95.23975845909365,
												1519.5559004004217,
												0,
												1,
												0,
												100010.21601772199,
												199987.49531176878
											]
										},
										"2": {
											"type": 1,
											"values": [
												8.697291434037677,
												-8.697291434037677
											]
										},
										"3": {
											"type": 1,
											"values": [
												0.9998329902656491,
												0.00016700973435093905
											]
										},
										"4": "0.0"
									},
									{
										"0": "0",
										"1": {
											"type": 1,
											"values": [
												1009.4020560701326,
												102.1023996553157,
												1507.9379387060353,
												0,
												1,
												0,
												100002.78159339169,
												199995.17197619507
											]
										},
										"2": {
											"type": 1,
											"values": [
												2.6905695752210304,
												-2.6905695752210304
											]
										},
										"3": {
											"type": 1,
											"values": [
												0.9364678774194245,
												0.06353212258057547
											]
										},
										"4": "0.0"
									},
									{
										"0": "1",
										"1": {
											"type": 1,
											"values": [
												1015.7743107044632,
												94.54243601228647,
												1510.225206452774,
												0,
												0,
												0,
												99994.06289895604,
												199993.8310820084
											]
										},
										"2": {
											"type": 1,
											"values": [
												-4.083268940585532,
												4.083268940585532
											]
										},
										"3": {
											"type": 1,
											"values": [
												0.016572993556286497,
												0.9834270064437135
											]
										},
										"4": "1.0"
									},
									{
										"0": "1",
										"1": {
											"type": 1,
											"values": [
												1010.5804746871684,
												102.5344682637609,
												1508.3690153477446,
												0,
												1,
												1,
												99990.7784189871,
												199990.50782652057
											]
										},
										"2": {
											"type": 1,
											"values": [
												-7.42813493916687,
												7.42813493916687
											]
										},
										"3": {
											"type": 1,
											"values": [
												0.0005939418984050038,
												0.999406058101595
											]
										},
										"4": "1.0"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "Rating",
										"type": "int"
									},
									{
										"key": "1",
										"name": "features",
										"type": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7"
									},
									{
										"key": "2",
										"name": "rawPrediction",
										"type": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7"
									},
									{
										"key": "3",
										"name": "probability",
										"type": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7"
									},
									{
										"key": "4",
										"name": "prediction",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"4"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"34027e82-ad48-456e-a2ca-6b01581885e5": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "Classification",
										"1": {
											"numCols": 2,
											"isTransposed": false,
											"values": [
												448,
												77,
												31,
												402
											],
											"type": 1,
											"numRows": 2
										},
										"2": "0.8872651356993737",
										"3": "0.9284064665127021",
										"4": "0.8392484342379958",
										"5": "0.8872651356993737"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "evaluation_type",
										"type": "string"
									},
									{
										"key": "1",
										"name": "confusion_matrix",
										"type": "org.apache.spark.ml.linalg.MatrixUDT@e59e0c69"
									},
									{
										"key": "2",
										"name": "accuracy",
										"type": "double"
									},
									{
										"key": "3",
										"name": "precision",
										"type": "double"
									},
									{
										"key": "4",
										"name": "recall",
										"type": "double"
									},
									{
										"key": "5",
										"name": "AUC",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"2"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e2171f6d-2650-45e6-af7e-6d6e44ca92b1/resourceGroups/dataai/providers/Microsoft.Synapse/workspaces/dataaisynapsewks/bigDataPools/dataaispk",
				"name": "dataaispk",
				"type": "Spark",
				"endpoint": "https://dataaisynapsewks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dataaispk",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Install Synapse ML in the Apache Spark session"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# %%configure -f\n",
					"# {\n",
					"#     \"name\": \"synapseml\",\n",
					"#     \"conf\": {\n",
					"#         \"spark.jars.packages\": \"com.microsoft.azure:synapseml_2.12:0.9.4\",\n",
					"#         \"spark.jars.repositories\": \"https://mmlspark.azureedge.net/maven\",\n",
					"#         \"spark.jars.excludes\": \"org.scala-lang:scala-reflect,org.apache.spark:spark-tags_2.12,org.scalactic:scalactic_2.12,org.scalatest:scalatest_2.12\",\n",
					"#         \"spark.yarn.user.classpath.first\": \"true\"\n",
					"#     }\n",
					"# }"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Part 1 - Entity detection with Cognitive Services\n",
					"\n",
					"Detect entities in text using the Cognitive Services entity detector transformer from Synapse ML."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Retrieve the Cognitive Services credentials and create the test dataset."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"key = mssparkutils.credentials.getSecret('dataaikeyvault', 'dataaitextanalytics-Key')\n",
					"location = 'southcentralus'\n",
					"\n",
					"df = spark.createDataFrame(data=[\n",
					"        [1, \"Muad'Dib learned rapidly because his first training was in how to learn. And the first lesson of all was the basic trust that he could learn. It's shocking to find how many people do not believe they can learn, and how many more believe learning to be difficult. Muad'Dib knew that every experience carries its lesson.\"],\n",
					"        [2, \"It's the ship that made the Kessel run in less than twelve parsecs. I've outrun Imperial starships. Not the local bulk cruisers, mind you. I'm talking about the big Corellian ships, now. She's fast enough for you, old man.\"]\n",
					"    ], \n",
					"    schema=[\"id\",\"text\"])"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Define the transformer to detect the entities mentioned in text."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from synapse.ml.cognitive import *\n",
					"\n",
					"entity = (EntityDetector()\n",
					"      .setSubscriptionKey(key)\n",
					"      .setLocation(location)\n",
					"      .setLanguage(\"en\")\n",
					"      .setOutputCol(\"entities\")\n",
					"      .setErrorCol(\"error\"))\n",
					"\n",
					"df_entities = entity.transform(df)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Check out the entities identified from the first phrase."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(df_entities.head(1)[0].entities[0].entities[0].id)\n",
					"print(df_entities.head(1)[0].entities[0].entities[0].url)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Check out the entities identified from the second phrase."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(df_entities.tail(1)[0].entities[0].entities[0].id)\n",
					"print(df_entities.tail(1)[0].entities[0].entities[0].url)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Part 2 - Train a customer recommendation model\n",
					"\n",
					"Use the LightGBM Synapse ML algorithm to train a model for retail product recommendation."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Configure\n",
					"\n",
					"Reference the required libraries and check Synapse ML version (shoudl be 0.9.4)."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"import logging\n",
					"logging.getLogger(\"py4j\").setLevel(logging.ERROR)\n",
					"\n",
					"import pandas as pd\n",
					"import seaborn as sns\n",
					"from matplotlib import pyplot as plt\n",
					"\n",
					"from pyspark.version import __version__ as pyspark_version\n",
					"\n",
					"from synapse.ml.core import __spark_package_version__\n",
					"from synapse.ml.train import ComputeModelStatistics\n",
					"from synapse.ml.lightgbm import LightGBMClassifier\n",
					"from pyspark.ml.feature import VectorAssembler\n",
					"\n",
					"pd.set_option('display.max_columns', 50)\n",
					"\n",
					"print(f\"PySpark version: {pyspark_version}\")\n",
					"print(f\"SynapseML version: {__spark_package_version__}\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"source": [
					"Set the data preparation and model training parameters. \n",
					"\n",
					"Check the [Synapse ML LightGBM documentation](https://microsoft.github.io/SynapseML/docs/features/lightgbm/LightGBM%20-%20Overview/) for more details on setting the parameters of the ML model."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Blob url\n",
					"# Original blob: \"https://recodatasets.z20.web.core.windows.net/random-dataset/PersonalizedData.csv\"\n",
					"url = \"abfss://wwi-02@dataairawdls.dfs.core.windows.net/data/PersonalizedData.csv\"\n",
					"\n",
					"# Data parameters\n",
					"LABEL_COL = \"Rating\"\n",
					"FEATURE_COL = \"features\"\n",
					"RATIO = 0.8\n",
					"SEED = 42\n",
					"\n",
					"# Model parameters\n",
					"OBJECTIVE = \"binary\"\n",
					"BOOSTING = \"gbdt\"\n",
					"NUM_LEAVES = 32\n",
					"NUM_ITERATIONS = 100\n",
					"LEARNING_RATE = 0.1\n",
					"FEATURE_FRACTION = 0.8\n",
					"EARLY_STOPPING_ROUND = 10\n",
					"MODEL_NAME = \"lgb-quickstart\"\n",
					""
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Prepare and analyze data\n",
					"\n",
					"\n",
					"Load the data from the source and observe the schema."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Added the file to linked ADLSv2\n",
					"raw_data = spark.read.csv(url, header=True, inferSchema=True)\n",
					"print(\"Schema: \")\n",
					"# raw_data.printSchema()\n",
					"\n",
					"df = raw_data.toPandas()\n",
					"print(\"Shape: \", df.shape)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"Take a look at some of the items in the dataset. Notice the two-class ratings (0 vs. 1) provided by customers to products.\n",
					"The goal of this exercise is to build a Machine Learning classification model capable of predicting the rating based on Cost, Size, Price, PrimaryBrandId, GenderId, MaritalStatus, LowerIncomeBound, and UpperIncomeBound. To achieve the goal, you will use Azure Machine Learning (AML) automated machine learning (Auto ML)."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(df.iloc[:10, :])"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Check out the statistical properties of the dataset."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"df.describe()\n",
					""
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Calculate and display the dataset fratures correlation matrix."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# calculate the correlation matrix\n",
					"corr = df.corr()\n",
					"\n",
					"# plot the correlation heatmap\n",
					"fig, ax = plt.subplots(figsize=(10,10))         # Sample figsize in inches\n",
					"\n",
					"sns.heatmap(corr, \n",
					"            xticklabels=corr.columns, \n",
					"            yticklabels=corr.columns, \n",
					"            cmap='RdBu', \n",
					"            vmin=-1, \n",
					"            vmax=1, \n",
					"            ax=ax, \n",
					"            annot=True,\n",
					"            fmt='.2f', \n",
					"            annot_kws={'size': 10})\n",
					"plt.show()"
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Display the paiwise feature correlations as scatterplots."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#scatterplot\n",
					"sns.set()\n",
					"sns.pairplot(df, height=2.5)\n",
					"plt.show()"
				],
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Train the ML model\n",
					"\n",
					"Split the dataset into train and test subsets."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"raw_train, raw_test = raw_data.randomSplit([RATIO, 1 - RATIO], seed=SEED)\n",
					"print(\"Train: (rows, columns) = {}\".format((raw_train.count(), len(raw_train.columns))))\n",
					"print(\"Test: (rows, columns) = {}\".format((raw_test.count(), len(raw_test.columns))))"
				],
				"execution_count": 21
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Perform feature engineering - transform the original data feature columns into feature vectors."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"columns = raw_data.columns[3:]\n",
					"featurizer = VectorAssembler(inputCols=columns, outputCol=FEATURE_COL)\n",
					"train = featurizer.transform(raw_train)[LABEL_COL, FEATURE_COL]\n",
					"test = featurizer.transform(raw_test)[LABEL_COL, FEATURE_COL]"
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Check if data is unbalanced."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(train.groupBy(LABEL_COL).count())\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Define the LBGM model.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"lgbm = LightGBMClassifier(\n",
					"    labelCol=LABEL_COL,\n",
					"    featuresCol=FEATURE_COL,\n",
					"    objective=OBJECTIVE,\n",
					"    isUnbalance=False,\n",
					"    boostingType=BOOSTING,\n",
					"    boostFromAverage=True,\n",
					"    baggingSeed=SEED,\n",
					"    numLeaves=NUM_LEAVES,\n",
					"    numIterations=NUM_ITERATIONS,\n",
					"    learningRate=LEARNING_RATE,\n",
					"    featureFraction=FEATURE_FRACTION,\n",
					"    earlyStoppingRound=EARLY_STOPPING_ROUND\n",
					")\n",
					""
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Train the LGBM model."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"model = lgbm.fit(train)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "markdown",
				"source": [
					"Display the relative feature importance as it results from the training process."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"feature_importances = model.getFeatureImportances()\n",
					"fi = pd.Series(feature_importances,index = columns)\n",
					"fi = fi.sort_values(ascending = True)\n",
					"f_index = fi.index\n",
					"f_values = fi.values\n",
					" \n",
					"# print feature importances \n",
					"print ('f_index:',f_index)\n",
					"print ('f_values:',f_values)\n",
					"\n",
					"# plot\n",
					"x_index = list(range(len(fi)))\n",
					"x_index = [x/len(fi) for x in x_index]\n",
					"plt.rcParams['figure.figsize'] = (10,10)\n",
					"plt.barh(x_index,f_values,height = 0.028 ,align=\"center\",color = 'tan',tick_label=f_index)\n",
					"plt.xlabel('importances')\n",
					"plt.ylabel('features')\n",
					"plt.show()"
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Perform predictions with the model"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"predictions = model.transform(test)\n",
					""
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(predictions.limit(10))"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Evaluate the performance of the model."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"evaluator = (\n",
					"    ComputeModelStatistics()\n",
					"    .setScoredLabelsCol(\"prediction\")\n",
					"    .setLabelCol(LABEL_COL)\n",
					"    .setEvaluationMetric(\"classification\")\n",
					")\n",
					"\n",
					"metrics = evaluator.transform(predictions)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Observe the main performance metrics of a classification model:\n",
					"\n",
					"- Confision matrix\n",
					"- Accuracy\n",
					"- Precision\n",
					"- Recall\n",
					"- AUC (Area Under the Curve)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(metrics)"
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Save the model\n",
					"\n",
					"Save the model to storage."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"print(MODEL_NAME)"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# (model\r\n",
					"#  .write()\r\n",
					"#  .overwrite()\r\n",
					"#  .save(MODEL_NAME))"
				],
				"execution_count": 32
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##"
				]
			}
		]
	}
}